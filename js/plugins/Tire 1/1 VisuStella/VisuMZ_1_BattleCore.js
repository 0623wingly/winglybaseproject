//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.84;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.84] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x5e79d1=_0xae2e;(function(_0x446cdd,_0x491d52){const _0x3fe003=_0xae2e,_0x574abb=_0x446cdd();while(!![]){try{const _0x587542=-parseInt(_0x3fe003(0xccb))/0x1*(parseInt(_0x3fe003(0x79f))/0x2)+parseInt(_0x3fe003(0xb70))/0x3+parseInt(_0x3fe003(0x805))/0x4*(parseInt(_0x3fe003(0x517))/0x5)+parseInt(_0x3fe003(0x731))/0x6*(-parseInt(_0x3fe003(0x628))/0x7)+parseInt(_0x3fe003(0xa76))/0x8+-parseInt(_0x3fe003(0x622))/0x9*(-parseInt(_0x3fe003(0xb5a))/0xa)+-parseInt(_0x3fe003(0x5c3))/0xb*(parseInt(_0x3fe003(0x737))/0xc);if(_0x587542===_0x491d52)break;else _0x574abb['push'](_0x574abb['shift']());}catch(_0x1d0632){_0x574abb['push'](_0x574abb['shift']());}}}(_0xdf00,0x31a83));var label=_0x5e79d1(0x57e),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x5e79d1(0x984)](function(_0x4e415e){const _0x4953bd=_0x5e79d1;return _0x4e415e[_0x4953bd(0x40a)]&&_0x4e415e['description'][_0x4953bd(0x9fb)]('['+label+']');})[0x0];VisuMZ[label][_0x5e79d1(0xc89)]=VisuMZ[label][_0x5e79d1(0xc89)]||{},VisuMZ['ConvertParams']=function(_0x7811ed,_0xd88d2f){const _0x13c195=_0x5e79d1;for(const _0x5648f3 in _0xd88d2f){if(_0x5648f3['match'](/(.*):(.*)/i)){const _0x1671fe=String(RegExp['$1']),_0x59cd21=String(RegExp['$2'])['toUpperCase']()[_0x13c195(0xacc)]();let _0x41e295,_0x62777f,_0x5690a7;switch(_0x59cd21){case _0x13c195(0x201):_0x41e295=_0xd88d2f[_0x5648f3]!==''?Number(_0xd88d2f[_0x5648f3]):0x0;break;case _0x13c195(0x1ce):_0x62777f=_0xd88d2f[_0x5648f3]!==''?JSON[_0x13c195(0x250)](_0xd88d2f[_0x5648f3]):[],_0x41e295=_0x62777f[_0x13c195(0x343)](_0x47524d=>Number(_0x47524d));break;case'EVAL':_0x41e295=_0xd88d2f[_0x5648f3]!==''?eval(_0xd88d2f[_0x5648f3]):null;break;case _0x13c195(0xc76):_0x62777f=_0xd88d2f[_0x5648f3]!==''?JSON['parse'](_0xd88d2f[_0x5648f3]):[],_0x41e295=_0x62777f[_0x13c195(0x343)](_0x353628=>eval(_0x353628));break;case _0x13c195(0xaf6):_0x41e295=_0xd88d2f[_0x5648f3]!==''?JSON[_0x13c195(0x250)](_0xd88d2f[_0x5648f3]):'';break;case _0x13c195(0xac8):_0x62777f=_0xd88d2f[_0x5648f3]!==''?JSON[_0x13c195(0x250)](_0xd88d2f[_0x5648f3]):[],_0x41e295=_0x62777f[_0x13c195(0x343)](_0x3839d0=>JSON['parse'](_0x3839d0));break;case _0x13c195(0x951):_0x41e295=_0xd88d2f[_0x5648f3]!==''?new Function(JSON['parse'](_0xd88d2f[_0x5648f3])):new Function('return\x200');break;case _0x13c195(0x8fc):_0x62777f=_0xd88d2f[_0x5648f3]!==''?JSON[_0x13c195(0x250)](_0xd88d2f[_0x5648f3]):[],_0x41e295=_0x62777f[_0x13c195(0x343)](_0x26a407=>new Function(JSON[_0x13c195(0x250)](_0x26a407)));break;case'STR':_0x41e295=_0xd88d2f[_0x5648f3]!==''?String(_0xd88d2f[_0x5648f3]):'';break;case _0x13c195(0xa41):_0x62777f=_0xd88d2f[_0x5648f3]!==''?JSON[_0x13c195(0x250)](_0xd88d2f[_0x5648f3]):[],_0x41e295=_0x62777f['map'](_0x4f327e=>String(_0x4f327e));break;case _0x13c195(0xa2f):_0x5690a7=_0xd88d2f[_0x5648f3]!==''?JSON[_0x13c195(0x250)](_0xd88d2f[_0x5648f3]):{},_0x7811ed[_0x1671fe]={},VisuMZ['ConvertParams'](_0x7811ed[_0x1671fe],_0x5690a7);continue;case _0x13c195(0xa7c):_0x62777f=_0xd88d2f[_0x5648f3]!==''?JSON[_0x13c195(0x250)](_0xd88d2f[_0x5648f3]):[],_0x41e295=_0x62777f[_0x13c195(0x343)](_0x3039d8=>VisuMZ[_0x13c195(0x9de)]({},JSON[_0x13c195(0x250)](_0x3039d8)));break;default:continue;}_0x7811ed[_0x1671fe]=_0x41e295;}}return _0x7811ed;},(_0x3277e1=>{const _0x5e15ee=_0x5e79d1,_0x35008f=_0x3277e1[_0x5e15ee(0x66e)];for(const _0x272e69 of dependencies){if(!Imported[_0x272e69]){alert(_0x5e15ee(0xa1e)[_0x5e15ee(0x2a0)](_0x35008f,_0x272e69)),SceneManager[_0x5e15ee(0x9e8)]();break;}}const _0x28fc77=_0x3277e1[_0x5e15ee(0x24b)];if(_0x28fc77[_0x5e15ee(0xcd4)](/\[Version[ ](.*?)\]/i)){const _0x301c13=Number(RegExp['$1']);_0x301c13!==VisuMZ[label][_0x5e15ee(0xae5)]&&(alert(_0x5e15ee(0xa01)['format'](_0x35008f,_0x301c13)),SceneManager['exit']());}if(_0x28fc77[_0x5e15ee(0xcd4)](/\[Tier[ ](\d+)\]/i)){const _0x1d9070=Number(RegExp['$1']);_0x1d9070<tier?(alert(_0x5e15ee(0x395)['format'](_0x35008f,_0x1d9070,tier)),SceneManager[_0x5e15ee(0x9e8)]()):tier=Math['max'](_0x1d9070,tier);}VisuMZ[_0x5e15ee(0x9de)](VisuMZ[label][_0x5e15ee(0xc89)],_0x3277e1[_0x5e15ee(0x702)]);})(pluginData),VisuMZ[_0x5e79d1(0x270)]=function(_0x5a906a){const _0x447ef9=_0x5e79d1;let _0x1bb47f=[];for(const _0xd7d9c5 of _0x5a906a){_0x1bb47f=_0x1bb47f[_0x447ef9(0x960)](VisuMZ[_0x447ef9(0x472)](_0xd7d9c5));}return _0x1bb47f['filter'](_0x362de4=>_0x362de4);},VisuMZ['ConvertActionSequenceTarget']=function(_0x103cc0){const _0x40c323=_0x5e79d1,_0x338a03=BattleManager[_0x40c323(0xc4c)]()[_0x40c323(0x984)](_0x13e681=>_0x13e681&&_0x13e681['isAppeared']()),_0x3d5725=BattleManager[_0x40c323(0x5c2)],_0x15220f=BattleManager[_0x40c323(0x6ee)],_0x26c9b8=BattleManager[_0x40c323(0x98a)]?BattleManager['_allTargets'][_0x40c323(0x9b1)](0x0):_0x338a03;_0x103cc0=_0x103cc0[_0x40c323(0xbee)]()[_0x40c323(0xacc)]();if(_0x103cc0===_0x40c323(0x59a))return[_0x3d5725];else{if(_0x103cc0==='current\x20target')return[_0x15220f];else{if(_0x103cc0===_0x40c323(0xcd8)){if(_0x15220f){const _0x3bc6aa=_0x26c9b8['indexOf'](_0x15220f);return _0x3bc6aa>=0x0?[_0x26c9b8[_0x3bc6aa-0x1]||_0x15220f]:[_0x15220f];}}else{if(_0x103cc0===_0x40c323(0xa08)){if(_0x15220f){const _0x1f7b85=_0x26c9b8[_0x40c323(0x985)](_0x15220f);return _0x1f7b85>=0x0?[_0x26c9b8[_0x1f7b85+0x1]||_0x15220f]:[_0x15220f];}}else{if(_0x103cc0==='all\x20targets')return _0x26c9b8;else{if(_0x103cc0===_0x40c323(0x657))return[_0x3d5725]['concat'](_0x26c9b8);else{if(_0x103cc0===_0x40c323(0x882))return _0x338a03[_0x40c323(0x984)](_0x55ce14=>_0x55ce14!==_0x3d5725&&!_0x26c9b8[_0x40c323(0x9fb)](_0x55ce14)&&_0x55ce14[_0x40c323(0x7df)]());else{if(_0x103cc0===_0x40c323(0xa35))return[VisuMZ[_0x40c323(0x2a5)]()];else{if(_0x103cc0['match'](/SPECIAL (.*)>/i)){const _0x272ad7=String(RegExp['$1'])['split'](',')[_0x40c323(0x343)](_0x120700=>_0x120700[_0x40c323(0xacc)]());return[VisuMZ[_0x40c323(0x3e9)](_0x272ad7)];}}}}}}}}}if(_0x3d5725){if(_0x103cc0==='alive\x20friends')return _0x3d5725[_0x40c323(0xa93)]()[_0x40c323(0x43a)]();else{if(_0x103cc0===_0x40c323(0x357))return _0x3d5725['friendsUnit']()[_0x40c323(0x43a)]()['filter'](_0x49b97e=>_0x49b97e!==_0x3d5725);else{if(_0x103cc0===_0x40c323(0xb55))return _0x3d5725[_0x40c323(0xa93)]()['aliveMembers']()[_0x40c323(0x984)](_0x318da5=>_0x318da5!==_0x15220f);else{if(_0x103cc0===_0x40c323(0x9a3))return _0x3d5725['friendsUnit']()[_0x40c323(0x1d8)]();else{if(_0x103cc0[_0x40c323(0xcd4)](/FRIEND INDEX (\d+)/i)){const _0x14d3e4=Number(RegExp['$1']);return[_0x3d5725['friendsUnit']()['members']()[_0x14d3e4]];}}}}}if(_0x103cc0===_0x40c323(0x9f2))return _0x3d5725[_0x40c323(0x412)]()['aliveMembers']();else{if(_0x103cc0==='alive\x20opponents\x20not\x20target')return _0x3d5725[_0x40c323(0x412)]()['aliveMembers']()[_0x40c323(0x984)](_0x1b6863=>_0x1b6863!==_0x15220f);else{if(_0x103cc0==='dead\x20opponents')return _0x3d5725[_0x40c323(0x412)]()[_0x40c323(0x1d8)]();else{if(_0x103cc0['match'](/OPPONENT INDEX (\d+)/i)){const _0x20b720=Number(RegExp['$1']);return[_0x3d5725[_0x40c323(0x412)]()[_0x40c323(0x6fd)]()[_0x20b720]];}}}}}if(_0x103cc0==='alive\x20actors')return $gameParty[_0x40c323(0x43a)]();else{if(_0x103cc0===_0x40c323(0x1cc))return $gameParty[_0x40c323(0x43a)]()[_0x40c323(0x984)](_0x2fe7fc=>_0x2fe7fc!==_0x3d5725);else{if(_0x103cc0===_0x40c323(0xb60))return $gameParty[_0x40c323(0x43a)]()[_0x40c323(0x984)](_0x328efd=>_0x328efd!==_0x15220f);else{if(_0x103cc0===_0x40c323(0x8f4))return $gameParty[_0x40c323(0x1d8)]();else{if(_0x103cc0[_0x40c323(0xcd4)](/ACTOR INDEX (\d+)/i)){const _0x524641=Number(RegExp['$1']);return[$gameParty['members']()[_0x524641]];}else{if(_0x103cc0[_0x40c323(0xcd4)](/ACTOR ID (\d+)/i)){const _0x3bb5ef=Number(RegExp['$1']);return[$gameActors[_0x40c323(0x5a0)](_0x3bb5ef)];}}}}}}if(_0x103cc0===_0x40c323(0x299))return $gameTroop[_0x40c323(0x43a)]();else{if(_0x103cc0===_0x40c323(0x2c5))return $gameTroop[_0x40c323(0x43a)]()['filter'](_0x4a6b12=>_0x4a6b12!==_0x3d5725);else{if(_0x103cc0===_0x40c323(0x8a1))return $gameTroop[_0x40c323(0x43a)]()[_0x40c323(0x984)](_0x1d1ef5=>_0x1d1ef5!==_0x15220f);else{if(_0x103cc0===_0x40c323(0x20e))return $gameTroop[_0x40c323(0x1d8)]();else{if(_0x103cc0[_0x40c323(0xcd4)](/ENEMY INDEX (\d+)/i)){const _0x49d4ad=Number(RegExp['$1']);return[$gameTroop[_0x40c323(0x6fd)]()[_0x49d4ad]];}else{if(_0x103cc0['match'](/ENEMY ID (\d+)/i)){const _0x4db99d=Number(RegExp['$1']);return $gameTroop[_0x40c323(0x43a)]()[_0x40c323(0x984)](_0x52af1a=>_0x52af1a['enemyId']()===_0x4db99d);}}}}}}if(_0x103cc0===_0x40c323(0x206))return _0x338a03[_0x40c323(0x984)](_0x2e18f4=>_0x2e18f4[_0x40c323(0xc5e)]());else{if(_0x103cc0==='alive\x20battlers\x20not\x20user')return _0x338a03[_0x40c323(0x984)](_0x3c700f=>_0x3c700f[_0x40c323(0xc5e)]()&&_0x3c700f!==_0x3d5725);else{if(_0x103cc0==='alive\x20battlers\x20not\x20target')return _0x338a03[_0x40c323(0x984)](_0xa76563=>_0xa76563[_0x40c323(0xc5e)]()&&_0xa76563!==_0x15220f);else{if(_0x103cc0==='dead\x20battlers')return _0x338a03[_0x40c323(0x984)](_0x156773=>_0x156773[_0x40c323(0x5d8)]());}}}return[];},VisuMZ[_0x5e79d1(0x2a5)]=function(){const _0xd247ca=_0x5e79d1;return BattleManager[_0xd247ca(0x6ee)];},VisuMZ[_0x5e79d1(0x3e9)]=function(_0x24797d){return BattleManager['_target'];},PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x790),_0x144a97=>{const _0x36326d=_0x5e79d1;if(!SceneManager[_0x36326d(0x6a6)]())return;VisuMZ[_0x36326d(0x9de)](_0x144a97,_0x144a97);const _0x529130=$gameTemp[_0x36326d(0x4c9)](),_0x2d1f45=BattleManager['_action'],_0x35b8d9=BattleManager['_subject'],_0x3c6d75=BattleManager[_0x36326d(0x98a)]?BattleManager[_0x36326d(0x98a)][_0x36326d(0x9b1)](0x0):[],_0xeffccd=BattleManager[_0x36326d(0x556)];if(!_0x529130||!_0x2d1f45||!_0x35b8d9)return;if(!_0x2d1f45[_0x36326d(0x990)]())return;if(_0x144a97[_0x36326d(0x784)])_0xeffccd[_0x36326d(0x943)](_0x35b8d9,_0x2d1f45[_0x36326d(0x990)]());_0x144a97['ApplyImmortal']&&_0xeffccd[_0x36326d(0x68a)](_0x36326d(0x820),_0x35b8d9,_0x3c6d75,!![]);if(_0x144a97[_0x36326d(0x345)])_0xeffccd[_0x36326d(0x68a)](_0x36326d(0x77e),_0x35b8d9,_0x2d1f45);if(_0x144a97['WaitForMovement'])_0xeffccd[_0x36326d(0x68a)]('waitForMovement');if(_0x144a97[_0x36326d(0x91f)])_0xeffccd[_0x36326d(0x68a)](_0x36326d(0x821),_0x35b8d9,_0x2d1f45);if(_0x144a97[_0x36326d(0xc0e)])_0xeffccd['push'](_0x36326d(0x277));_0x529130[_0x36326d(0xb37)](_0x36326d(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x6ac),_0x264c82=>{const _0x2fb218=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2fb218(0x9de)](_0x264c82,_0x264c82);const _0x172b9f=$gameTemp[_0x2fb218(0x4c9)](),_0x1d2be9=BattleManager[_0x2fb218(0x1fb)],_0x573ae2=BattleManager[_0x2fb218(0x5c2)],_0x52b475=BattleManager['_allTargets']?BattleManager[_0x2fb218(0x98a)][_0x2fb218(0x9b1)](0x0):[],_0x22f55d=BattleManager[_0x2fb218(0x556)],_0x16e12a=_0x264c82[_0x2fb218(0x94b)]??![];if(!_0x172b9f||!_0x1d2be9||!_0x573ae2)return;if(!_0x1d2be9[_0x2fb218(0x990)]())return;let _0x4e63a7=_0x16e12a?_0x22f55d['getDualWieldTimes'](_0x573ae2):0x1;for(let _0x452cd8=0x0;_0x452cd8<_0x4e63a7;_0x452cd8++){_0x16e12a&&_0x573ae2['isActor']()&&_0x22f55d[_0x2fb218(0x68a)](_0x2fb218(0x4dd),_0x573ae2,_0x452cd8);if(_0x264c82[_0x2fb218(0x499)])_0x22f55d['push'](_0x2fb218(0x537),_0x573ae2,_0x1d2be9);if(_0x264c82[_0x2fb218(0x9d2)]>0x0)_0x22f55d[_0x2fb218(0x68a)]('waitCount',_0x264c82['WaitCount']);if(_0x264c82[_0x2fb218(0x811)])_0x22f55d['push']('showAnimation',_0x573ae2,_0x52b475,_0x1d2be9['item']()[_0x2fb218(0x90e)]);if(_0x264c82[_0x2fb218(0xc0e)])_0x22f55d[_0x2fb218(0x68a)](_0x2fb218(0x277));for(const _0x4e8ea6 of _0x52b475){if(!_0x4e8ea6)continue;if(_0x264c82['ActionEffect'])_0x22f55d[_0x2fb218(0x68a)]('actionEffect',_0x573ae2,_0x4e8ea6);}}_0x16e12a&&_0x573ae2['isActor']()&&_0x22f55d['push'](_0x2fb218(0xac2),_0x573ae2);if(_0x264c82[_0x2fb218(0x3e2)])_0x22f55d[_0x2fb218(0x68a)]('applyImmortal',_0x573ae2,_0x52b475,![]);_0x172b9f[_0x2fb218(0xb37)](_0x2fb218(0x625));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xa40),_0x197c34=>{const _0x92f2ac=_0x5e79d1;if(!SceneManager[_0x92f2ac(0x6a6)]())return;VisuMZ[_0x92f2ac(0x9de)](_0x197c34,_0x197c34);const _0x158d4b=$gameTemp[_0x92f2ac(0x4c9)](),_0x301215=BattleManager['_action'],_0x329909=BattleManager[_0x92f2ac(0x5c2)],_0x252a20=BattleManager[_0x92f2ac(0x98a)]?BattleManager[_0x92f2ac(0x98a)][_0x92f2ac(0x9b1)](0x0):[],_0x2d0729=BattleManager[_0x92f2ac(0x556)],_0x6e38c7=_0x197c34[_0x92f2ac(0x94b)]??![];if(!_0x158d4b||!_0x301215||!_0x329909)return;if(!_0x301215[_0x92f2ac(0x990)]())return;let _0x514d51=_0x6e38c7?_0x2d0729['getDualWieldTimes'](_0x329909):0x1;for(let _0x37fdd7=0x0;_0x37fdd7<_0x514d51;_0x37fdd7++){for(const _0x410511 of _0x252a20){if(!_0x410511)continue;_0x6e38c7&&_0x329909[_0x92f2ac(0x2ff)]()&&_0x2d0729[_0x92f2ac(0x68a)](_0x92f2ac(0x4dd),_0x329909,_0x37fdd7);if(_0x197c34[_0x92f2ac(0x499)])_0x2d0729[_0x92f2ac(0x68a)](_0x92f2ac(0x537),_0x329909,_0x301215);if(_0x197c34[_0x92f2ac(0xbc5)]>0x0)_0x2d0729[_0x92f2ac(0x68a)]('waitCount',_0x197c34['WaitCount1']);if(_0x197c34['ActionAnimation'])_0x2d0729[_0x92f2ac(0x68a)](_0x92f2ac(0x4c2),_0x329909,[_0x410511],_0x301215[_0x92f2ac(0x990)]()[_0x92f2ac(0x90e)]);if(_0x197c34['WaitCount2']>0x0)_0x2d0729[_0x92f2ac(0x68a)](_0x92f2ac(0x2f4),_0x197c34[_0x92f2ac(0x338)]);if(_0x197c34['ActionEffect'])_0x2d0729['push'](_0x92f2ac(0x8b2),_0x329909,_0x410511);}}_0x6e38c7&&_0x329909['isActor']()&&_0x2d0729[_0x92f2ac(0x68a)](_0x92f2ac(0xac2),_0x329909);if(_0x197c34[_0x92f2ac(0x3e2)])_0x2d0729[_0x92f2ac(0x68a)]('applyImmortal',_0x329909,_0x252a20,![]);_0x158d4b[_0x92f2ac(0xb37)](_0x92f2ac(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x5b7),_0x373044=>{const _0x2cea08=_0x5e79d1;if(!SceneManager[_0x2cea08(0x6a6)]())return;VisuMZ[_0x2cea08(0x9de)](_0x373044,_0x373044);const _0x2138ac=$gameTemp[_0x2cea08(0x4c9)](),_0x4227cf=BattleManager[_0x2cea08(0x1fb)],_0x56b35c=BattleManager[_0x2cea08(0x5c2)],_0x28c656=BattleManager[_0x2cea08(0x98a)]?BattleManager[_0x2cea08(0x98a)]['slice'](0x0):[],_0x18f710=BattleManager[_0x2cea08(0x556)];if(!_0x2138ac||!_0x4227cf||!_0x56b35c)return;if(!_0x4227cf['item']())return;if(_0x373044[_0x2cea08(0x3e2)])_0x18f710[_0x2cea08(0x68a)](_0x2cea08(0x820),_0x56b35c,_0x28c656,![]);if(_0x373044[_0x2cea08(0x8ae)])_0x18f710['push']('waitForNewLine');if(_0x373044[_0x2cea08(0x955)])_0x18f710[_0x2cea08(0x68a)](_0x2cea08(0x907));if(_0x373044[_0x2cea08(0x2b7)])_0x18f710['push'](_0x2cea08(0x438));if(_0x373044[_0x2cea08(0xc34)])_0x18f710['push'](_0x2cea08(0x554),_0x56b35c);if(_0x373044[_0x2cea08(0x769)])_0x18f710['push'](_0x2cea08(0x815));_0x2138ac[_0x2cea08(0xb37)](_0x2cea08(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x57c),_0x13fd82=>{const _0x1b9203=_0x5e79d1;if(!SceneManager[_0x1b9203(0x6a6)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x1b9203(0x9de)](_0x13fd82,_0x13fd82);const _0x4103c9=$gameTemp['getLastPluginCommandInterpreter'](),_0x436af7=_0x13fd82[_0x1b9203(0x5e8)];if(!_0x4103c9)return;$gameScreen['setBattleAngle'](_0x13fd82['Angle'],_0x13fd82[_0x1b9203(0x8cd)],_0x13fd82[_0x1b9203(0x599)]);if(_0x436af7)_0x4103c9[_0x1b9203(0xb37)](_0x1b9203(0x76b));}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x57f),_0x38ee7c=>{const _0x3b94e1=_0x5e79d1;if(!SceneManager[_0x3b94e1(0x6a6)]())return;if(!Imported[_0x3b94e1(0x857)])return;VisuMZ[_0x3b94e1(0x9de)](_0x38ee7c,_0x38ee7c);const _0x33d271=$gameTemp[_0x3b94e1(0x4c9)](),_0x3b6d0d=_0x38ee7c[_0x3b94e1(0x5e8)];if(!_0x33d271)return;$gameScreen['setBattleAngle'](0x0,_0x38ee7c[_0x3b94e1(0x8cd)],_0x38ee7c['EasingType']);if(_0x3b6d0d)_0x33d271[_0x3b94e1(0xb37)]('battleAngle');}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Angle_WaitForAngle',_0x1e03c9=>{const _0x13f0e2=_0x5e79d1;if(!SceneManager[_0x13f0e2(0x6a6)]())return;if(!Imported[_0x13f0e2(0x857)])return;const _0x558fff=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x558fff)return;_0x558fff[_0x13f0e2(0xb37)](_0x13f0e2(0x76b));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xba4),_0x32c057=>{const _0x5af7d5=_0x5e79d1;if(!SceneManager[_0x5af7d5(0x6a6)]())return;VisuMZ[_0x5af7d5(0x9de)](_0x32c057,_0x32c057);const _0xbc3d69=$gameTemp['getLastPluginCommandInterpreter'](),_0x5d4fea=BattleManager[_0x5af7d5(0x1fb)],_0x45b66f=BattleManager[_0x5af7d5(0x5c2)],_0x1a246c=VisuMZ[_0x5af7d5(0x270)](_0x32c057[_0x5af7d5(0xa47)]),_0x1e5be6=_0x32c057[_0x5af7d5(0xb22)],_0x416a34=BattleManager['_logWindow'];if(!_0xbc3d69||!_0x5d4fea||!_0x45b66f)return;if(!_0x5d4fea[_0x5af7d5(0x990)]())return;let _0xb00c82=_0x5d4fea[_0x5af7d5(0x990)]()[_0x5af7d5(0x90e)];if(_0xb00c82<0x0)_0xb00c82=_0x45b66f[_0x5af7d5(0x4e6)]();$gameTemp['requestAnimation'](_0x1a246c,_0xb00c82,_0x1e5be6),_0x32c057[_0x5af7d5(0xc0e)]&&_0xbc3d69[_0x5af7d5(0xb37)](_0x5af7d5(0x79a));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x652),_0x1215b3=>{const _0x24382c=_0x5e79d1;if(!SceneManager[_0x24382c(0x6a6)]())return;VisuMZ[_0x24382c(0x9de)](_0x1215b3,_0x1215b3);const _0x5a2d51=$gameTemp[_0x24382c(0x4c9)](),_0x3e0832=BattleManager[_0x24382c(0x5c2)],_0x4640cf=VisuMZ[_0x24382c(0x270)](_0x1215b3[_0x24382c(0xa47)]),_0x131a17=_0x1215b3[_0x24382c(0xb22)],_0x175d47=BattleManager[_0x24382c(0x556)];if(!_0x5a2d51||!_0x3e0832)return;const _0xc8d0b7=_0x3e0832[_0x24382c(0x4e6)]();$gameTemp[_0x24382c(0x301)](_0x4640cf,_0xc8d0b7,_0x131a17),_0x1215b3['WaitForAnimation']&&_0x5a2d51[_0x24382c(0xb37)]('battleAnimation');}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x64b),_0x5620b1=>{const _0x483f4=_0x5e79d1;if(!SceneManager[_0x483f4(0x6a6)]())return;VisuMZ[_0x483f4(0x9de)](_0x5620b1,_0x5620b1);const _0x46f8ca=_0x970c01[_0x483f4(0x993)](_0x5620b1[_0x483f4(0xc04)]);if(_0x46f8ca<=0x0)return;const _0x29ecb0=$gameTemp[_0x483f4(0x4c9)](),_0x970c01=BattleManager['_subject'],_0x29183d=VisuMZ[_0x483f4(0x270)](_0x5620b1[_0x483f4(0xa47)]),_0x127d0e=_0x5620b1['Mirror'],_0x561012=BattleManager[_0x483f4(0x556)];if(!_0x29ecb0||!_0x970c01)return;$gameTemp[_0x483f4(0x301)](_0x29183d,_0x46f8ca,_0x127d0e),_0x5620b1[_0x483f4(0xc0e)]&&_0x29ecb0[_0x483f4(0xb37)](_0x483f4(0x79a));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x708),_0x13d871=>{const _0x4cdcbc=_0x5e79d1;if(!SceneManager[_0x4cdcbc(0x6a6)]())return;VisuMZ[_0x4cdcbc(0x9de)](_0x13d871,_0x13d871);const _0x18d954=$gameTemp[_0x4cdcbc(0x4c9)](),_0x51a2fc=VisuMZ[_0x4cdcbc(0x270)](_0x13d871[_0x4cdcbc(0xa47)]),_0x12a3ef=_0x13d871[_0x4cdcbc(0x6f0)];let _0x234b91=0x0;switch(_0x12a3ef[_0x4cdcbc(0xcde)]()[_0x4cdcbc(0xacc)]()){case'!':case _0x4cdcbc(0x2bf):_0x234b91=0x1;break;case'?':case'QUESTION':_0x234b91=0x2;break;case _0x4cdcbc(0x5e4):case _0x4cdcbc(0x978):case _0x4cdcbc(0xc8f):case _0x4cdcbc(0xb81):case'MUSICNOTE':_0x234b91=0x3;break;case _0x4cdcbc(0xb18):case _0x4cdcbc(0x9f6):_0x234b91=0x4;break;case _0x4cdcbc(0x65e):case _0x4cdcbc(0xa6e):_0x234b91=0x5;break;case _0x4cdcbc(0x4f7):_0x234b91=0x6;break;case _0x4cdcbc(0x1fe):case'ANNOYED':case'FRUSTRATION':_0x234b91=0x7;break;case'SILENCE':case _0x4cdcbc(0x7d9):_0x234b91=0x8;break;case _0x4cdcbc(0x256):case _0x4cdcbc(0x95e):case _0x4cdcbc(0xbc0):case'LIGHT-BULB':case _0x4cdcbc(0x8e3):_0x234b91=0x9;break;case'Z':case'ZZ':case _0x4cdcbc(0x47b):case _0x4cdcbc(0xa12):_0x234b91=0xa;break;case _0x4cdcbc(0xbdf):_0x234b91=0xb;break;case _0x4cdcbc(0x96e):_0x234b91=0xc;break;case _0x4cdcbc(0xa5a):_0x234b91=0xd;break;case'USER-DEFINED\x204':_0x234b91=0xe;break;case _0x4cdcbc(0x3c5):_0x234b91=0xf;break;}for(const _0x1a1f98 of _0x51a2fc){if(!_0x1a1f98)continue;$gameTemp[_0x4cdcbc(0x855)](_0x1a1f98,_0x234b91);}_0x13d871[_0x4cdcbc(0x6dd)]&&_0x18d954&&(_0x18d954[_0x4cdcbc(0xb68)](0x1),_0x18d954[_0x4cdcbc(0xb37)](_0x4cdcbc(0x36d)));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x509),_0x2f277b=>{const _0x1d08ce=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1d08ce(0x234)])return;VisuMZ['ConvertParams'](_0x2f277b,_0x2f277b);const _0xb1175f=$gameTemp[_0x1d08ce(0x4c9)](),_0x2ab2d5=VisuMZ[_0x1d08ce(0x270)](_0x2f277b['Targets']),_0x1c789b=_0x2f277b[_0x1d08ce(0x631)];for(const _0x28ae3a of _0x2ab2d5){if(!_0x28ae3a)continue;$gameTemp[_0x1d08ce(0x855)](_0x28ae3a,[_0x1c789b]);}_0x2f277b[_0x1d08ce(0x6dd)]&&_0xb1175f&&(_0xb1175f[_0x1d08ce(0xb68)](0x1),_0xb1175f['setWaitMode'](_0x1d08ce(0x36d)));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x61a),_0x32f062=>{const _0x46a1f8=_0x5e79d1;if(!SceneManager[_0x46a1f8(0x6a6)]())return;if(!Imported[_0x46a1f8(0x234)])return;VisuMZ[_0x46a1f8(0x9de)](_0x32f062,_0x32f062);const _0x31cf8f=$gameTemp[_0x46a1f8(0x4c9)](),_0x552c66=VisuMZ[_0x46a1f8(0x270)](_0x32f062[_0x46a1f8(0xa47)]),_0xc9ae74=Math[_0x46a1f8(0x52b)](Number(_0x32f062[_0x46a1f8(0xa64)]||0x0),Number(_0x32f062[_0x46a1f8(0xcb2)]||0x0)),_0x38a8cd=Math['max'](Number(_0x32f062[_0x46a1f8(0xa64)]||0x0),Number(_0x32f062[_0x46a1f8(0xcb2)]||0x0)),_0xfe1197=[];for(let _0x23a488=_0xc9ae74;_0x23a488<=_0x38a8cd;_0x23a488++){_0xfe1197[_0x46a1f8(0x68a)](_0x23a488);}for(const _0xe57cb0 of _0x552c66){if(!_0xe57cb0)continue;$gameTemp[_0x46a1f8(0x855)](_0xe57cb0,_0xfe1197);}_0x32f062['WaitComplete']&&_0x31cf8f&&(_0x31cf8f[_0x46a1f8(0xb68)](0x1),_0x31cf8f[_0x46a1f8(0xb37)](_0x46a1f8(0x36d)));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xadc),_0x49e264=>{const _0x5a5e84=_0x5e79d1;if(!SceneManager[_0x5a5e84(0x6a6)]())return;if(!Imported[_0x5a5e84(0x234)])return;VisuMZ[_0x5a5e84(0x9de)](_0x49e264,_0x49e264);const _0x52d19e=$gameTemp[_0x5a5e84(0x4c9)](),_0x60fbc6=VisuMZ[_0x5a5e84(0x270)](_0x49e264[_0x5a5e84(0xa47)]),_0x5822c6=_0x49e264[_0x5a5e84(0x385)];for(const _0x52b86b of _0x60fbc6){if(!_0x52b86b)continue;$gameTemp[_0x5a5e84(0x855)](_0x52b86b,_0x5822c6);}_0x49e264['WaitComplete']&&_0x52d19e&&(_0x52d19e[_0x5a5e84(0xb68)](0x1),_0x52d19e[_0x5a5e84(0xb37)](_0x5a5e84(0x36d)));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x84b),_0x90fbda=>{const _0x24fa50=_0x5e79d1;if(!SceneManager[_0x24fa50(0x6a6)]())return;VisuMZ['ConvertParams'](_0x90fbda,_0x90fbda);const _0x1f82ce=$gameTemp[_0x24fa50(0x4c9)](),_0x5490a2=BattleManager['_action'],_0x18bff1=_0x90fbda[_0x24fa50(0xb22)],_0x191231=VisuMZ[_0x24fa50(0x270)](_0x90fbda[_0x24fa50(0xa47)]);if(!_0x1f82ce||!_0x5490a2)return;if(!_0x5490a2[_0x24fa50(0x990)]())return;for(const _0x53d7d5 of _0x191231){if(!_0x53d7d5)continue;_0x53d7d5[_0x24fa50(0x821)](_0x5490a2,_0x18bff1);}if(_0x90fbda[_0x24fa50(0xc0e)])_0x1f82ce['setWaitMode'](_0x24fa50(0x79a));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x880),_0x2297dc=>{const _0x39772a=_0x5e79d1;VisuMZ['ConvertParams'](_0x2297dc,_0x2297dc);const _0x56f53d=$gameTemp[_0x39772a(0x4c9)](),_0x19a3e0=VisuMZ[_0x39772a(0x270)](_0x2297dc['Targets']),_0x4d04b1=_0x2297dc['Filename'];if(!_0x4d04b1)return;for(const _0x80dce7 of _0x19a3e0){if(!_0x80dce7)continue;if(!_0x80dce7[_0x39772a(0x2ff)]())continue;_0x80dce7[_0x39772a(0x28e)](_0x4d04b1);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Animation_ChangeBattlePortrait_JS',_0x4157cd=>{const _0x189324=_0x5e79d1;VisuMZ['ConvertParams'](_0x4157cd,_0x4157cd);const _0x35c88b=_0x4157cd[_0x189324(0xb45)](),_0x7042db=$gameActors[_0x189324(0x5a0)](_0x35c88b)||null;if(!_0x7042db){console[_0x189324(0x346)](_0x189324(0x550));return;}const _0x4f1cc5=_0x4157cd[_0x189324(0x7e1)]();_0x7042db[_0x189324(0x28e)](_0x4f1cc5);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xbb3),_0x5503ca=>{const _0x191922=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5503ca,_0x5503ca);const _0x27c43a=$gameTemp[_0x191922(0x4c9)](),_0xbf6634=BattleManager[_0x191922(0x5c2)],_0x5fb03=VisuMZ[_0x191922(0x270)](_0x5503ca[_0x191922(0xa47)]),_0x16717d=_0x5503ca[_0x191922(0xb22)];if(!_0x27c43a||!_0xbf6634)return;const _0x5a85a1=$dataSkilles[_0xbf6634[_0x191922(0xb65)]()],_0x3a6011=_0x5a85a1[_0x191922(0x90e)];$gameTemp['requestAnimation'](_0x5fb03,_0x3a6011,_0x16717d),_0x5503ca[_0x191922(0xc0e)]&&_0x27c43a[_0x191922(0xb37)]('battleAnimation');}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x23e),_0x3669b6=>{const _0x332a47=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x332a47(0x9de)](_0x3669b6,_0x3669b6);const _0x1aa834=$gameTemp[_0x332a47(0x4c9)](),_0x54dc0b=VisuMZ[_0x332a47(0x270)](_0x3669b6[_0x332a47(0xa47)]),_0x31469b=Number(_0x3669b6[_0x332a47(0x6cf)]||0x1),_0x32e6e4=$dataItems[_0x31469b],_0x2facfc=_0x3669b6['Mirror'];if(!_0x1aa834)return;if(!_0x32e6e4)return;let _0x48f412=_0x32e6e4[_0x332a47(0x90e)];$gameTemp[_0x332a47(0x301)](_0x54dc0b,_0x48f412,_0x2facfc),_0x3669b6[_0x332a47(0xc0e)]&&_0x1aa834[_0x332a47(0xb37)](_0x332a47(0x79a));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Animation_PlayAtCoordinate',_0x4b374b=>{const _0x297368=_0x5e79d1;if(!SceneManager[_0x297368(0xc59)])return;if(!SceneManager['_scene'][_0x297368(0x29c)])return;if(!Imported[_0x297368(0xaac)])return;VisuMZ[_0x297368(0x9de)](_0x4b374b,_0x4b374b);const _0xa73a4a=$gameTemp[_0x297368(0x4c9)](),_0x762fd1=Math[_0x297368(0xa7d)](_0x4b374b[_0x297368(0xa9b)]),_0x17a529=Math[_0x297368(0xa7d)](_0x4b374b[_0x297368(0x449)]);$gameTemp[_0x297368(0x5fd)](_0x762fd1,_0x17a529,_0x4b374b[_0x297368(0x83e)],_0x4b374b[_0x297368(0xb22)],_0x4b374b[_0x297368(0x91c)]),_0x4b374b['WaitComplete']&&_0xa73a4a&&(SceneManager[_0x297368(0xc59)][_0x297368(0x29c)][_0x297368(0x9be)](),_0xa73a4a[_0x297368(0xb37)](_0x297368(0x79a)));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb02),_0x12aeb8=>{const _0x2580ef=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2580ef(0x9de)](_0x12aeb8,_0x12aeb8);const _0x3dad42=$gameTemp[_0x2580ef(0x4c9)](),_0x40e4f7=VisuMZ[_0x2580ef(0x270)](_0x12aeb8['Targets']),_0x175e2e=_0x12aeb8[_0x2580ef(0x83e)],_0x17a013=_0x12aeb8[_0x2580ef(0xb22)];if(!_0x3dad42)return;$gameTemp['requestAnimation'](_0x40e4f7,_0x175e2e,_0x17a013);if(_0x12aeb8[_0x2580ef(0xc0e)])_0x3dad42[_0x2580ef(0xb37)](_0x2580ef(0x79a));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Animation_ShowAnimationJS',_0x96a772=>{const _0x432be9=_0x5e79d1;if(!SceneManager[_0x432be9(0x6a6)]())return;VisuMZ['ConvertParams'](_0x96a772,_0x96a772);const _0x517148=$gameTemp[_0x432be9(0x4c9)](),_0x1b158b=VisuMZ[_0x432be9(0x270)](_0x96a772[_0x432be9(0xa47)]),_0x45b312=Number(_0x96a772[_0x432be9(0x83e)])||0x1,_0x8e809e=_0x96a772[_0x432be9(0xb22)];if(!_0x517148)return;$gameTemp[_0x432be9(0x301)](_0x1b158b,_0x45b312,_0x8e809e);if(_0x96a772[_0x432be9(0xc0e)])_0x517148[_0x432be9(0xb37)](_0x432be9(0x79a));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x21a),_0x4966e4=>{const _0x596d85=_0x5e79d1;if(!SceneManager[_0x596d85(0x6a6)]())return;VisuMZ[_0x596d85(0x9de)](_0x4966e4,_0x4966e4);const _0xec4218=$gameTemp[_0x596d85(0x4c9)](),_0x59959b=VisuMZ[_0x596d85(0x270)](_0x4966e4[_0x596d85(0xa47)]),_0x1184ab=Number(_0x4966e4[_0x596d85(0x6b0)]||0x1),_0x1cb965=$dataSkills[_0x1184ab],_0x177cd4=_0x4966e4['Mirror'];if(!_0xec4218)return;if(!_0x1cb965)return;let _0x2a47cb=_0x1cb965[_0x596d85(0x90e)];$gameTemp[_0x596d85(0x301)](_0x59959b,_0x2a47cb,_0x177cd4),_0x4966e4['WaitForAnimation']&&_0xec4218[_0x596d85(0xb37)](_0x596d85(0x79a));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x40e),_0x40b22d=>{const _0x432153=_0x5e79d1;if(!SceneManager[_0x432153(0x6a6)]())return;const _0x42a843=$gameTemp[_0x432153(0x4c9)]();if(!_0x42a843)return;_0x42a843[_0x432153(0xb37)]('battleAnimation');}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_BattleLog_AddText',_0x527642=>{const _0x134f2a=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x134f2a(0x9de)](_0x527642,_0x527642);const _0x1892fa=BattleManager[_0x134f2a(0x556)],_0x18405e=_0x527642[_0x134f2a(0x720)]&&Imported['VisuMZ_4_CombatLog'];_0x1892fa['addText'](_0x527642[_0x134f2a(0xac5)]),_0x18405e&&Imported['VisuMZ_4_CombatLog']&&$gameSystem[_0x134f2a(0x2a2)](_0x527642[_0x134f2a(0xac5)]||'',_0x527642[_0x134f2a(0x8e0)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_BattleLog_Clear',_0x40fdb3=>{const _0x2c5acb=_0x5e79d1;if(!SceneManager[_0x2c5acb(0x6a6)]())return;const _0x1030f6=BattleManager[_0x2c5acb(0x556)];_0x1030f6['clear']();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x2a9),_0x46a26c=>{const _0x5de6b8=_0x5e79d1;if(!SceneManager[_0x5de6b8(0x6a6)]())return;const _0x893f49=$gameTemp[_0x5de6b8(0x4c9)](),_0x1b81db=BattleManager[_0x5de6b8(0x1fb)],_0x5d8f5d=BattleManager[_0x5de6b8(0x5c2)],_0x1eb05c=BattleManager[_0x5de6b8(0x556)];if(!_0x893f49||!_0x1b81db||!_0x5d8f5d)return;if(!_0x1b81db[_0x5de6b8(0x990)]())return;_0x1eb05c['displayAction'](_0x5d8f5d,_0x1b81db[_0x5de6b8(0x990)]()),_0x893f49['setWaitMode'](_0x5de6b8(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x7b2),_0xb111c2=>{const _0x2770c9=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;const _0x4ad400=BattleManager[_0x2770c9(0x556)];_0x4ad400[_0x2770c9(0x255)]();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x1f9),_0x4a1af8=>{const _0x1995cf=_0x5e79d1;if(!SceneManager[_0x1995cf(0x6a6)]())return;const _0x9a0a9d=BattleManager[_0x1995cf(0x556)];_0x9a0a9d[_0x1995cf(0x24e)]();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_BattleLog_Refresh',_0x478141=>{const _0x3e13b1=_0x5e79d1;if(!SceneManager[_0x3e13b1(0x6a6)]())return;const _0x285e11=BattleManager['_logWindow'];_0x285e11['refresh']();}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0xb43),_0x613cf=>{const _0x993420=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x993420(0x9de)](_0x613cf,_0x613cf),SceneManager[_0x993420(0xc59)][_0x993420(0x364)](_0x613cf[_0x993420(0x3ea)]);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x926),_0x3d5a20=>{const _0x231ad4=_0x5e79d1;if(!SceneManager[_0x231ad4(0x6a6)]())return;const _0xdebd64=$gameTemp[_0x231ad4(0x4c9)]();_0xdebd64[_0x231ad4(0xb37)]('battlelog');}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x566),_0xb67707=>{const _0x245cfe=_0x5e79d1;if(!SceneManager[_0x245cfe(0x6a6)]())return;const _0x5ed6a7=$gameTemp[_0x245cfe(0x4c9)](),_0x228986=BattleManager[_0x245cfe(0x556)];_0x228986[_0x245cfe(0x90c)](),_0x5ed6a7[_0x245cfe(0xb37)](_0x245cfe(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x88e),_0x376a5c=>{const _0x4eb2d1=_0x5e79d1;if(!SceneManager[_0x4eb2d1(0x6a6)]())return;if(!Imported[_0x4eb2d1(0x857)])return;VisuMZ[_0x4eb2d1(0x9de)](_0x376a5c,_0x376a5c);const _0x4d57a1=$gameScreen[_0x4eb2d1(0xb83)]();_0x4d57a1[_0x4eb2d1(0x210)]=_0x376a5c['Setting'];}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x42d),_0x1c8fa5=>{const _0x5e87e7=_0x5e79d1;if(!SceneManager[_0x5e87e7(0x6a6)]())return;if(!Imported[_0x5e87e7(0x857)])return;VisuMZ[_0x5e87e7(0x9de)](_0x1c8fa5,_0x1c8fa5);const _0x4a2855=$gameTemp[_0x5e87e7(0x4c9)](),_0x402f3b=_0x1c8fa5[_0x5e87e7(0x3f0)];$gameScreen[_0x5e87e7(0x6d6)](_0x1c8fa5[_0x5e87e7(0xaec)],_0x1c8fa5[_0x5e87e7(0x8f2)],_0x1c8fa5[_0x5e87e7(0x8cd)],_0x1c8fa5[_0x5e87e7(0x599)]);if(_0x402f3b)_0x4a2855['setWaitMode'](_0x5e87e7(0x28c));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xa15),_0x533f8d=>{const _0x1a847b=_0x5e79d1;if(!SceneManager[_0x1a847b(0x6a6)]())return;if(!Imported[_0x1a847b(0x857)])return;VisuMZ[_0x1a847b(0x9de)](_0x533f8d,_0x533f8d);const _0x2cee20=$gameTemp[_0x1a847b(0x4c9)](),_0x16a89d=VisuMZ['CreateActionSequenceTargets'](_0x533f8d[_0x1a847b(0xa47)]),_0x20dd18=_0x533f8d[_0x1a847b(0x3f0)];$gameScreen[_0x1a847b(0xc85)](_0x16a89d,_0x533f8d['Duration'],_0x533f8d[_0x1a847b(0x599)]);if(_0x20dd18)_0x2cee20[_0x1a847b(0xb37)](_0x1a847b(0x28c));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x781),_0x49089a=>{const _0x22d58b=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x22d58b(0x857)])return;VisuMZ[_0x22d58b(0x9de)](_0x49089a,_0x49089a);const _0x340be8=$gameTemp[_0x22d58b(0x4c9)](),_0x151f3d=_0x49089a[_0x22d58b(0x3f0)];$gameScreen[_0x22d58b(0x828)](_0x49089a['OffsetX'],_0x49089a[_0x22d58b(0x8fb)],_0x49089a[_0x22d58b(0x8cd)],_0x49089a[_0x22d58b(0x599)]);if(_0x151f3d)_0x340be8[_0x22d58b(0xb37)]('battleCamera');}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x9c3),_0x2a0cc4=>{const _0x3c1133=_0x5e79d1;if(!SceneManager[_0x3c1133(0x6a6)]())return;if(!Imported[_0x3c1133(0x857)])return;VisuMZ['ConvertParams'](_0x2a0cc4,_0x2a0cc4);const _0x1ec193=$gameTemp[_0x3c1133(0x4c9)](),_0x468257=_0x2a0cc4[_0x3c1133(0x726)],_0x1f2ac3=_0x2a0cc4[_0x3c1133(0x7de)],_0x4a71c7=_0x2a0cc4['WaitForCamera'];if(_0x468257){const _0x3fffa5=Math['round'](Graphics['width']/0x2),_0x24e0a2=Math[_0x3c1133(0xa7d)](Graphics[_0x3c1133(0x912)]/0x2);$gameScreen['setBattleCameraPoint'](_0x3fffa5,_0x24e0a2,_0x2a0cc4[_0x3c1133(0x8cd)],_0x2a0cc4['EasingType']);}_0x1f2ac3&&$gameScreen[_0x3c1133(0x828)](0x0,0x0,_0x2a0cc4['Duration'],_0x2a0cc4[_0x3c1133(0x599)]);if(_0x4a71c7)_0x1ec193[_0x3c1133(0xb37)](_0x3c1133(0x28c));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x889),_0x54d473=>{const _0x4aed52=_0x5e79d1;if(!SceneManager[_0x4aed52(0x6a6)]())return;if(!Imported[_0x4aed52(0x857)])return;const _0x28f53c=$gameTemp[_0x4aed52(0x4c9)]();if(!_0x28f53c)return;_0x28f53c[_0x4aed52(0xb37)](_0x4aed52(0x28c));}),VisuMZ[_0x5e79d1(0x57e)]['CreateCutinSettings']=function(_0x127e4d){const _0x2750d4=_0x5e79d1;_0x127e4d['portraitFilename']='';const _0x3906fc=VisuMZ[_0x2750d4(0x9ab)][_0x2750d4(0xb97)](_0x127e4d),_0x3e005e=VisuMZ[_0x2750d4(0x270)](_0x127e4d[_0x2750d4(0xa47)])[0x0]||null;return _0x3e005e&&(_0x3906fc[_0x2750d4(0x45e)]=_0x3e005e[_0x2750d4(0x727)](),_0x3906fc[_0x2750d4(0x4ff)]=_0x3e005e[_0x2750d4(0x658)](),_0x3906fc[_0x2750d4(0x59f)]=_0x3e005e['visualCutinPortraitHue'](),_0x3906fc['portraitType']=_0x3e005e['visualCutinPortraitType'](),_0x3e005e[_0x2750d4(0x4cf)]()&&(_0x3e005e['flipVisualCutinHorz']()&&(_0x3906fc[_0x2750d4(0x41c)]=!_0x3906fc[_0x2750d4(0x41c)]),_0x3e005e[_0x2750d4(0x70e)]()&&(_0x3906fc[_0x2750d4(0xb1a)]=!_0x3906fc[_0x2750d4(0xb1a)]),_0x3906fc['portraitType']===_0x2750d4(0x273)&&(_0x3906fc[_0x2750d4(0x41c)]=!_0x3906fc[_0x2750d4(0x41c)]),_0x127e4d[_0x2750d4(0x2f9)][_0x2750d4(0x57b)]&&(_0x3906fc['parallaxScrollX']*=-0x1),_0x127e4d[_0x2750d4(0x2f9)][_0x2750d4(0xb8b)]&&(_0x3906fc[_0x2750d4(0x989)]*=-0x1),_0x3906fc['parallaxHue']+=_0x127e4d[_0x2750d4(0x2f9)][_0x2750d4(0xbc3)]??0x0)),_0x3906fc;},PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Cutin_AddVisualCutinEffect',_0x66b59d=>{const _0x18e28d=_0x5e79d1;if(!SceneManager[_0x18e28d(0x6a6)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x18e28d(0x9de)](_0x66b59d,_0x66b59d);const _0x1802dd=VisuMZ[_0x18e28d(0x57e)][_0x18e28d(0xb97)](_0x66b59d);SceneManager[_0x18e28d(0xc59)][_0x18e28d(0x8b3)](_0x1802dd);const _0x2cea45=$gameTemp['getLastPluginCommandInterpreter']();_0x2cea45&&_0x66b59d[_0x18e28d(0xc58)]&&_0x2cea45[_0x18e28d(0xb37)](_0x18e28d(0x3e6));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x279),_0x1df80c=>{const _0x17daec=_0x5e79d1;if(!SceneManager[_0x17daec(0x6a6)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ[_0x17daec(0x9de)](_0x1df80c,_0x1df80c),SceneManager[_0x17daec(0xc59)][_0x17daec(0x465)]();const _0x184edd=$gameTemp[_0x17daec(0x4c9)]();_0x184edd&&_0x1df80c[_0x17daec(0x7bd)]&&_0x184edd[_0x17daec(0xb37)](_0x17daec(0x53d));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x746),_0x4cbcb8=>{const _0x4585b0=_0x5e79d1;if(!SceneManager[_0x4585b0(0x6a6)]())return;if(!Imported[_0x4585b0(0x2ba)])return;VisuMZ['ConvertParams'](_0x4cbcb8,_0x4cbcb8);const _0x2062ac=_0x4cbcb8[_0x4585b0(0x31c)][_0x4585b0(0xbee)]()['trim']();SceneManager[_0x4585b0(0xc59)][_0x4585b0(0x768)](_0x2062ac);const _0x2bd542=$gameTemp[_0x4585b0(0x4c9)]();_0x2bd542&&_0x4cbcb8[_0x4585b0(0x7bd)]&&_0x2bd542[_0x4585b0(0xb37)](_0x4585b0(0x53d));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x5ba),_0x5471f8=>{const _0x9665f=_0x5e79d1;if(!SceneManager[_0x9665f(0x6a6)]())return;if(!Imported[_0x9665f(0x2ba)])return;const _0x1d536c=$gameTemp['getLastPluginCommandInterpreter']();_0x1d536c['setWaitMode'](_0x9665f(0x3e6));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb69),_0xba7b24=>{const _0x3011fa=_0x5e79d1;if(!SceneManager[_0x3011fa(0x6a6)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x13d116=$gameTemp[_0x3011fa(0x4c9)]();_0x13d116[_0x3011fa(0xb37)](_0x3011fa(0x53d));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x588),_0x19a8a7=>{const _0x19ff70=_0x5e79d1;if(!SceneManager[_0x19ff70(0x6a6)]())return;if(!Imported[_0x19ff70(0x3ff)])return;VisuMZ[_0x19ff70(0x9de)](_0x19a8a7,_0x19a8a7);const _0x3a464e=VisuMZ[_0x19ff70(0x270)](_0x19a8a7[_0x19ff70(0xa47)]),_0x5bf24e=_0x19a8a7['MotionAni'][_0x19ff70(0xbee)]()[_0x19ff70(0xacc)]();for(const _0x55c0a5 of _0x3a464e){if(!_0x55c0a5)continue;_0x55c0a5[_0x19ff70(0x85a)](_0x5bf24e);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xae1),_0x5307ef=>{const _0x23820d=_0x5e79d1;if(!SceneManager[_0x23820d(0x6a6)]())return;if(!Imported[_0x23820d(0x3ff)])return;VisuMZ[_0x23820d(0x9de)](_0x5307ef,_0x5307ef);const _0x35d217=VisuMZ['CreateActionSequenceTargets'](_0x5307ef['Targets']),_0x4dc060=_0x5307ef[_0x23820d(0xcee)];for(const _0x539b0b of _0x35d217){if(!_0x539b0b)continue;_0x539b0b[_0x23820d(0x78e)]()[_0x23820d(0x84f)]=_0x4dc060;}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x401),_0x5a65db=>{const _0x494f39=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x494f39(0xb12)])return;VisuMZ['ConvertParams'](_0x5a65db,_0x5a65db);const _0x15317d=BattleManager[_0x494f39(0x1fb)],_0x3dad7e=_0x5a65db[_0x494f39(0xa39)];if(!_0x15317d)return;_0x15317d[_0x494f39(0x43c)]=_0x3dad7e;}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x55a),_0x3d59e6=>{const _0x19dda4=_0x5e79d1;if(!SceneManager[_0x19dda4(0x6a6)]())return;if(!Imported[_0x19dda4(0xb12)])return;const _0x1c5bd2=BattleManager[_0x19dda4(0x1fb)];if(!_0x1c5bd2)return;_0x1c5bd2[_0x19dda4(0x530)]();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x8aa),_0x59fc64=>{const _0x2e3cd6=_0x5e79d1;if(!SceneManager[_0x2e3cd6(0x6a6)]())return;if(!Imported[_0x2e3cd6(0xb12)])return;VisuMZ[_0x2e3cd6(0x9de)](_0x59fc64,_0x59fc64);const _0x21e62e=BattleManager[_0x2e3cd6(0x1fb)],_0x1654c2=_0x59fc64[_0x2e3cd6(0xa39)];if(!_0x21e62e)return;_0x21e62e[_0x2e3cd6(0xaa8)]=_0x1654c2;}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x33c),_0x470d45=>{const _0x451543=_0x5e79d1;if(!SceneManager[_0x451543(0x6a6)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;const _0x27e944=BattleManager['_action'];if(!_0x27e944)return;_0x27e944['_battleCoreNoElement']=!![];}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x21b),_0x2f8a93=>{const _0x2b128f=_0x5e79d1;VisuMZ['BattleGridSystem'][_0x2b128f(0x21b)](_0x2f8a93);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xa31),_0x2dd1be=>{const _0x1cf94f=_0x5e79d1;VisuMZ[_0x1cf94f(0x29b)]['ActSeq_Grid_AddPassiveStatesToNode'](_0x2dd1be);}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0xbd2),_0x1cf904=>{const _0x5d9720=_0x5e79d1;VisuMZ[_0x5d9720(0x29b)][_0x5d9720(0xbd2)](_0x1cf904);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Grid_AddTriggerToNodeJS',_0x11e3bb=>{const _0x7833d9=_0x5e79d1;VisuMZ[_0x7833d9(0x29b)]['ActSeq_Grid_AddTriggerToNode'](_0x11e3bb);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x73d),_0x430c90=>{const _0x203201=_0x5e79d1;VisuMZ[_0x203201(0x29b)][_0x203201(0x73d)](_0x430c90);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x314),_0x50c22a=>{const _0x18a952=_0x5e79d1;VisuMZ[_0x18a952(0x29b)][_0x18a952(0x314)](_0x50c22a);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x8da),_0xfecf46=>{const _0x2b9364=_0x5e79d1;VisuMZ[_0x2b9364(0x29b)][_0x2b9364(0x8da)](_0xfecf46);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x265),_0x3d27d3=>{const _0x242b56=_0x5e79d1;VisuMZ[_0x242b56(0x29b)][_0x242b56(0x265)](_0x3d27d3);}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x6dc),_0x49f3f5=>{const _0x12d6c1=_0x5e79d1;VisuMZ[_0x12d6c1(0x29b)]['ActSeq_Grid_MoveTargetsInDirection'](_0x49f3f5);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb3d),_0x5103c0=>{const _0x291c39=_0x5e79d1;VisuMZ[_0x291c39(0x29b)][_0x291c39(0xb3d)](_0x5103c0);}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x292),_0x3e3873=>{const _0x3765dc=_0x5e79d1;VisuMZ[_0x3765dc(0x29b)][_0x3765dc(0x292)](_0x3e3873);}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x38d),_0x23c806=>{const _0x5cf326=_0x5e79d1;VisuMZ[_0x5cf326(0x29b)][_0x5cf326(0x38d)](_0x23c806);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xc14),_0x2fdd94=>{const _0xc43ce0=_0x5e79d1;VisuMZ[_0xc43ce0(0x29b)]['ActSeq_Grid_RemoveTriggerFromNode'](_0x2fdd94);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x7b5),_0x2d5460=>{const _0x3e5860=_0x5e79d1;VisuMZ[_0x3e5860(0x29b)]['ActSeq_Grid_TeleportToNode'](_0x2d5460);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Grid_TraverseToNode',_0x17ec1b=>{const _0x169d97=_0x5e79d1;VisuMZ['BattleGridSystem'][_0x169d97(0x3ae)](_0x17ec1b);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Horror_Clear',_0x2740f9=>{const _0x2553f9=_0x5e79d1;if(!Imported[_0x2553f9(0x3f6)])return;if(!SceneManager[_0x2553f9(0x6a6)]())return;VisuMZ[_0x2553f9(0x9de)](_0x2740f9,_0x2740f9);const _0x248e5f=VisuMZ[_0x2553f9(0x270)](_0x2740f9[_0x2553f9(0xa47)]);for(const _0x44facb of _0x248e5f){if(!_0x44facb)continue;_0x44facb[_0x2553f9(0x5c7)]('noise'),_0x44facb[_0x2553f9(0x5c7)](_0x2553f9(0x54c)),_0x44facb['removeHorrorEffect']('tv'),_0x44facb[_0x2553f9(0x639)]();}$gamePlayer[_0x2553f9(0x562)]();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x868),_0x755a2=>{const _0x75a5b6=_0x5e79d1;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x75a5b6(0x6a6)]())return;VisuMZ['ConvertParams'](_0x755a2,_0x755a2);const _0x1edbd6=VisuMZ['CreateActionSequenceTargets'](_0x755a2['Targets']),_0x49974e=_0x75a5b6(0x54c);_0x755a2['sliceMin']=Math[_0x75a5b6(0xb46)](_0x755a2['slices']/0x2),_0x755a2['sliceMax']=_0x755a2[_0x75a5b6(0x8cc)],_0x755a2[_0x75a5b6(0xbf0)]=!![];for(const _0x4220f8 of _0x1edbd6){if(!_0x4220f8)continue;_0x4220f8[_0x75a5b6(0xa00)](_0x49974e,_0x755a2);}$gamePlayer[_0x75a5b6(0x562)]();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb03),_0x3ecfc8=>{const _0x3d97b3=_0x5e79d1;if(!Imported[_0x3d97b3(0x3f6)])return;if(!SceneManager[_0x3d97b3(0x6a6)]())return;VisuMZ['ConvertParams'](_0x3ecfc8,_0x3ecfc8);const _0x581d12=VisuMZ[_0x3d97b3(0x270)](_0x3ecfc8[_0x3d97b3(0xa47)]);for(const _0x2ef400 of _0x581d12){if(!_0x2ef400)continue;_0x2ef400[_0x3d97b3(0x5c7)](_0x3d97b3(0x54c));}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Horror_NoiseCreate',_0x4341b9=>{const _0x12dd35=_0x5e79d1;if(!Imported[_0x12dd35(0x3f6)])return;if(!SceneManager[_0x12dd35(0x6a6)]())return;VisuMZ[_0x12dd35(0x9de)](_0x4341b9,_0x4341b9);const _0x4f4d8b=VisuMZ[_0x12dd35(0x270)](_0x4341b9[_0x12dd35(0xa47)]),_0x1863ee='noise';for(const _0x3d4f3c of _0x4f4d8b){if(!_0x3d4f3c)continue;_0x3d4f3c['setHorrorEffectSettings'](_0x1863ee,_0x4341b9);}$gamePlayer[_0x12dd35(0x562)]();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb40),_0x421d46=>{const _0x1ca016=_0x5e79d1;if(!Imported[_0x1ca016(0x3f6)])return;if(!SceneManager[_0x1ca016(0x6a6)]())return;VisuMZ[_0x1ca016(0x9de)](_0x421d46,_0x421d46);const _0x3f9dac=VisuMZ[_0x1ca016(0x270)](_0x421d46[_0x1ca016(0xa47)]);for(const _0x58c11b of _0x3f9dac){if(!_0x58c11b)continue;_0x58c11b[_0x1ca016(0x5c7)]('noise');}$gamePlayer[_0x1ca016(0x562)]();}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Horror_TVCreate',_0x171808=>{const _0x568ce0=_0x5e79d1;if(!Imported[_0x568ce0(0x3f6)])return;if(!SceneManager[_0x568ce0(0x6a6)]())return;VisuMZ[_0x568ce0(0x9de)](_0x171808,_0x171808);const _0x1d5148=VisuMZ[_0x568ce0(0x270)](_0x171808[_0x568ce0(0xa47)]),_0x1800a2='tv';for(const _0x11fa63 of _0x1d5148){if(!_0x11fa63)continue;_0x11fa63['setHorrorEffectSettings'](_0x1800a2,_0x171808);}$gamePlayer[_0x568ce0(0x562)]();}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0xa37),_0x2ac1bf=>{const _0x56dfe8=_0x5e79d1;if(!Imported[_0x56dfe8(0x3f6)])return;if(!SceneManager[_0x56dfe8(0x6a6)]())return;VisuMZ[_0x56dfe8(0x9de)](_0x2ac1bf,_0x2ac1bf);const _0x138d47=VisuMZ[_0x56dfe8(0x270)](_0x2ac1bf['Targets']);for(const _0x4ffb31 of _0x138d47){if(!_0x4ffb31)continue;_0x4ffb31['removeHorrorEffect']('tv');}$gamePlayer[_0x56dfe8(0x562)]();}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0xad5),_0x32f6a6=>{const _0x4c61d0=_0x5e79d1;if(!Imported[_0x4c61d0(0x800)])return;const _0x414ba3=SceneManager[_0x4c61d0(0xc59)][_0x4c61d0(0x29c)];if(!_0x414ba3)return;if(VisuMZ[_0x4c61d0(0x839)][_0x4c61d0(0xae5)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x4c61d0(0x9e8)]();return;}VisuMZ[_0x4c61d0(0x9de)](_0x32f6a6,_0x32f6a6);const _0x4ab2d5=_0x32f6a6[_0x4c61d0(0xcea)];_0x414ba3['setupBlueRedInvertImpactFilter'](_0x4ab2d5);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x35e),_0x101fe8=>{const _0x3004cf=_0x5e79d1;if(!SceneManager[_0x3004cf(0x6a6)]())return;if(!Imported[_0x3004cf(0x800)])return;const _0x566524=SceneManager[_0x3004cf(0xc59)][_0x3004cf(0x29c)];if(!_0x566524)return;VisuMZ[_0x3004cf(0x9de)](_0x101fe8,_0x101fe8);const _0x4e622d=_0x101fe8[_0x3004cf(0x671)]||0x1,_0x1f8b6d=_0x101fe8[_0x3004cf(0x8cd)]||0x1,_0x54b48f=_0x101fe8[_0x3004cf(0x599)]||_0x3004cf(0xc80);_0x566524[_0x3004cf(0x1c9)](_0x4e622d,_0x1f8b6d,_0x54b48f);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Impact_Desaturate',_0x2266b9=>{const _0x326644=_0x5e79d1;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x36189e=SceneManager[_0x326644(0xc59)]['_spriteset'];if(!_0x36189e)return;if(VisuMZ[_0x326644(0x839)]['version']<=1.04){alert(_0x326644(0xcec)),SceneManager[_0x326644(0x9e8)]();return;}VisuMZ['ConvertParams'](_0x2266b9,_0x2266b9);const _0x1ab65b=_0x2266b9[_0x326644(0xcea)];_0x36189e[_0x326644(0x32b)](_0x1ab65b);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xbe8),_0x19c468=>{const _0x52de6e=_0x5e79d1;if(!SceneManager[_0x52de6e(0x6a6)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2423cd=SceneManager[_0x52de6e(0xc59)][_0x52de6e(0x29c)];if(!_0x2423cd)return;VisuMZ[_0x52de6e(0x9de)](_0x19c468,_0x19c468);const _0x24a6d8=Number(_0x19c468[_0x52de6e(0x35c)])||0x0,_0x56eb61=Number(_0x19c468['Rate']),_0x4bd1a1=_0x19c468[_0x52de6e(0x8cd)]||0x1,_0x4302d2=_0x19c468['EasingType']||_0x52de6e(0xc80);_0x2423cd[_0x52de6e(0x623)](_0x24a6d8,_0x56eb61,_0x4bd1a1,_0x4302d2);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Impact_MotionBlurTarget',_0x1bd0a1=>{const _0x8ca264=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x8ca264(0x800)])return;const _0x389749=SceneManager[_0x8ca264(0xc59)]['_spriteset'];if(!_0x389749)return;VisuMZ[_0x8ca264(0x9de)](_0x1bd0a1,_0x1bd0a1);const _0x599a6a=Number(_0x1bd0a1['Angle'])||0x0,_0x28930c=Number(_0x1bd0a1[_0x8ca264(0x7e2)]),_0x140115=_0x1bd0a1['Duration']||0x1,_0x440446=_0x1bd0a1[_0x8ca264(0x599)]||_0x8ca264(0xc80),_0xbb87bc=VisuMZ[_0x8ca264(0x270)](_0x1bd0a1[_0x8ca264(0xa47)]);for(const _0x137556 of _0xbb87bc){if(!_0x137556)continue;if(!_0x137556[_0x8ca264(0x949)]())continue;_0x137556['battler']()[_0x8ca264(0x623)](_0x599a6a,_0x28930c,_0x140115,_0x440446);}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Impact_MotionTrailCreate',_0x2bf001=>{const _0x1c16c8=_0x5e79d1;if(!SceneManager[_0x1c16c8(0x6a6)]())return;if(!Imported[_0x1c16c8(0x800)])return;VisuMZ[_0x1c16c8(0x9de)](_0x2bf001,_0x2bf001);const _0xc4f5e1={'delay':_0x2bf001[_0x1c16c8(0x640)],'duration':_0x2bf001['duration'],'hue':_0x2bf001[_0x1c16c8(0x220)],'opacityStart':_0x2bf001[_0x1c16c8(0x8d4)],'tone':_0x2bf001[_0x1c16c8(0x37c)],'visible':!![]},_0x269b23=VisuMZ[_0x1c16c8(0x270)](_0x2bf001[_0x1c16c8(0xa47)]);for(const _0x4ee408 of _0x269b23){if(!_0x4ee408)continue;_0x4ee408[_0x1c16c8(0xca7)](_0xc4f5e1);}}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Impact_MotionTrailRemove',_0x2625ab=>{const _0x5ec807=_0x5e79d1;if(!SceneManager[_0x5ec807(0x6a6)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x5ec807(0x9de)](_0x2625ab,_0x2625ab);const _0x5a4a44=VisuMZ[_0x5ec807(0x270)](_0x2625ab[_0x5ec807(0xa47)]);for(const _0x904d55 of _0x5a4a44){if(!_0x904d55)continue;_0x904d55[_0x5ec807(0x878)]();}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x203),_0x462799=>{const _0x5bd6fc=_0x5e79d1;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0xc69e6f=SceneManager[_0x5bd6fc(0xc59)][_0x5bd6fc(0x29c)];if(!_0xc69e6f)return;if(VisuMZ['ActSeqImpact'][_0x5bd6fc(0xae5)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x5bd6fc(0x9e8)]();return;}VisuMZ['ConvertParams'](_0x462799,_0x462799);const _0x872650=_0x462799['Enable'];_0xc69e6f['setupNegativeImpactFilter'](_0x872650);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Impact_Oversaturate',_0x11651e=>{const _0xd73721=_0x5e79d1;if(!Imported[_0xd73721(0x800)])return;const _0xb53007=SceneManager[_0xd73721(0xc59)]['_spriteset'];if(!_0xb53007)return;if(VisuMZ['ActSeqImpact'][_0xd73721(0xae5)]<=1.04){alert(_0xd73721(0xcec)),SceneManager[_0xd73721(0x9e8)]();return;}VisuMZ[_0xd73721(0x9de)](_0x11651e,_0x11651e);const _0x2d68e7=_0x11651e['Enable'];_0xb53007['setupOversaturateImpactFilter'](_0x2d68e7);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x1ee),_0x125f95=>{const _0x59a94a=_0x5e79d1;if(!Imported[_0x59a94a(0x800)])return;const _0x1dc889=SceneManager['_scene'][_0x59a94a(0x29c)];if(!_0x1dc889)return;VisuMZ['ConvertParams'](_0x125f95,_0x125f95);const _0x27e3a3=_0x125f95['X']||0x0,_0x160925=_0x125f95['Y']||0x0,_0x125852=_0x125f95[_0x59a94a(0x62b)]||0x0,_0x492767=_0x125f95[_0x59a94a(0x483)]||0x0,_0x28e113=_0x125f95[_0x59a94a(0x8cd)]||0x1;_0x1dc889[_0x59a94a(0x9dd)](_0x27e3a3,_0x160925,_0x125852,_0x492767,_0x28e113);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb34),_0x4386c8=>{const _0x265e2e=_0x5e79d1;if(!SceneManager[_0x265e2e(0x6a6)]())return;if(!Imported[_0x265e2e(0x800)])return;const _0x4e6359=SceneManager[_0x265e2e(0xc59)][_0x265e2e(0x29c)];if(!_0x4e6359)return;VisuMZ[_0x265e2e(0x9de)](_0x4386c8,_0x4386c8);const _0x578da7=VisuMZ[_0x265e2e(0x270)](_0x4386c8[_0x265e2e(0xa47)]),_0x140fb6=_0x4386c8[_0x265e2e(0x306)],_0x44dd79=_0x4386c8['OffsetX']||0x0,_0x545722=_0x4386c8['OffsetY']||0x0,_0x20054d=_0x4386c8[_0x265e2e(0x62b)]||0x0,_0x5b6455=_0x4386c8[_0x265e2e(0x483)]||0x0,_0x39c1c9=_0x4386c8[_0x265e2e(0x8cd)]||0x1;for(const _0x33f299 of _0x578da7){if(!_0x33f299)continue;if(!_0x33f299[_0x265e2e(0x949)]())continue;const _0x4f76c6=_0x33f299[_0x265e2e(0x949)]();let _0xee8728=_0x4f76c6[_0x265e2e(0x523)],_0x459af6=_0x4f76c6[_0x265e2e(0x415)];_0xee8728+=(Graphics[_0x265e2e(0xa0f)]-Graphics[_0x265e2e(0x486)])/0x2,_0x459af6+=(Graphics[_0x265e2e(0x912)]-Graphics[_0x265e2e(0x6e6)])/0x2;if(_0x140fb6['match'](/front/i))_0xee8728+=(_0x33f299[_0x265e2e(0x4cf)]()?0x1:-0x1)*_0x4f76c6['mainSpriteWidth']()/0x2;else _0x140fb6['match'](/back/i)&&(_0xee8728+=(_0x33f299[_0x265e2e(0x4cf)]()?-0x1:0x1)*_0x4f76c6['mainSpriteWidth']()/0x2);if(_0x140fb6['match'](/head/i))_0x459af6-=_0x4f76c6[_0x265e2e(0x58a)]();else _0x140fb6['match'](/center/i)&&(_0x459af6-=_0x4f76c6[_0x265e2e(0x58a)]()/0x2);_0xee8728+=_0x44dd79,_0x459af6+=_0x545722,_0x4e6359[_0x265e2e(0x9dd)](_0xee8728,_0x459af6,_0x20054d,_0x5b6455,_0x39c1c9);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Impact_ShockwaveCenterTargets',_0x552bf5=>{const _0xfda6cb=_0x5e79d1;if(!SceneManager[_0xfda6cb(0x6a6)]())return;if(!Imported[_0xfda6cb(0x800)])return;const _0x5b96a9=SceneManager[_0xfda6cb(0xc59)][_0xfda6cb(0x29c)];if(!_0x5b96a9)return;VisuMZ[_0xfda6cb(0x9de)](_0x552bf5,_0x552bf5);const _0x187f92=VisuMZ['CreateActionSequenceTargets'](_0x552bf5[_0xfda6cb(0xa47)]),_0x49cf59=_0x552bf5[_0xfda6cb(0x306)],_0x283ae1=_0x552bf5[_0xfda6cb(0x75b)]||0x0,_0x475a2e=_0x552bf5['OffsetY']||0x0,_0x1d5fa2=_0x552bf5['Amp']||0x0,_0x24d166=_0x552bf5['Wave']||0x0,_0x5db468=_0x552bf5[_0xfda6cb(0x8cd)]||0x1,_0x4eee50=Math['min'](..._0x187f92['map'](_0x34f2fb=>_0x34f2fb['battler']()[_0xfda6cb(0x523)]-_0x34f2fb[_0xfda6cb(0x949)]()[_0xfda6cb(0x872)]()/0x2)),_0x2a1889=Math[_0xfda6cb(0x9db)](..._0x187f92[_0xfda6cb(0x343)](_0x295741=>_0x295741[_0xfda6cb(0x949)]()['_baseX']+_0x295741[_0xfda6cb(0x949)]()[_0xfda6cb(0x872)]()/0x2)),_0x55f1b5=Math[_0xfda6cb(0x52b)](..._0x187f92[_0xfda6cb(0x343)](_0x424886=>_0x424886[_0xfda6cb(0x949)]()[_0xfda6cb(0x415)]-_0x424886['battler']()['mainSpriteHeight']())),_0x261c20=Math['max'](..._0x187f92[_0xfda6cb(0x343)](_0x42f8f6=>_0x42f8f6[_0xfda6cb(0x949)]()[_0xfda6cb(0x415)])),_0x79ac3f=_0x187f92['filter'](_0x28ba02=>_0x28ba02[_0xfda6cb(0x2ff)]())[_0xfda6cb(0xc35)],_0x4e1b18=_0x187f92[_0xfda6cb(0x984)](_0x31ef5f=>_0x31ef5f[_0xfda6cb(0x4cf)]())[_0xfda6cb(0xc35)];let _0x46218e=0x0,_0x3e88a4=0x0;if(_0x49cf59[_0xfda6cb(0xcd4)](/front/i))_0x46218e=_0x79ac3f>=_0x4e1b18?_0x4eee50:_0x2a1889;else{if(_0x49cf59[_0xfda6cb(0xcd4)](/middle/i))_0x46218e=(_0x4eee50+_0x2a1889)/0x2,melee=-0x1;else _0x49cf59[_0xfda6cb(0xcd4)](/back/i)&&(_0x46218e=_0x79ac3f>=_0x4e1b18?_0x2a1889:_0x4eee50);}if(_0x49cf59[_0xfda6cb(0xcd4)](/head/i))_0x3e88a4=_0x55f1b5;else{if(_0x49cf59[_0xfda6cb(0xcd4)](/center/i))_0x3e88a4=(_0x55f1b5+_0x261c20)/0x2;else _0x49cf59[_0xfda6cb(0xcd4)](/base/i)&&(_0x3e88a4=_0x261c20);}_0x46218e+=(Graphics[_0xfda6cb(0xa0f)]-Graphics[_0xfda6cb(0x486)])/0x2,_0x3e88a4+=(Graphics['height']-Graphics[_0xfda6cb(0x6e6)])/0x2,_0x46218e+=_0x283ae1,_0x3e88a4+=_0x475a2e,_0x5b96a9[_0xfda6cb(0x9dd)](_0x46218e,_0x3e88a4,_0x1d5fa2,_0x24d166,_0x5db468);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Impact_TimeScale',_0x14632c=>{const _0x5b1e63=_0x5e79d1;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x449779=SceneManager[_0x5b1e63(0xc59)][_0x5b1e63(0x29c)];if(!_0x449779)return;if(VisuMZ[_0x5b1e63(0x839)][_0x5b1e63(0xae5)]<=1.04){alert(_0x5b1e63(0xcec)),SceneManager[_0x5b1e63(0x9e8)]();return;}VisuMZ[_0x5b1e63(0x9de)](_0x14632c,_0x14632c);const _0x4ba96a=$gameTemp[_0x5b1e63(0x4c9)](),_0x36d478=Math['max'](0.01,_0x14632c[_0x5b1e63(0x9e3)]);$gameTemp[_0x5b1e63(0xbf6)](_0x36d478,_0x4ba96a);}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x3aa),_0x503010=>{const _0x3c13f1=_0x5e79d1;if(!Imported[_0x3c13f1(0x800)])return;const _0x1deb06=SceneManager[_0x3c13f1(0xc59)][_0x3c13f1(0x29c)];if(!_0x1deb06)return;if(VisuMZ[_0x3c13f1(0x839)][_0x3c13f1(0xae5)]<=1.04){alert(_0x3c13f1(0xcec)),SceneManager[_0x3c13f1(0x9e8)]();return;}VisuMZ[_0x3c13f1(0x9de)](_0x503010,_0x503010);const _0x335239=$gameTemp['getLastPluginCommandInterpreter'](),_0x1af30e=_0x503010['ms']||0x1;VisuMZ[_0x3c13f1(0x839)][_0x3c13f1(0x35d)](_0x1af30e,_0x335239);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x3be),_0x50e81d=>{const _0x37353a=_0x5e79d1;if(!Imported[_0x37353a(0x800)])return;const _0x3a5d40=SceneManager[_0x37353a(0xc59)][_0x37353a(0x29c)];if(!_0x3a5d40)return;VisuMZ[_0x37353a(0x9de)](_0x50e81d,_0x50e81d);const _0x431a79=_0x50e81d['X']||0x0,_0x1878a6=_0x50e81d['Y']||0x0,_0x56033a=_0x50e81d[_0x37353a(0x528)]||0x0,_0x565969=_0x50e81d['Radius']||0x0,_0x1087e1=_0x50e81d[_0x37353a(0x8cd)]||0x1,_0x3f68be=_0x50e81d['EasingType']||_0x37353a(0xc80);_0x3a5d40[_0x37353a(0x43d)](_0x56033a,_0x431a79,_0x1878a6,_0x565969,_0x1087e1,_0x3f68be);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x697),_0x315268=>{const _0x591bac=_0x5e79d1;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2a7ed6=SceneManager[_0x591bac(0xc59)][_0x591bac(0x29c)];if(!_0x2a7ed6)return;VisuMZ[_0x591bac(0x9de)](_0x315268,_0x315268);const _0x524b9e=VisuMZ[_0x591bac(0x270)](_0x315268[_0x591bac(0xa47)]),_0x49418b=_0x315268[_0x591bac(0x306)],_0x44e306=_0x315268[_0x591bac(0x75b)]||0x0,_0x67125=_0x315268[_0x591bac(0x8fb)]||0x0,_0x1902a1=_0x315268[_0x591bac(0x528)]||0x0,_0x2b01cf=_0x315268[_0x591bac(0x787)]||0x0,_0xb08f1=_0x315268[_0x591bac(0x8cd)]||0x1,_0x50cae7=_0x315268[_0x591bac(0x599)]||_0x591bac(0xc80),_0x2be134=Math[_0x591bac(0x52b)](..._0x524b9e[_0x591bac(0x343)](_0x2a79e5=>_0x2a79e5[_0x591bac(0x949)]()[_0x591bac(0x523)]-_0x2a79e5['battler']()[_0x591bac(0x872)]()/0x2)),_0x5184c1=Math['max'](..._0x524b9e[_0x591bac(0x343)](_0xa37d27=>_0xa37d27[_0x591bac(0x949)]()['_baseX']+_0xa37d27[_0x591bac(0x949)]()[_0x591bac(0x872)]()/0x2)),_0x1ee6d2=Math[_0x591bac(0x52b)](..._0x524b9e[_0x591bac(0x343)](_0x54ed45=>_0x54ed45[_0x591bac(0x949)]()[_0x591bac(0x415)]-_0x54ed45[_0x591bac(0x949)]()['mainSpriteHeight']())),_0x5edcf3=Math[_0x591bac(0x9db)](..._0x524b9e[_0x591bac(0x343)](_0x3da7c=>_0x3da7c[_0x591bac(0x949)]()[_0x591bac(0x415)])),_0x251ca7=_0x524b9e[_0x591bac(0x984)](_0x438645=>_0x438645['isActor']())[_0x591bac(0xc35)],_0x31ebc1=_0x524b9e[_0x591bac(0x984)](_0x5c2074=>_0x5c2074[_0x591bac(0x4cf)]())[_0x591bac(0xc35)];let _0x5476b3=0x0,_0x34ac67=0x0;if(_0x49418b['match'](/front/i))_0x5476b3=_0x251ca7>=_0x31ebc1?_0x2be134:_0x5184c1;else{if(_0x49418b[_0x591bac(0xcd4)](/middle/i))_0x5476b3=(_0x2be134+_0x5184c1)/0x2,melee=-0x1;else _0x49418b[_0x591bac(0xcd4)](/back/i)&&(_0x5476b3=_0x251ca7>=_0x31ebc1?_0x5184c1:_0x2be134);}if(_0x49418b[_0x591bac(0xcd4)](/head/i))_0x34ac67=_0x1ee6d2;else{if(_0x49418b[_0x591bac(0xcd4)](/center/i))_0x34ac67=(_0x1ee6d2+_0x5edcf3)/0x2;else _0x49418b['match'](/base/i)&&(_0x34ac67=_0x5edcf3);}_0x5476b3+=(Graphics[_0x591bac(0xa0f)]-Graphics[_0x591bac(0x486)])/0x2,_0x34ac67+=(Graphics[_0x591bac(0x912)]-Graphics[_0x591bac(0x6e6)])/0x2,_0x5476b3+=_0x44e306,_0x34ac67+=_0x67125,_0x2a7ed6[_0x591bac(0x43d)](_0x1902a1,_0x5476b3,_0x34ac67,_0x2b01cf,_0xb08f1,_0x50cae7);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Inject_AnimationStart',_0x5517fc=>{const _0x32e28b=_0x5e79d1;if(!Imported[_0x32e28b(0x800)])return;const _0x454cbe=SceneManager[_0x32e28b(0xc59)][_0x32e28b(0x29c)];if(!_0x454cbe)return;if(VisuMZ[_0x32e28b(0x839)]['version']<=1.05){alert(_0x32e28b(0xcec)),SceneManager[_0x32e28b(0x9e8)]();return;}VisuMZ[_0x32e28b(0x9de)](_0x5517fc,_0x5517fc);const _0x5dca35=VisuMZ['CreateActionSequenceTargets'](_0x5517fc['Targets']),_0x517d69={'filename':_0x5517fc[_0x32e28b(0x994)],'horzCells':_0x5517fc[_0x32e28b(0x931)]||0x1,'vertCells':_0x5517fc[_0x32e28b(0xa4c)]||0x1,'frameDelay':_0x5517fc[_0x32e28b(0xbf8)]||0x1,'smooth':_0x5517fc[_0x32e28b(0xce3)]||![],'anchorX':_0x5517fc[_0x32e28b(0x327)]||0x0,'anchorY':_0x5517fc[_0x32e28b(0xa9d)]||0x0,'offsetX':_0x5517fc[_0x32e28b(0xa98)]||0x0,'offsetY':_0x5517fc[_0x32e28b(0x675)]||0x0};for(const _0x1f1558 of _0x5dca35){if(!_0x1f1558)continue;if(!_0x1f1558[_0x32e28b(0x949)]())continue;_0x1f1558['battler']()[_0x32e28b(0x825)](_0x517d69);}const _0x50b389=$gameTemp[_0x32e28b(0x4c9)]();_0x50b389&&_0x50b389[_0x32e28b(0xb37)](_0x32e28b(0x39c));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Inject_AnimationEnd',_0x425c1c=>{const _0x411e98=_0x5e79d1;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x54fd3d=SceneManager[_0x411e98(0xc59)][_0x411e98(0x29c)];if(!_0x54fd3d)return;if(VisuMZ[_0x411e98(0x839)][_0x411e98(0xae5)]<=1.05){alert(_0x411e98(0xcec)),SceneManager[_0x411e98(0x9e8)]();return;}VisuMZ[_0x411e98(0x9de)](_0x425c1c,_0x425c1c);const _0x4c03b2=VisuMZ[_0x411e98(0x270)](_0x425c1c[_0x411e98(0xa47)]);for(const _0x3b7ffd of _0x4c03b2){if(!_0x3b7ffd)continue;if(!_0x3b7ffd[_0x411e98(0x949)]())continue;_0x3b7ffd[_0x411e98(0x949)]()['stopInjectAnimation']();}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x80f),_0x123584=>{const _0x2b7c55=_0x5e79d1;if(!Imported[_0x2b7c55(0x800)])return;const _0x48a317=SceneManager[_0x2b7c55(0xc59)]['_spriteset'];if(!_0x48a317)return;if(VisuMZ[_0x2b7c55(0x839)][_0x2b7c55(0xae5)]<=1.05){alert(_0x2b7c55(0xcec)),SceneManager[_0x2b7c55(0x9e8)]();return;}VisuMZ[_0x2b7c55(0x9de)](_0x123584,_0x123584);const _0x3fd2d1=VisuMZ[_0x2b7c55(0x270)](_0x123584[_0x2b7c55(0xa47)]),_0x50f4b1=_0x123584[_0x2b7c55(0x321)];for(const _0x539bc8 of _0x3fd2d1){if(!_0x539bc8)continue;if(!_0x539bc8['battler']())continue;_0x539bc8[_0x2b7c55(0x949)]()[_0x2b7c55(0x833)](_0x50f4b1);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xa46),_0x25ba3a=>{const _0x35e1aa=_0x5e79d1;if(!SceneManager[_0x35e1aa(0x6a6)]())return;const _0x354868=$gameTemp[_0x35e1aa(0x4c9)]();if(!_0x354868)return;_0x354868[_0x35e1aa(0xb37)](_0x35e1aa(0xae4));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Mechanics_ActionEffect',_0xcc2632=>{const _0x539c29=_0x5e79d1;if(!SceneManager[_0x539c29(0x6a6)]())return;VisuMZ[_0x539c29(0x9de)](_0xcc2632,_0xcc2632);const _0x12aa9d=$gameTemp[_0x539c29(0x4c9)](),_0x4d43c3=BattleManager['_action'],_0x1eb12c=BattleManager[_0x539c29(0x5c2)],_0x42699a=BattleManager[_0x539c29(0x556)];if(!_0x12aa9d||!_0x4d43c3||!_0x1eb12c)return;if(!_0x4d43c3[_0x539c29(0x990)]())return;const _0x5aafe1=VisuMZ[_0x539c29(0x270)](_0xcc2632[_0x539c29(0xa47)]);for(const _0x70e0f6 of _0x5aafe1){if(!_0x70e0f6)continue;_0x42699a[_0x539c29(0x68a)](_0x539c29(0x8b2),_0x1eb12c,_0x70e0f6);}_0x12aa9d[_0x539c29(0xb37)](_0x539c29(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x9a6),_0x544f95=>{const _0x4e426a=_0x5e79d1;if(!SceneManager[_0x4e426a(0x6a6)]())return;if(!Imported[_0x4e426a(0xa72)])return;$gameTemp[_0x4e426a(0xc4a)]=!![];}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x348),_0x4b7d4e=>{const _0x3fd562=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3fd562(0x9de)](_0x4b7d4e,_0x4b7d4e);const _0xc35a37=[_0x3fd562(0x79b),_0x3fd562(0x4bc),_0x3fd562(0x927),_0x3fd562(0xb67),'MAT',_0x3fd562(0x6ea),_0x3fd562(0xb31),_0x3fd562(0x31f)],_0x5d1c03=_0x4b7d4e[_0x3fd562(0x214)],_0x4417bf=_0x4b7d4e[_0x3fd562(0x2a3)],_0x43c2f9=_0x4b7d4e[_0x3fd562(0x420)],_0x4dc0fa=VisuMZ[_0x3fd562(0x270)](_0x4b7d4e[_0x3fd562(0xa47)]);for(const _0x3ad83b of _0x4dc0fa){if(!_0x3ad83b)continue;for(const _0x5d46de of _0x5d1c03){const _0x51841e=_0xc35a37[_0x3fd562(0x985)](_0x5d46de[_0x3fd562(0xcde)]()[_0x3fd562(0xacc)]());_0x51841e>=0x0&&_0x51841e<=0x7&&_0x3ad83b[_0x3fd562(0x8dc)](_0x51841e,_0x43c2f9);}for(const _0x287286 of _0x4417bf){const _0x538802=_0xc35a37['indexOf'](_0x287286['toUpperCase']()[_0x3fd562(0xacc)]());_0x538802>=0x0&&_0x538802<=0x7&&_0x3ad83b[_0x3fd562(0x8b8)](_0x538802,_0x43c2f9);}}}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x490),_0x4c5fce=>{const _0x34f606=_0x5e79d1;if(!SceneManager[_0x34f606(0x6a6)]())return;VisuMZ[_0x34f606(0x9de)](_0x4c5fce,_0x4c5fce);const _0x11a7cd=_0x4c5fce[_0x34f606(0x3a7)],_0xa8eb58=VisuMZ['CreateActionSequenceTargets'](_0x4c5fce[_0x34f606(0xa47)]);for(const _0xa97837 of _0xa8eb58){if(!_0xa97837)continue;for(const _0x3b8b02 of _0x11a7cd){_0xa97837['addState'](_0x3b8b02);}}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Mechanics_ArmorPenetration',_0x4b5b59=>{const _0x40686d=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x40686d(0x9de)](_0x4b5b59,_0x4b5b59);const _0x1ce2e8=BattleManager[_0x40686d(0x1fb)],_0x19bb2c={'arPenRate':_0x4b5b59[_0x40686d(0x3db)],'arPenFlat':_0x4b5b59[_0x40686d(0xa80)],'arRedRate':_0x4b5b59[_0x40686d(0x539)],'arRedFlat':_0x4b5b59[_0x40686d(0x870)]};_0x1ce2e8['_armorPenetration']=_0x19bb2c;}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x9a0),_0x1847e3=>{const _0x448f27=_0x5e79d1;if(!SceneManager[_0x448f27(0x6a6)]())return;if(!Imported[_0x448f27(0x3cd)])return;VisuMZ[_0x448f27(0x9de)](_0x1847e3,_0x1847e3);const _0x4c56f5=VisuMZ[_0x448f27(0x270)](_0x1847e3['Targets']),_0x31b846=_0x1847e3[_0x448f27(0x651)]||0x1;for(const _0x2759d6 of _0x4c56f5){if(!_0x2759d6)continue;if(!_0x2759d6[_0x448f27(0x4cf)]())continue;_0x2759d6[_0x448f27(0x437)](_0x31b846);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x5bb),_0x574415=>{const _0x229794=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0x229794(0x519)]())return;VisuMZ[_0x229794(0x9de)](_0x574415,_0x574415);const _0x42af66=VisuMZ[_0x229794(0x270)](_0x574415[_0x229794(0xa47)]),_0x2179ef=_0x574415['ChargeRate'],_0x4348da=_0x574415[_0x229794(0xa97)],_0x379e6b=_0x574415[_0x229794(0xb07)];for(const _0x45684e of _0x42af66){if(!_0x45684e)continue;if(_0x45684e[_0x229794(0xb3c)]())_0x45684e[_0x229794(0x8b0)](_0x2179ef);else{if(_0x45684e[_0x229794(0x3bc)]()){_0x45684e[_0x229794(0x473)](_0x4348da);if(_0x379e6b)_0x45684e[_0x229794(0x888)]();}}}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xc06),_0xa120eb=>{const _0x31d8f5=_0x5e79d1;if(!SceneManager[_0x31d8f5(0x6a6)]())return;if(!Imported[_0x31d8f5(0xb64)])return;VisuMZ[_0x31d8f5(0x9de)](_0xa120eb,_0xa120eb);const _0x21d8f5=VisuMZ[_0x31d8f5(0x270)](_0xa120eb['Targets']),_0x41ca3f=_0xa120eb[_0x31d8f5(0x9f4)];for(const _0x776600 of _0x21d8f5){if(!_0x776600)continue;_0x776600[_0x31d8f5(0x7ee)](_0x41ca3f);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xa6c),_0x453a33=>{const _0x30a249=_0x5e79d1;if(!SceneManager[_0x30a249(0x6a6)]())return;if(!Imported[_0x30a249(0xb64)])return;if(!BattleManager[_0x30a249(0x5c2)])return;VisuMZ['ConvertParams'](_0x453a33,_0x453a33);const _0x4c8b54=_0x453a33[_0x30a249(0x2ed)];$gameVariables[_0x30a249(0x8a3)](_0x4c8b54,BattleManager[_0x30a249(0x5c2)][_0x30a249(0x6c6)]());}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Mechanics_BreakShieldChange',_0x2cef18=>{const _0x9189dc=_0x5e79d1;if(!SceneManager[_0x9189dc(0x6a6)]())return;if(!Imported[_0x9189dc(0x86a)])return;VisuMZ[_0x9189dc(0x9de)](_0x2cef18,_0x2cef18);const _0x200a7a=VisuMZ[_0x9189dc(0x270)](_0x2cef18['Targets']),_0x5bfab6=_0x2cef18[_0x9189dc(0x849)];for(const _0x269fb7 of _0x200a7a){if(!_0x269fb7)continue;if(_0x269fb7['isBreakStunned']())continue;if(!_0x269fb7['isAffectedByBreakShield']())continue;_0x269fb7['alterBreakShield'](_0x5bfab6);}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Mechanics_BreakShieldReset',_0x24a05b=>{const _0x849e3b=_0x5e79d1;if(!SceneManager[_0x849e3b(0x6a6)]())return;if(!Imported[_0x849e3b(0x86a)])return;VisuMZ[_0x849e3b(0x9de)](_0x24a05b,_0x24a05b);const _0x44519c=VisuMZ['CreateActionSequenceTargets'](_0x24a05b['Targets']);for(const _0x372db1 of _0x44519c){if(!_0x372db1)continue;if(_0x372db1[_0x849e3b(0x1d3)]())continue;if(!_0x372db1[_0x849e3b(0x41f)]())continue;_0x372db1[_0x849e3b(0xb1e)]();}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xc7c),_0x4497c3=>{const _0x185b07=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x185b07(0x616)])return;if(!BattleManager['isBTB']())return;VisuMZ[_0x185b07(0x9de)](_0x4497c3,_0x4497c3);const _0x19d948=VisuMZ[_0x185b07(0x270)](_0x4497c3[_0x185b07(0xa47)]),_0x1799f5=_0x4497c3[_0x185b07(0x4fd)];for(const _0x1dbd2b of _0x19d948){if(!_0x1dbd2b)continue;_0x1dbd2b[_0x185b07(0x6f9)](_0x1799f5);}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x32f),_0x48ebda=>{const _0x59b299=_0x5e79d1;if(!SceneManager[_0x59b299(0x6a6)]())return;VisuMZ['ConvertParams'](_0x48ebda,_0x48ebda);const _0x22b416=$gameTemp['getLastPluginCommandInterpreter'](),_0x11efb2=BattleManager['_action'],_0x5d9bdd=BattleManager[_0x59b299(0x5c2)];if(!_0x22b416||!_0x11efb2||!_0x5d9bdd)return;if(!_0x11efb2['item']())return;const _0x2832ee=VisuMZ[_0x59b299(0x270)](_0x48ebda[_0x59b299(0xa47)]);for(const _0x52e12f of _0x2832ee){if(!_0x52e12f)continue;_0x48ebda['ForceDeath']&&(_0x52e12f[_0x59b299(0x45c)](),_0x52e12f['addState'](_0x52e12f[_0x59b299(0x3d9)]())),_0x52e12f[_0x59b299(0xa3c)]()&&_0x52e12f[_0x59b299(0x948)]();}_0x22b416['setWaitMode']('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x66d),_0x2dc95a=>{const _0x51a721=_0x5e79d1;if(!SceneManager[_0x51a721(0x6a6)]())return;if(!Imported[_0x51a721(0xa62)])return;if(!BattleManager[_0x51a721(0x762)]())return;VisuMZ[_0x51a721(0x9de)](_0x2dc95a,_0x2dc95a);const _0x35148b=VisuMZ[_0x51a721(0x270)](_0x2dc95a['Targets']),_0x55b2d9=_0x2dc95a[_0x51a721(0x56e)];for(const _0x1e3ef1 of _0x35148b){if(!_0x1e3ef1)continue;_0x1e3ef1[_0x51a721(0x78a)](_0x55b2d9);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x37d),_0x52db68=>{const _0x14f1dc=_0x5e79d1;if(!SceneManager[_0x14f1dc(0x6a6)]())return;if(!Imported[_0x14f1dc(0xa62)])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x14f1dc(0x9de)](_0x52db68,_0x52db68);const _0x33fab1=VisuMZ[_0x14f1dc(0x270)](_0x52db68['Targets']),_0x3a98d2=_0x52db68['ChargeRate'],_0x498c1a=_0x52db68[_0x14f1dc(0xa97)];for(const _0x2b6759 of _0x33fab1){if(!_0x2b6759)continue;if(_0x2b6759[_0x14f1dc(0x606)]===_0x14f1dc(0x526))_0x2b6759[_0x14f1dc(0x5cb)](_0x3a98d2);else _0x2b6759[_0x14f1dc(0x606)]===_0x14f1dc(0x4df)&&_0x2b6759['changeCtbCastTime'](_0x498c1a);}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x6c5),_0x1643bc=>{const _0x421394=_0x5e79d1;if(!SceneManager[_0x421394(0x6a6)]())return;VisuMZ[_0x421394(0x9de)](_0x1643bc,_0x1643bc);const _0x9e82a4=BattleManager['_action'];if(!_0x9e82a4)return;let _0x269bc9=_0x1643bc['Formula'];_0x9e82a4[_0x421394(0x650)](_0x269bc9);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Mechanics_DamagePopup',_0x972024=>{const _0x6c08e5=_0x5e79d1;if(!SceneManager[_0x6c08e5(0x6a6)]())return;VisuMZ[_0x6c08e5(0x9de)](_0x972024,_0x972024);const _0x50375d=VisuMZ[_0x6c08e5(0x270)](_0x972024[_0x6c08e5(0xa47)]);for(const _0x4e38fa of _0x50375d){if(!_0x4e38fa)continue;if(_0x4e38fa['shouldPopupDamage']())_0x4e38fa['startDamagePopup']();}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xc69),_0x1d5f40=>{const _0x50476f=_0x5e79d1;if(!SceneManager[_0x50476f(0x6a6)]())return;VisuMZ[_0x50476f(0x9de)](_0x1d5f40,_0x1d5f40);const _0x23a4d0=$gameTemp[_0x50476f(0x4c9)](),_0x4e667d=BattleManager['_subject'],_0xaa355c=_0x1d5f40[_0x50476f(0x7c6)];if(!_0x23a4d0)return;if(!_0x4e667d)return;_0x4e667d&&_0x4e667d['isDead']()&&_0xaa355c['toUpperCase']()['trim']()!==_0x50476f(0x859)&&_0x23a4d0[_0x50476f(0x8e4)]([_0xaa355c]);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x813),_0x4804fb=>{const _0x2bab8b=_0x5e79d1;if(!SceneManager[_0x2bab8b(0x6a6)]())return;VisuMZ['ConvertParams'](_0x4804fb,_0x4804fb);const _0x50a35e=$gameTemp[_0x2bab8b(0x4c9)](),_0x5c2bda=BattleManager[_0x2bab8b(0x556)];if(!_0x50a35e)return;const _0x3d6cc8=VisuMZ[_0x2bab8b(0x270)](_0x4804fb[_0x2bab8b(0x94e)]),_0x9bd4a9=VisuMZ['CreateActionSequenceTargets'](_0x4804fb[_0x2bab8b(0xa47)]);for(const _0xbf455c of _0x3d6cc8){for(const _0x5a57a0 of _0x9bd4a9){if(!_0x5a57a0)continue;const _0x49906e=$dataSkills[_0xbf455c['attackSkillId']()];_0x5c2bda[_0x2bab8b(0x68a)](_0x2bab8b(0x8f3),_0xbf455c,_0x5a57a0,_0x49906e);}}_0x50a35e[_0x2bab8b(0xb37)](_0x2bab8b(0x625));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x77b),_0x17f5ae=>{const _0x54b366=_0x5e79d1;if(!SceneManager[_0x54b366(0x6a6)]())return;VisuMZ['ConvertParams'](_0x17f5ae,_0x17f5ae);const _0x14dc7b=$gameTemp[_0x54b366(0x4c9)](),_0xf82250=BattleManager[_0x54b366(0x556)];if(!_0x14dc7b)return;const _0xeef88e=VisuMZ[_0x54b366(0x270)](_0x17f5ae['Users']),_0x14031e=VisuMZ[_0x54b366(0x270)](_0x17f5ae[_0x54b366(0xa47)]);for(const _0x252a6e of _0xeef88e){for(const _0x5c6c5c of _0x14031e){if(!_0x5c6c5c)continue;const _0x537556=$dataSkills[_0x252a6e[_0x54b366(0xb65)]()];_0xf82250[_0x54b366(0x68a)](_0x54b366(0x8f3),_0x252a6e,_0x5c6c5c,_0x537556);}}_0x14dc7b[_0x54b366(0xb37)]('battlelog');}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x99d),_0x3b0693=>{const _0x5c3294=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c3294(0x9de)](_0x3b0693,_0x3b0693);const _0x5ede5b=$gameTemp['getLastPluginCommandInterpreter'](),_0x103a73=BattleManager[_0x5c3294(0x556)],_0x29d686=Number(_0x3b0693[_0x5c3294(0x6cf)]||0x1),_0x4239f3=$dataItems[_0x29d686];if(!_0x5ede5b)return;if(!_0x4239f3)return;const _0x317e3f=VisuMZ[_0x5c3294(0x270)](_0x3b0693[_0x5c3294(0x94e)]),_0x3c576c=VisuMZ[_0x5c3294(0x270)](_0x3b0693['Targets']);for(const _0x701f8 of _0x317e3f){for(const _0x130067 of _0x3c576c){if(!_0x130067)continue;_0x103a73['push']('emulateActionEffect',_0x701f8,_0x130067,_0x4239f3);}}_0x5ede5b['setWaitMode'](_0x5c3294(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb14),_0x233f53=>{const _0x291d17=_0x5e79d1;if(!SceneManager[_0x291d17(0x6a6)]())return;VisuMZ[_0x291d17(0x9de)](_0x233f53,_0x233f53);let _0x4d7c03=Number(_0x233f53[_0x291d17(0x6b0)]||0x0);if(_0x4d7c03<=0x0){const _0x55e277=BattleManager[_0x291d17(0x1fb)];if(_0x55e277&&_0x55e277['isSkill']())_0x4d7c03=_0x55e277[_0x291d17(0x990)]()['id'];else return;}const _0x1f461a=$dataSkills[_0x4d7c03];if(!_0x1f461a)return;const _0x478ff4=VisuMZ[_0x291d17(0x270)](_0x233f53[_0x291d17(0x94e)]);for(const _0x37f161 of _0x478ff4){_0x37f161[_0x291d17(0x56d)](_0x1f461a);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x1eb),_0x1ab362=>{const _0x3b2828=_0x5e79d1;if(!SceneManager[_0x3b2828(0x6a6)]())return;VisuMZ[_0x3b2828(0x9de)](_0x1ab362,_0x1ab362);const _0x527301=$gameTemp[_0x3b2828(0x4c9)](),_0x4bf4bd=BattleManager[_0x3b2828(0x556)],_0x535707=Number(_0x1ab362[_0x3b2828(0x6b0)]||0x1),_0x26ba43=$dataSkills[_0x535707];if(!_0x527301)return;if(!_0x26ba43)return;const _0x13d700=VisuMZ['CreateActionSequenceTargets'](_0x1ab362[_0x3b2828(0x94e)]),_0x5d0f38=VisuMZ['CreateActionSequenceTargets'](_0x1ab362[_0x3b2828(0xa47)]);for(const _0x19e9e3 of _0x13d700){for(const _0x5ca570 of _0x5d0f38){if(!_0x5ca570)continue;_0x4bf4bd['push'](_0x3b2828(0x8f3),_0x19e9e3,_0x5ca570,_0x26ba43);}}_0x527301['setWaitMode'](_0x3b2828(0x625));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Mechanics_EnemyEscape',_0x127682=>{const _0x248828=_0x5e79d1;if(!SceneManager[_0x248828(0x6a6)]())return;VisuMZ['ConvertParams'](_0x127682,_0x127682);const _0x493f19=VisuMZ[_0x248828(0x270)](_0x127682[_0x248828(0xa47)]);for(const _0x2807cd of _0x493f19){if(!_0x2807cd)continue;if(!_0x2807cd[_0x248828(0x4cf)]())continue;_0x2807cd[_0x248828(0x586)]();}}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x3e5),_0xee60ee=>{const _0x2a5083=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x2a5083(0x5fa)]())return;VisuMZ[_0x2a5083(0x9de)](_0xee60ee,_0xee60ee);const _0x26c2d2=_0xee60ee['ActionCount'];BattleManager[_0x2a5083(0x5c2)]&&BattleManager[_0x2a5083(0x5c2)][_0x2a5083(0xa93)]()['gainCurrentActionsETB'](_0x26c2d2);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x2c4),_0x4a2310=>{const _0x2d112f=_0x5e79d1;if(!SceneManager[_0x2d112f(0x6a6)]())return;if(!Imported[_0x2d112f(0x34c)])return;if(!BattleManager['isFTB']())return;VisuMZ[_0x2d112f(0x9de)](_0x4a2310,_0x4a2310);const _0x5a2e2d=_0x4a2310['ActionCount'];BattleManager[_0x2d112f(0x5c2)]&&BattleManager[_0x2d112f(0x5c2)][_0x2d112f(0xa93)]()[_0x2d112f(0xcc8)](_0x5a2e2d);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x2cc),_0x1d0a1a=>{const _0x25903b=_0x5e79d1;if(!SceneManager[_0x25903b(0x6a6)]())return;VisuMZ[_0x25903b(0x9de)](_0x1d0a1a,_0x1d0a1a);const _0x231840=VisuMZ[_0x25903b(0x270)](_0x1d0a1a['Targets']),_0x20ee2b=_0x1d0a1a['HP_Rate'],_0x287bbf=_0x1d0a1a[_0x25903b(0x8e2)],_0x682837=_0x1d0a1a['MP_Rate'],_0x202e8c=_0x1d0a1a[_0x25903b(0x5be)],_0x779d50=_0x1d0a1a['TP_Rate'],_0x10d5c5=_0x1d0a1a[_0x25903b(0x22d)],_0x12bf62=_0x1d0a1a['ShowPopup'];for(const _0x5b3450 of _0x231840){if(!_0x5b3450)continue;const _0x5a1f1f=_0x5b3450[_0x25903b(0xc5e)](),_0x4efe29=Math[_0x25903b(0xa7d)](_0x20ee2b*_0x5b3450['mhp']+_0x287bbf),_0x1ec8c8=Math['round'](_0x682837*_0x5b3450[_0x25903b(0x3d3)]+_0x202e8c),_0x276bae=Math[_0x25903b(0xa7d)](_0x779d50*_0x5b3450['maxTp']()+_0x10d5c5);if(_0x4efe29!==0x0)_0x5b3450[_0x25903b(0x503)](_0x4efe29);if(_0x1ec8c8!==0x0)_0x5b3450[_0x25903b(0x435)](_0x1ec8c8);if(_0x276bae!==0x0)_0x5b3450[_0x25903b(0xc23)](_0x276bae);if(_0x12bf62)_0x5b3450['startDamagePopup']();_0x5a1f1f&&_0x5b3450[_0x25903b(0x5d8)]()&&_0x5b3450['performCollapse']();}}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x9bd),_0x2d371d=>{const _0x5bec05=_0x5e79d1;if(!SceneManager[_0x5bec05(0x6a6)]())return;VisuMZ[_0x5bec05(0x9de)](_0x2d371d,_0x2d371d);const _0x33927e=VisuMZ[_0x5bec05(0x270)](_0x2d371d[_0x5bec05(0xa47)]);for(const _0x20b0c of _0x33927e){if(!_0x20b0c)continue;_0x20b0c[_0x5bec05(0xb8c)](_0x2d371d[_0x5bec05(0xad3)]);}}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x60d),_0x403589=>{const _0x4a46cd=_0x5e79d1;if(!SceneManager[_0x4a46cd(0x6a6)]())return;VisuMZ[_0x4a46cd(0x9de)](_0x403589,_0x403589);const _0x338c56=BattleManager['_action'],_0x5b7f3e={'criticalHitRate':_0x403589[_0x4a46cd(0xb6b)],'criticalHitFlat':_0x403589[_0x4a46cd(0xb3b)],'criticalDmgRate':_0x403589[_0x4a46cd(0xc5a)],'criticalDmgFlat':_0x403589[_0x4a46cd(0xada)],'damageRate':_0x403589['DamageRate'],'damageFlat':_0x403589[_0x4a46cd(0xcc3)],'hitRate':_0x403589[_0x4a46cd(0xc79)],'hitFlat':_0x403589[_0x4a46cd(0xc6b)]};_0x338c56[_0x4a46cd(0x9ad)]=_0x5b7f3e;}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Mechanics_OnceParallel',_0x1dbe4b=>{const _0x30d23e=_0x5e79d1;if(!SceneManager[_0x30d23e(0x6a6)]())return;VisuMZ['ConvertParams'](_0x1dbe4b,_0x1dbe4b);const _0x3813ec=_0x1dbe4b[_0x30d23e(0xb53)];SceneManager[_0x30d23e(0xc59)][_0x30d23e(0x8e8)](_0x3813ec);}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x70f),_0x7eed03=>{const _0x1cc1a3=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1cc1a3(0xc9b)])return;if(!BattleManager[_0x1cc1a3(0x209)]())return;VisuMZ['ConvertParams'](_0x7eed03,_0x7eed03);const _0x4c09d8=VisuMZ[_0x1cc1a3(0x270)](_0x7eed03[_0x1cc1a3(0xa47)]);for(const _0x17dd38 of _0x4c09d8){if(!_0x17dd38)continue;let _0x3e6042=_0x7eed03[_0x1cc1a3(0x75c)],_0x4f6d5f=_0x7eed03[_0x1cc1a3(0x26f)],_0x28f2e1=_0x7eed03[_0x1cc1a3(0x2ae)];BattleManager[_0x1cc1a3(0x243)][_0x1cc1a3(0x9fb)](_0x17dd38)?_0x3e6042+=_0x28f2e1:_0x4f6d5f+=_0x28f2e1,BattleManager[_0x1cc1a3(0x4c4)](_0x17dd38,-_0x3e6042,![]),BattleManager[_0x1cc1a3(0x4c4)](_0x17dd38,-_0x4f6d5f,!![]);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x8e7),_0x22385d=>{const _0x153e43=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x153e43(0xcb4)])return;if(!BattleManager[_0x153e43(0x4b7)]())return;VisuMZ[_0x153e43(0x9de)](_0x22385d,_0x22385d);const _0x1b0c63=BattleManager['_subject'][_0x153e43(0xa93)](),_0x562167=_0x22385d['Override'],_0x7327cc=_0x22385d[_0x153e43(0x3a1)]||'unchanged',_0x586328=_0x22385d[_0x153e43(0x207)]||_0x153e43(0x2d9),_0x39c0aa=_0x22385d['alterCost']||0x0,_0x5b5dd8=_0x22385d['alterPriority']||0x0;(_0x1b0c63[_0x153e43(0x8ee)]()||_0x562167)&&(_0x562167&&(_0x1b0c63[_0x153e43(0x7c7)]=_0x1b0c63[_0x153e43(0x7c7)]||{},_0x1b0c63[_0x153e43(0x7c7)][_0x153e43(0x29e)]=0x0),_0x1b0c63[_0x153e43(0xc05)](_0x7327cc,_0x586328,_0x39c0aa,_0x5b5dd8));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x1f2),_0x259b4d=>{const _0x411f7b=_0x5e79d1;if(!SceneManager[_0x411f7b(0x6a6)]())return;if(!Imported[_0x411f7b(0xcb4)])return;if(!BattleManager[_0x411f7b(0x4b7)]())return;VisuMZ[_0x411f7b(0x9de)](_0x259b4d,_0x259b4d);const _0x1a9b8c=BattleManager[_0x411f7b(0x5c2)]['friendsUnit']();let _0x3b34b1=Math[_0x411f7b(0x9db)](_0x259b4d[_0x411f7b(0x7f7)],0x0),_0x30ba2f=_0x1a9b8c[_0x411f7b(0x9ed)](),_0x338d69=_0x1a9b8c['getHalfActionsPTB']();while(_0x3b34b1--){if(_0x30ba2f<=0x0&&_0x338d69<=0x0)break;else _0x30ba2f>0x0?(_0x30ba2f--,_0x338d69++):_0x338d69--;}_0x1a9b8c[_0x411f7b(0x63a)](_0x30ba2f),_0x1a9b8c[_0x411f7b(0x79d)](_0x338d69);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x9d4),_0x25c3f9=>{const _0x44db59=_0x5e79d1;if(!SceneManager[_0x44db59(0x6a6)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x44db59(0x4b7)]())return;VisuMZ[_0x44db59(0x9de)](_0x25c3f9,_0x25c3f9);const _0x5e0067=BattleManager['_subject'][_0x44db59(0xa93)]();let _0x31920b=_0x25c3f9[_0x44db59(0x818)],_0x38f8a9=_0x25c3f9['HalfActions'];_0x5e0067[_0x44db59(0x367)](_0x31920b),_0x5e0067['gainHalfActionsPTB'](_0x38f8a9);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x7f5),_0x1ba49f=>{const _0x44c426=_0x5e79d1;if(!SceneManager[_0x44c426(0x6a6)]())return;VisuMZ[_0x44c426(0x9de)](_0x1ba49f,_0x1ba49f);const _0x5a2929=[_0x44c426(0x79b),_0x44c426(0x4bc),'ATK','DEF',_0x44c426(0x5ae),'MDF','AGI',_0x44c426(0x31f)],_0x77b995=_0x1ba49f[_0x44c426(0x214)],_0xbbb691=_0x1ba49f[_0x44c426(0x2a3)],_0x263a4d=VisuMZ['CreateActionSequenceTargets'](_0x1ba49f[_0x44c426(0xa47)]);for(const _0x5b1980 of _0x263a4d){if(!_0x5b1980)continue;for(const _0x3ca2a5 of _0x77b995){const _0x33cf5f=_0x5a2929[_0x44c426(0x985)](_0x3ca2a5[_0x44c426(0xcde)]()[_0x44c426(0xacc)]());_0x33cf5f>=0x0&&_0x33cf5f<=0x7&&_0x5b1980['isBuffAffected'](_0x33cf5f)&&_0x5b1980[_0x44c426(0x488)](_0x33cf5f);}for(const _0x5d2feb of _0xbbb691){const _0x22a6f9=_0x5a2929[_0x44c426(0x985)](_0x5d2feb['toUpperCase']()[_0x44c426(0xacc)]());_0x22a6f9>=0x0&&_0x22a6f9<=0x7&&_0x5b1980[_0x44c426(0xbbe)](_0x22a6f9)&&_0x5b1980['removeBuff'](_0x22a6f9);}}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xc0d),_0x3ae373=>{const _0x554713=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x554713(0x9de)](_0x3ae373,_0x3ae373);const _0x449263=_0x3ae373[_0x554713(0x3a7)],_0xafb7df=VisuMZ[_0x554713(0x270)](_0x3ae373[_0x554713(0xa47)]);for(const _0xa21f09 of _0xafb7df){if(!_0xa21f09)continue;for(const _0x38009b of _0x449263){_0xa21f09[_0x554713(0x236)](_0x38009b);}}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x5d0),_0x25a305=>{const _0x492bfd=_0x5e79d1;if(!SceneManager[_0x492bfd(0x6a6)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x492bfd(0x9de)](_0x25a305,_0x25a305);const _0x5d3245=VisuMZ[_0x492bfd(0x270)](_0x25a305[_0x492bfd(0xa47)]),_0x5b135f=Number(_0x25a305[_0x492bfd(0x874)]),_0x2bee44=Number(_0x25a305[_0x492bfd(0x420)]),_0x8de3f0=_0x25a305[_0x492bfd(0x41d)];for(const _0x129221 of _0x5d3245){if(!_0x129221)continue;_0x8de3f0&&!_0x129221[_0x492bfd(0x39f)](_0x5b135f)?(_0x129221[_0x492bfd(0xbe3)](_0x5b135f),_0x129221[_0x492bfd(0xace)](_0x5b135f,_0x2bee44)):_0x129221[_0x492bfd(0x52f)](_0x5b135f,_0x2bee44);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x442),_0x36787f=>{const _0x220934=_0x5e79d1;if(!SceneManager[_0x220934(0x6a6)]())return;if(!Imported[_0x220934(0xa5b)])return;VisuMZ[_0x220934(0x9de)](_0x36787f,_0x36787f);const _0x14bec7=VisuMZ['CreateActionSequenceTargets'](_0x36787f[_0x220934(0xa47)]),_0x89b05c=Number(_0x36787f[_0x220934(0x874)]),_0x36795c=Math[_0x220934(0x9db)](Number(_0x36787f['Turns']),0x0),_0x506d0d=_0x36787f['AutoAddState'];for(const _0x54b3af of _0x14bec7){if(!_0x54b3af)continue;_0x506d0d&&!_0x54b3af[_0x220934(0x39f)](_0x89b05c)&&_0x54b3af[_0x220934(0xbe3)](_0x89b05c),_0x54b3af[_0x220934(0xace)](_0x89b05c,_0x36795c);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x707),_0x185387=>{const _0x3fa1b8=_0x5e79d1;if(!SceneManager[_0x3fa1b8(0x6a6)]())return;if(!Imported[_0x3fa1b8(0x858)])return;if(!BattleManager[_0x3fa1b8(0x7e6)]())return;VisuMZ[_0x3fa1b8(0x9de)](_0x185387,_0x185387);const _0x4bff17=_0x185387[_0x3fa1b8(0x93c)],_0x207ff9=VisuMZ[_0x3fa1b8(0x270)](_0x185387[_0x3fa1b8(0xa47)]),_0x451694=_0x185387[_0x3fa1b8(0x5eb)],_0xcf82cc=_0x185387['Exploiter'],_0x21d731=_0x185387[_0x3fa1b8(0x471)],_0x282aa8=BattleManager['_action'];if(_0x4bff17)for(const _0x37b7e1 of _0x207ff9){if(!_0x37b7e1)continue;if(_0x37b7e1===BattleManager[_0x3fa1b8(0x5c2)])continue;if(_0x451694)_0x37b7e1[_0x3fa1b8(0x8ac)](![]);_0x37b7e1[_0x3fa1b8(0x6d9)](BattleManager[_0x3fa1b8(0x5c2)],_0x282aa8);}if(_0xcf82cc&&BattleManager[_0x3fa1b8(0x5c2)]){if(_0x21d731)BattleManager[_0x3fa1b8(0x5c2)][_0x3fa1b8(0x8ac)](![]);const _0x761d9f=_0x207ff9[0x0];BattleManager['_subject'][_0x3fa1b8(0x5ff)](_0x761d9f,_0x282aa8);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xa87),_0x55b2a5=>{const _0x338de6=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager['isSTB']())return;VisuMZ['ConvertParams'](_0x55b2a5,_0x55b2a5);const _0xcff816=_0x55b2a5['Actions'];BattleManager['_subject']&&BattleManager['_subject'][_0x338de6(0xa63)](_0xcff816);}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x89a),_0x2777b7=>{const _0x3b469a=_0x5e79d1;if(!SceneManager[_0x3b469a(0x6a6)]())return;if(!Imported[_0x3b469a(0x858)])return;if(!BattleManager[_0x3b469a(0x7e6)]())return;VisuMZ[_0x3b469a(0x9de)](_0x2777b7,_0x2777b7);let _0x238fb8=_0x2777b7[_0x3b469a(0x1e1)];if(BattleManager[_0x3b469a(0x5c2)]){BattleManager[_0x3b469a(0x5c2)][_0x3b469a(0xa99)]=BattleManager[_0x3b469a(0x5c2)][_0x3b469a(0xa99)]||[];while(_0x238fb8--){if(BattleManager[_0x3b469a(0x5c2)][_0x3b469a(0xa99)][_0x3b469a(0xc35)]<=0x0)break;BattleManager['_subject'][_0x3b469a(0xa99)][_0x3b469a(0xa91)]();}}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x854),_0x3d0f5e=>{const _0x209629=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x209629(0x396)])return;VisuMZ['ConvertParams'](_0x3d0f5e,_0x3d0f5e);const _0xd903a1=VisuMZ[_0x209629(0x270)](_0x3d0f5e['Targets']),_0x535d8f=_0x3d0f5e['WeaponTypeID'];for(const _0x262783 of _0xd903a1){if(!_0x262783)continue;if(!_0x262783[_0x209629(0x2ff)]())continue;_0x262783[_0x209629(0x244)](_0x535d8f);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb5b),_0x4b8ad5=>{const _0x4e0150=_0x5e79d1;if(!SceneManager[_0x4e0150(0x6a6)]())return;VisuMZ[_0x4e0150(0x9de)](_0x4b8ad5,_0x4b8ad5);const _0x43c9a6=VisuMZ[_0x4e0150(0x270)](_0x4b8ad5[_0x4e0150(0xa47)]),_0x3fc338=_0x4b8ad5['Text'],_0x2f1032={'textColor':ColorManager[_0x4e0150(0x636)](_0x4b8ad5[_0x4e0150(0x242)]),'flashColor':_0x4b8ad5[_0x4e0150(0x29f)],'flashDuration':_0x4b8ad5['FlashDuration']};for(const _0xc79e9f of _0x43c9a6){if(!_0xc79e9f)continue;_0xc79e9f[_0x4e0150(0x453)](_0x3fc338,_0x2f1032);}}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x54d),_0x17ea01=>{const _0x5044e2=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5044e2(0x9de)](_0x17ea01,_0x17ea01);const _0x2fa6e9=VisuMZ['CreateActionSequenceTargets'](_0x17ea01['Targets']);let _0x25cd3d=$gameVariables['value'](_0x17ea01['Variable']);Imported[_0x5044e2(0xaac)]&&_0x17ea01[_0x5044e2(0xcbb)]&&(_0x25cd3d=VisuMZ[_0x5044e2(0x3a5)](_0x25cd3d));const _0x2fe748=String(_0x25cd3d),_0x13d687={'textColor':ColorManager[_0x5044e2(0x636)](_0x17ea01[_0x5044e2(0x242)]),'flashColor':_0x17ea01[_0x5044e2(0x29f)],'flashDuration':_0x17ea01[_0x5044e2(0x3ed)]};for(const _0x539884 of _0x2fa6e9){if(!_0x539884)continue;_0x539884['setupTextPopup'](_0x2fe748,_0x13d687);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x8ea),_0x2f6a03=>{const _0x28b0fb=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;const _0x56c669=$gameTemp[_0x28b0fb(0x4c9)]();if(!_0x56c669)return;_0x56c669[_0x28b0fb(0xb37)](_0x28b0fb(0x383));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x74d),_0x2bfaf1=>{const _0x38ea75=_0x5e79d1;if(!SceneManager[_0x38ea75(0x6a6)]())return;VisuMZ[_0x38ea75(0x9de)](_0x2bfaf1,_0x2bfaf1);const _0x4e5543=VisuMZ[_0x38ea75(0x270)](_0x2bfaf1[_0x38ea75(0xa47)]);for(const _0x7095ec of _0x4e5543){if(!_0x7095ec)continue;_0x7095ec[_0x38ea75(0x7c4)]();}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Motion_FreezeMotionFrame',_0x218af9=>{const _0x4d2fe4=_0x5e79d1;if(!SceneManager[_0x4d2fe4(0x6a6)]())return;VisuMZ[_0x4d2fe4(0x9de)](_0x218af9,_0x218af9);const _0x4a374e=VisuMZ['CreateActionSequenceTargets'](_0x218af9[_0x4d2fe4(0xa47)]),_0x30aabe=_0x218af9[_0x4d2fe4(0x6ec)][_0x4d2fe4(0xbee)]()[_0x4d2fe4(0xacc)]();let _0x200b68=_0x218af9['ShowWeapon'];const _0x1c29d4=_0x218af9[_0x4d2fe4(0xcaa)];![_0x4d2fe4(0x5e0),_0x4d2fe4(0xa51),_0x4d2fe4(0x80e),_0x4d2fe4(0x5e9)][_0x4d2fe4(0x9fb)](_0x30aabe)&&(_0x200b68=![]);for(const _0x36d3ab of _0x4a374e){if(!_0x36d3ab)continue;_0x36d3ab[_0x4d2fe4(0x8f8)](_0x30aabe,_0x200b68,_0x1c29d4);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x271),_0x495671=>{const _0x4fe696=_0x5e79d1;if(!SceneManager[_0x4fe696(0x6a6)]())return;VisuMZ[_0x4fe696(0x9de)](_0x495671,_0x495671);const _0x4ec81d=VisuMZ[_0x4fe696(0x270)](_0x495671[_0x4fe696(0xa47)]),_0x390cfa=_0x495671[_0x4fe696(0x6ec)][_0x4fe696(0xbee)]()[_0x4fe696(0xacc)](),_0x245a54=_0x495671[_0x4fe696(0xa5e)];for(const _0x3abcbb of _0x4ec81d){if(!_0x3abcbb)continue;_0x3abcbb[_0x4fe696(0x531)]=_0x245a54;if(_0x390cfa[_0x4fe696(0xcd4)](/ATTACK[ ](\d+)/i))_0x3abcbb[_0x4fe696(0x501)](Number(RegExp['$1']));else _0x390cfa===_0x4fe696(0x5e0)?_0x3abcbb[_0x4fe696(0x3f5)]():_0x3abcbb['requestMotion'](_0x390cfa);if(!_0x245a54)_0x3abcbb[_0x4fe696(0x5a9)](0x0);else{if(_0x245a54&&[_0x4fe696(0xa51),_0x4fe696(0x80e),_0x4fe696(0x795)]['includes'](_0x390cfa)){}}_0x3abcbb[_0x4fe696(0x531)]=undefined;}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x36b),_0x43ff20=>{const _0xbd8ee8=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xbd8ee8(0x9de)](_0x43ff20,_0x43ff20);const _0x223ef2=BattleManager[_0xbd8ee8(0x1fb)];if(!_0x223ef2)return;if(!_0x223ef2[_0xbd8ee8(0x990)]())return;const _0x533e7a=VisuMZ[_0xbd8ee8(0x270)](_0x43ff20[_0xbd8ee8(0xa47)]);for(const _0x369717 of _0x533e7a){if(!_0x369717)continue;_0x369717[_0xbd8ee8(0x537)](_0x223ef2);}}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x5b1),_0xb93119=>{const _0x29554c=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xb93119,_0xb93119);const _0x2c5e24=VisuMZ['CreateActionSequenceTargets'](_0xb93119['Targets']);for(const _0x2df3c9 of _0x2c5e24){if(!_0x2df3c9)continue;if(!_0x2df3c9[_0x29554c(0x949)]())continue;_0x2df3c9[_0x29554c(0x949)]()['refreshMotion']();}}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x2fb),_0x1ce507=>{const _0x2a54bb=_0x5e79d1;if(!SceneManager[_0x2a54bb(0x6a6)]())return;VisuMZ[_0x2a54bb(0x9de)](_0x1ce507,_0x1ce507);const _0x2e2aa8=$gameTemp[_0x2a54bb(0x4c9)](),_0x4cadf5=_0x1ce507['MotionFrameWait']*Sprite_Battler[_0x2a54bb(0x8d7)];_0x2e2aa8['wait'](_0x4cadf5);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x852),_0x357de7=>{const _0x8eeeb7=_0x5e79d1;if(!SceneManager[_0x8eeeb7(0x6a6)]())return;VisuMZ[_0x8eeeb7(0x9de)](_0x357de7,_0x357de7);const _0x165c40=$gameTemp[_0x8eeeb7(0x4c9)](),_0x5e44c0=BattleManager[_0x8eeeb7(0x1fb)];if(!_0x165c40||!_0x5e44c0)return;if(!_0x5e44c0[_0x8eeeb7(0x990)]())return;const _0x44b5ff=VisuMZ[_0x8eeeb7(0x270)](_0x357de7[_0x8eeeb7(0xa47)]);for(const _0x1ff303 of _0x44b5ff){if(!_0x1ff303)continue;_0x1ff303['performActionStart'](_0x5e44c0);}if(_0x357de7[_0x8eeeb7(0x769)])_0x165c40[_0x8eeeb7(0xb37)](_0x8eeeb7(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x9b4),_0x1c4bb8=>{const _0x3ec6e4=_0x5e79d1;if(!SceneManager[_0x3ec6e4(0x6a6)]())return;if(!$gameSystem[_0x3ec6e4(0x9a5)]())return;VisuMZ[_0x3ec6e4(0x9de)](_0x1c4bb8,_0x1c4bb8);const _0x319fe8=$gameTemp['getLastPluginCommandInterpreter'](),_0x1e80de=VisuMZ['CreateActionSequenceTargets'](_0x1c4bb8[_0x3ec6e4(0xa47)]),_0x569e30=_0x1c4bb8[_0x3ec6e4(0x9af)],_0x15e5c7=_0x1c4bb8[_0x3ec6e4(0x4fe)],_0x23d4db=_0x1c4bb8[_0x3ec6e4(0xab8)],_0x412f6f=_0x1c4bb8[_0x3ec6e4(0x8cd)],_0x2c8e01=_0x1c4bb8[_0x3ec6e4(0xc6e)],_0x14d932=_0x1c4bb8[_0x3ec6e4(0x599)],_0x2008f2=_0x1c4bb8[_0x3ec6e4(0x6ec)],_0x15bdff=_0x1c4bb8[_0x3ec6e4(0x769)];if(!_0x319fe8)return;for(const _0x2ba5f6 of _0x1e80de){if(!_0x2ba5f6)continue;let _0x1ac4b8=_0x15e5c7,_0x2286cb=_0x23d4db;if(_0x569e30['match'](/horz/i))_0x1ac4b8*=_0x2ba5f6[_0x3ec6e4(0x2ff)]()?-0x1:0x1;if(_0x569e30[_0x3ec6e4(0xcd4)](/vert/i))_0x2286cb*=_0x2ba5f6['isActor']()?-0x1:0x1;_0x2ba5f6[_0x3ec6e4(0x655)](_0x1ac4b8,_0x2286cb,_0x412f6f,_0x2c8e01,_0x14d932),_0x2ba5f6[_0x3ec6e4(0x792)](_0x2008f2);}if(_0x15bdff)_0x319fe8[_0x3ec6e4(0xb37)](_0x3ec6e4(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Movement_HomeMoveToJsPoint',_0x1a677e=>{const _0x540ecb=_0x5e79d1;if(!SceneManager[_0x540ecb(0x6a6)]())return;if(!$gameSystem[_0x540ecb(0x9a5)]())return;VisuMZ[_0x540ecb(0x9de)](_0x1a677e,_0x1a677e);const _0x53db7b=$gameTemp[_0x540ecb(0x4c9)](),_0x4f0153=VisuMZ[_0x540ecb(0x270)](_0x1a677e[_0x540ecb(0xa47)]),_0x5f2a55=_0x1a677e[_0x540ecb(0x885)],_0x3d1c26=_0x1a677e['OffsetX'],_0x4f031d=_0x1a677e[_0x540ecb(0x8fb)],_0x5dd6a8=_0x1a677e['Duration'],_0x404b8a=_0x1a677e['FaceDirection'],_0x445307=_0x1a677e['EasingType'],_0x437f1a=_0x1a677e[_0x540ecb(0x6ec)],_0x33e38f=_0x1a677e['WaitForMovement'];if(!_0x53db7b)return;for(const _0x2a824b of _0x4f0153){if(!_0x2a824b)continue;const _0x364788=_0x1a677e['DestinationJS'](_0x2a824b)||{'x':0x0,'y':0x0};let _0x44f7a0=_0x364788['x'],_0x55a56a=_0x364788['y'];if(_0x5f2a55['match'](/none/i))_0x44f7a0+=_0x3d1c26,_0x55a56a+=_0x4f031d;else{if(_0x5f2a55[_0x540ecb(0xcd4)](/horz/i)&&_0x5f2a55[_0x540ecb(0xcd4)](/vert/i))_0x44f7a0+=_0x2a824b['isActor']()?-_0x3d1c26:_0x3d1c26,_0x55a56a+=_0x2a824b[_0x540ecb(0x2ff)]()?-_0x4f031d:_0x4f031d;else{if(_0x5f2a55[_0x540ecb(0xcd4)](/horz/i))_0x44f7a0+=_0x2a824b[_0x540ecb(0x2ff)]()?-_0x3d1c26:_0x3d1c26,_0x55a56a+=_0x4f031d;else _0x5f2a55['match'](/vert/i)&&(_0x44f7a0+=_0x3d1c26,_0x55a56a+=_0x2a824b[_0x540ecb(0x2ff)]()?-_0x4f031d:_0x4f031d);}}_0x2a824b[_0x540ecb(0x97e)](_0x44f7a0,_0x55a56a,_0x5dd6a8,_0x404b8a,_0x445307,-0x1),_0x2a824b['requestMotion'](_0x437f1a);}if(_0x33e38f)_0x53db7b['setWaitMode'](_0x540ecb(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb7f),_0x1f7259=>{const _0x37a79a=_0x5e79d1;if(!SceneManager[_0x37a79a(0x6a6)]())return;if(!$gameSystem[_0x37a79a(0x9a5)]())return;VisuMZ[_0x37a79a(0x9de)](_0x1f7259,_0x1f7259);const _0x11a276=$gameTemp['getLastPluginCommandInterpreter'](),_0x18cfcf=VisuMZ['CreateActionSequenceTargets'](_0x1f7259[_0x37a79a(0xa47)]),_0x3b64b7=_0x1f7259[_0x37a79a(0xa17)],_0x18e19c=_0x1f7259[_0x37a79a(0x885)],_0x34cb26=_0x1f7259[_0x37a79a(0x75b)],_0x54fba5=_0x1f7259[_0x37a79a(0x8fb)],_0x3e5971=_0x1f7259[_0x37a79a(0x8cd)],_0x1f071b=_0x1f7259[_0x37a79a(0xc6e)],_0x308af7=_0x1f7259['EasingType'],_0x390015=_0x1f7259[_0x37a79a(0x6ec)],_0x3c505b=_0x1f7259[_0x37a79a(0x769)];if(!_0x11a276)return;for(const _0x2d4793 of _0x18cfcf){if(!_0x2d4793)continue;let _0x3d4f85=_0x2d4793[_0x37a79a(0x949)]()['_baseX'],_0x57230b=_0x2d4793[_0x37a79a(0x949)]()[_0x37a79a(0x415)];if(_0x3b64b7[_0x37a79a(0xcd4)](/home/i))_0x3d4f85=_0x2d4793['battler']()[_0x37a79a(0x76c)],_0x57230b=_0x2d4793[_0x37a79a(0x949)]()[_0x37a79a(0x39e)];else{if(_0x3b64b7[_0x37a79a(0xcd4)](/center/i))_0x3d4f85=Graphics[_0x37a79a(0x486)]/0x2,_0x57230b=Graphics[_0x37a79a(0x6e6)]/0x2;else _0x3b64b7[_0x37a79a(0xcd4)](/point (\d+), (\d+)/i)&&(_0x3d4f85=Number(RegExp['$1']),_0x57230b=Number(RegExp['$2']));}if(_0x18e19c['match'](/none/i))_0x3d4f85+=_0x34cb26,_0x57230b+=_0x54fba5;else{if(_0x18e19c['match'](/horz/i)&&_0x18e19c['match'](/vert/i))_0x3d4f85+=_0x2d4793[_0x37a79a(0x2ff)]()?-_0x34cb26:_0x34cb26,_0x57230b+=_0x2d4793['isActor']()?-_0x54fba5:_0x54fba5;else{if(_0x18e19c[_0x37a79a(0xcd4)](/horz/i))_0x3d4f85+=_0x2d4793[_0x37a79a(0x2ff)]()?-_0x34cb26:_0x34cb26,_0x57230b+=_0x54fba5;else _0x18e19c[_0x37a79a(0xcd4)](/vert/i)&&(_0x3d4f85+=_0x34cb26,_0x57230b+=_0x2d4793['isActor']()?-_0x54fba5:_0x54fba5);}}_0x2d4793[_0x37a79a(0x97e)](_0x3d4f85,_0x57230b,_0x3e5971,_0x1f071b,_0x308af7,-0x1),_0x2d4793[_0x37a79a(0x792)](_0x390015);}if(_0x3c505b)_0x11a276[_0x37a79a(0xb37)](_0x37a79a(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xaf2),_0x1bd6f8=>{const _0x330845=_0x5e79d1;if(!SceneManager[_0x330845(0x6a6)]())return;if(!$gameSystem[_0x330845(0x9a5)]())return;VisuMZ[_0x330845(0x9de)](_0x1bd6f8,_0x1bd6f8);const _0x1eaeef=$gameTemp[_0x330845(0x4c9)](),_0x4987ae=VisuMZ[_0x330845(0x270)](_0x1bd6f8[_0x330845(0x8c0)]),_0x356a44=VisuMZ['CreateActionSequenceTargets'](_0x1bd6f8[_0x330845(0x565)]),_0x4334d7=_0x1bd6f8[_0x330845(0x306)];let _0x54ab09=_0x1bd6f8['MeleeDistance'];const _0x2c93f9=_0x1bd6f8[_0x330845(0x885)],_0x1f75c2=_0x1bd6f8[_0x330845(0x75b)],_0x2f13c1=_0x1bd6f8[_0x330845(0x8fb)],_0x20e7ad=_0x1bd6f8[_0x330845(0x8cd)],_0x30074c=_0x1bd6f8['FaceDirection'],_0x445417=_0x1bd6f8[_0x330845(0x599)],_0x16ca39=_0x1bd6f8[_0x330845(0x6ec)],_0x21881f=_0x1bd6f8[_0x330845(0x769)],_0x44f57d=Math[_0x330845(0x52b)](..._0x356a44[_0x330845(0x343)](_0x49bccd=>_0x49bccd[_0x330845(0x949)]()['_baseX']-_0x49bccd[_0x330845(0x949)]()[_0x330845(0x872)]()/0x2)),_0x21a992=Math[_0x330845(0x9db)](..._0x356a44[_0x330845(0x343)](_0x1bb8b4=>_0x1bb8b4['battler']()[_0x330845(0x523)]+_0x1bb8b4['battler']()['mainSpriteWidth']()/0x2)),_0x5bcb2d=Math[_0x330845(0x52b)](..._0x356a44[_0x330845(0x343)](_0x4ed6ca=>_0x4ed6ca['battler']()[_0x330845(0x415)]-_0x4ed6ca['battler']()[_0x330845(0x58a)]())),_0x5d2c8=Math[_0x330845(0x9db)](..._0x356a44[_0x330845(0x343)](_0x6a5750=>_0x6a5750[_0x330845(0x949)]()[_0x330845(0x415)])),_0x311681=_0x356a44[_0x330845(0x984)](_0x14f225=>_0x14f225[_0x330845(0x2ff)]())[_0x330845(0xc35)],_0x26f592=_0x356a44[_0x330845(0x984)](_0x49c156=>_0x49c156[_0x330845(0x4cf)]())[_0x330845(0xc35)];let _0x3e827a=0x0,_0x171482=0x0;if(_0x4334d7['match'](/front/i))_0x3e827a=_0x311681>=_0x26f592?_0x44f57d:_0x21a992;else{if(_0x4334d7[_0x330845(0xcd4)](/middle/i))_0x3e827a=(_0x44f57d+_0x21a992)/0x2,_0x54ab09=-0x1;else _0x4334d7[_0x330845(0xcd4)](/back/i)&&(_0x3e827a=_0x311681>=_0x26f592?_0x21a992:_0x44f57d);}if(_0x4334d7[_0x330845(0xcd4)](/head/i))_0x171482=_0x5bcb2d;else{if(_0x4334d7['match'](/center/i))_0x171482=(_0x5bcb2d+_0x5d2c8)/0x2;else _0x4334d7['match'](/base/i)&&(_0x171482=_0x5d2c8);}if(!_0x1eaeef)return;for(const _0x27d708 of _0x4987ae){if(!_0x27d708)continue;let _0x120ff9=_0x3e827a,_0x131c44=_0x171482;if(_0x2c93f9[_0x330845(0xcd4)](/none/i))_0x120ff9+=_0x1f75c2,_0x131c44+=_0x2f13c1;else{if(_0x2c93f9[_0x330845(0xcd4)](/horz/i)&&_0x2c93f9[_0x330845(0xcd4)](/vert/i))_0x120ff9+=_0x27d708[_0x330845(0x2ff)]()?-_0x1f75c2:_0x1f75c2,_0x131c44+=_0x27d708[_0x330845(0x2ff)]()?-_0x2f13c1:_0x2f13c1;else{if(_0x2c93f9[_0x330845(0xcd4)](/horz/i))_0x120ff9+=_0x27d708[_0x330845(0x2ff)]()?-_0x1f75c2:_0x1f75c2,_0x131c44+=_0x2f13c1;else _0x2c93f9[_0x330845(0xcd4)](/vert/i)&&(_0x120ff9+=_0x1f75c2,_0x131c44+=_0x27d708['isActor']()?-_0x2f13c1:_0x2f13c1);}}_0x27d708[_0x330845(0x97e)](_0x120ff9,_0x131c44,_0x20e7ad,_0x30074c,_0x445417,_0x54ab09),_0x27d708[_0x330845(0x792)](_0x16ca39);}if(_0x21881f)_0x1eaeef[_0x330845(0xb37)](_0x330845(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x915),_0x378f99=>{const _0x1f5945=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x1f5945(0x9a5)]())return;VisuMZ[_0x1f5945(0x9de)](_0x378f99,_0x378f99);const _0x1cbd50=VisuMZ[_0x1f5945(0x270)](_0x378f99[_0x1f5945(0xa47)]);let _0x1528c0=_0x378f99['Direction'][_0x1f5945(0xcd4)](/back/i);for(const _0x3c8a06 of _0x1cbd50){if(!_0x3c8a06)continue;if(_0x378f99[_0x1f5945(0x4cb)][_0x1f5945(0xcd4)](/rand/i))_0x1528c0=Math['randomInt'](0x2);_0x3c8a06['setBattlerFlip'](!!_0x1528c0);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x25c),_0x33dd4a=>{const _0x575352=_0x5e79d1;if(!SceneManager[_0x575352(0x6a6)]())return;if(!$gameSystem[_0x575352(0x9a5)]())return;VisuMZ['ConvertParams'](_0x33dd4a,_0x33dd4a);const _0x31c01a=VisuMZ['CreateActionSequenceTargets'](_0x33dd4a['Targets']),_0x38110a=_0x33dd4a[_0x575352(0x2db)];for(const _0x1bd442 of _0x31c01a){if(!_0x1bd442)continue;const _0x2c3963=_0x33dd4a[_0x575352(0x6de)](_0x1bd442)||{'x':0x0,'y':0x0};let _0x1f9b9b=_0x2c3963['x'],_0x39babc=_0x2c3963['y'];_0x1bd442[_0x575352(0x9b9)](Math['round'](_0x1f9b9b),Math[_0x575352(0xa7d)](_0x39babc),!!_0x38110a);}}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x59e),_0x47a47c=>{const _0x3120ef=_0x5e79d1;if(!SceneManager[_0x3120ef(0x6a6)]())return;if(!$gameSystem[_0x3120ef(0x9a5)]())return;VisuMZ[_0x3120ef(0x9de)](_0x47a47c,_0x47a47c);const _0xf8770=VisuMZ[_0x3120ef(0x270)](_0x47a47c['Targets']);let _0x11ca88=_0x47a47c[_0x3120ef(0x4bb)];const _0x1dc9f8=_0x47a47c[_0x3120ef(0x2db)];for(const _0x2323ea of _0xf8770){if(!_0x2323ea)continue;let _0x248978=_0x2323ea[_0x3120ef(0x949)]()[_0x3120ef(0x523)],_0x5ae6b=_0x2323ea[_0x3120ef(0x949)]()[_0x3120ef(0x415)];if(_0x11ca88['match'](/home/i))_0x248978=_0x2323ea[_0x3120ef(0x949)]()[_0x3120ef(0x76c)],_0x5ae6b=_0x2323ea['battler']()[_0x3120ef(0x39e)];else{if(_0x11ca88[_0x3120ef(0xcd4)](/center/i))_0x248978=Graphics[_0x3120ef(0x486)]/0x2,_0x5ae6b=Graphics[_0x3120ef(0x6e6)]/0x2;else _0x11ca88[_0x3120ef(0xcd4)](/point (\d+), (\d+)/i)&&(_0x248978=Number(RegExp['$1']),_0x5ae6b=Number(RegExp['$2']));}_0x2323ea['setBattlerFacePoint'](Math['round'](_0x248978),Math['round'](_0x5ae6b),!!_0x1dc9f8);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Movement_FaceTarget',_0x40de60=>{const _0xccdca2=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0xccdca2(0x9a5)]())return;VisuMZ[_0xccdca2(0x9de)](_0x40de60,_0x40de60);const _0x333ebd=VisuMZ['CreateActionSequenceTargets'](_0x40de60[_0xccdca2(0x8c0)]),_0xec67e9=VisuMZ[_0xccdca2(0x270)](_0x40de60[_0xccdca2(0x565)]),_0x35198c=_0xec67e9[_0xccdca2(0x343)](_0x493f9e=>_0x493f9e&&_0x493f9e[_0xccdca2(0x949)]()?_0x493f9e['battler']()[_0xccdca2(0x523)]:0x0)/(_0xec67e9[_0xccdca2(0xc35)]||0x1),_0x244d00=_0xec67e9['map'](_0xfc8c11=>_0xfc8c11&&_0xfc8c11[_0xccdca2(0x949)]()?_0xfc8c11[_0xccdca2(0x949)]()[_0xccdca2(0x415)]:0x0)/(_0xec67e9[_0xccdca2(0xc35)]||0x1),_0x5a421a=_0x40de60[_0xccdca2(0x2db)];for(const _0x104b3c of _0x333ebd){if(!_0x104b3c)continue;_0x104b3c[_0xccdca2(0x9b9)](Math['round'](_0x35198c),Math['round'](_0x244d00),!!_0x5a421a);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x9cb),_0x461246=>{const _0x2a3dba=_0x5e79d1;if(!SceneManager[_0x2a3dba(0x6a6)]())return;VisuMZ[_0x2a3dba(0x9de)](_0x461246,_0x461246);const _0x2f3c12=$gameTemp[_0x2a3dba(0x4c9)](),_0x4e6dbd=VisuMZ[_0x2a3dba(0x270)](_0x461246['Targets']),_0x7f1b82=_0x461246[_0x2a3dba(0xb27)],_0x1176b6=_0x461246[_0x2a3dba(0x8cd)],_0x25c58a=_0x461246[_0x2a3dba(0x599)],_0x5c5a1b=_0x461246['WaitForFloat'];if(!_0x2f3c12)return;for(const _0xd1a021 of _0x4e6dbd){if(!_0xd1a021)continue;_0xd1a021[_0x2a3dba(0x5f0)](_0x7f1b82,_0x1176b6,_0x25c58a);}if(_0x5c5a1b)_0x2f3c12['setWaitMode'](_0x2a3dba(0x24f));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x3e1),_0x329ad7=>{const _0x1f0cce=_0x5e79d1;if(!SceneManager[_0x1f0cce(0x6a6)]())return;VisuMZ['ConvertParams'](_0x329ad7,_0x329ad7);const _0x4f4080=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4f4080)return;const _0x38c4ed=VisuMZ['CreateActionSequenceTargets'](_0x329ad7[_0x1f0cce(0xa47)]);for(const _0x4d0065 of _0x38c4ed){if(!_0x4d0065)continue;_0x4d0065[_0x1f0cce(0xbe9)]();}BattleManager[_0x1f0cce(0x5c2)]&&BattleManager[_0x1f0cce(0x5c2)]['performActionEnd']();if(_0x329ad7[_0x1f0cce(0x769)])_0x4f4080['setWaitMode'](_0x1f0cce(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x320),_0x5a8cc8=>{const _0x3f3499=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5a8cc8,_0x5a8cc8);const _0x19915e=$gameTemp['getLastPluginCommandInterpreter'](),_0x49a5d7=VisuMZ[_0x3f3499(0x270)](_0x5a8cc8[_0x3f3499(0xa47)]),_0x23e418=_0x5a8cc8[_0x3f3499(0xb27)],_0xc2c04f=_0x5a8cc8[_0x3f3499(0x8cd)],_0x17bb21=_0x5a8cc8[_0x3f3499(0x7d0)];if(!_0x19915e)return;for(const _0x4e3f00 of _0x49a5d7){if(!_0x4e3f00)continue;_0x4e3f00[_0x3f3499(0x525)](_0x23e418,_0xc2c04f);}if(_0x17bb21)_0x19915e['setWaitMode'](_0x3f3499(0x9f0));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x692),_0x1e17e7=>{const _0x9bf732=_0x5e79d1;if(!SceneManager[_0x9bf732(0x6a6)]())return;if(!$gameSystem[_0x9bf732(0x9a5)]())return;VisuMZ['ConvertParams'](_0x1e17e7,_0x1e17e7);const _0x2fc416=$gameTemp[_0x9bf732(0x4c9)](),_0x51205c=VisuMZ[_0x9bf732(0x270)](_0x1e17e7[_0x9bf732(0xa47)]),_0x4856c8=_0x1e17e7[_0x9bf732(0x9af)],_0x30e8e6=_0x1e17e7['DistanceX'],_0x5ee67c=_0x1e17e7[_0x9bf732(0xab8)],_0x1fb1ad=_0x1e17e7['Duration'],_0x25792c=_0x1e17e7['FaceDirection'],_0x336a68=_0x1e17e7['EasingType'],_0xb27ff8=_0x1e17e7[_0x9bf732(0x6ec)],_0x220ea1=_0x1e17e7[_0x9bf732(0x769)];if(!_0x2fc416)return;for(const _0x2976a3 of _0x51205c){if(!_0x2976a3)continue;let _0x45fba9=_0x30e8e6,_0x55db6d=_0x5ee67c;if(_0x4856c8[_0x9bf732(0xcd4)](/horz/i))_0x45fba9*=_0x2976a3[_0x9bf732(0x2ff)]()?-0x1:0x1;if(_0x4856c8[_0x9bf732(0xcd4)](/vert/i))_0x55db6d*=_0x2976a3['isActor']()?-0x1:0x1;_0x2976a3['moveBattlerDistance'](_0x45fba9,_0x55db6d,_0x1fb1ad,_0x25792c,_0x336a68),_0x2976a3[_0x9bf732(0x792)](_0xb27ff8);}if(_0x220ea1)_0x2fc416['setWaitMode'](_0x9bf732(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Movement_MoveToJsPoint',_0xee8f30=>{const _0x4b1baa=_0x5e79d1;if(!SceneManager[_0x4b1baa(0x6a6)]())return;if(!$gameSystem[_0x4b1baa(0x9a5)]())return;VisuMZ[_0x4b1baa(0x9de)](_0xee8f30,_0xee8f30);const _0x42fb0c=$gameTemp[_0x4b1baa(0x4c9)](),_0x1d057d=VisuMZ[_0x4b1baa(0x270)](_0xee8f30[_0x4b1baa(0xa47)]),_0x4784ff=_0xee8f30[_0x4b1baa(0x885)],_0x4ff279=_0xee8f30[_0x4b1baa(0x75b)],_0x1397d7=_0xee8f30[_0x4b1baa(0x8fb)],_0x518ce4=_0xee8f30[_0x4b1baa(0x8cd)],_0x5baa0f=_0xee8f30['FaceDirection'],_0x123483=_0xee8f30[_0x4b1baa(0x599)],_0x28e02e=_0xee8f30[_0x4b1baa(0x6ec)],_0x1d4fbe=_0xee8f30['WaitForMovement'];if(!_0x42fb0c)return;for(const _0x406ba1 of _0x1d057d){if(!_0x406ba1)continue;const _0x3c38ed=_0xee8f30['DestinationJS'](_0x406ba1)||{'x':0x0,'y':0x0};let _0x497b9c=_0x3c38ed['x'],_0x282a40=_0x3c38ed['y'];if(_0x4784ff[_0x4b1baa(0xcd4)](/none/i))_0x497b9c+=_0x4ff279,_0x282a40+=_0x1397d7;else{if(_0x4784ff[_0x4b1baa(0xcd4)](/horz/i)&&_0x4784ff['match'](/vert/i))_0x497b9c+=_0x406ba1[_0x4b1baa(0x2ff)]()?-_0x4ff279:_0x4ff279,_0x282a40+=_0x406ba1['isActor']()?-_0x1397d7:_0x1397d7;else{if(_0x4784ff[_0x4b1baa(0xcd4)](/horz/i))_0x497b9c+=_0x406ba1[_0x4b1baa(0x2ff)]()?-_0x4ff279:_0x4ff279,_0x282a40+=_0x1397d7;else _0x4784ff[_0x4b1baa(0xcd4)](/vert/i)&&(_0x497b9c+=_0x4ff279,_0x282a40+=_0x406ba1[_0x4b1baa(0x2ff)]()?-_0x1397d7:_0x1397d7);}}_0x406ba1[_0x4b1baa(0x72b)](_0x497b9c,_0x282a40,_0x518ce4,_0x5baa0f,_0x123483,-0x1),_0x406ba1[_0x4b1baa(0x792)](_0x28e02e);}if(_0x1d4fbe)_0x42fb0c[_0x4b1baa(0xb37)](_0x4b1baa(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x4e4),_0x263efb=>{const _0x56520b=_0x5e79d1;if(!SceneManager[_0x56520b(0x6a6)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x56520b(0x9de)](_0x263efb,_0x263efb);const _0x3e0cb2=$gameTemp[_0x56520b(0x4c9)](),_0x2cd30=VisuMZ[_0x56520b(0x270)](_0x263efb[_0x56520b(0xa47)]),_0x155ce5=_0x263efb[_0x56520b(0xa17)],_0x16629b=_0x263efb['OffsetAdjust'],_0x5a6cc7=_0x263efb[_0x56520b(0x75b)],_0x168ea6=_0x263efb[_0x56520b(0x8fb)],_0xf64281=_0x263efb[_0x56520b(0x8cd)],_0x3eb1e5=_0x263efb[_0x56520b(0xc6e)],_0x312ebe=_0x263efb[_0x56520b(0x599)],_0x1cd081=_0x263efb[_0x56520b(0x6ec)],_0x473c53=_0x263efb['WaitForMovement'];if(!_0x3e0cb2)return;for(const _0x19670c of _0x2cd30){if(!_0x19670c)continue;let _0x4e261a=_0x19670c[_0x56520b(0x949)]()[_0x56520b(0x523)],_0x40f087=_0x19670c[_0x56520b(0x949)]()[_0x56520b(0x415)];if(_0x155ce5[_0x56520b(0xcd4)](/home/i))_0x4e261a=_0x19670c[_0x56520b(0x949)]()[_0x56520b(0x76c)],_0x40f087=_0x19670c[_0x56520b(0x949)]()[_0x56520b(0x39e)];else{if(_0x155ce5[_0x56520b(0xcd4)](/center/i))_0x4e261a=Graphics[_0x56520b(0x486)]/0x2,_0x40f087=Graphics['boxHeight']/0x2;else _0x155ce5[_0x56520b(0xcd4)](/point (\d+), (\d+)/i)&&(_0x4e261a=Number(RegExp['$1']),_0x40f087=Number(RegExp['$2']));}if(_0x16629b[_0x56520b(0xcd4)](/none/i))_0x4e261a+=_0x5a6cc7,_0x40f087+=_0x168ea6;else{if(_0x16629b[_0x56520b(0xcd4)](/horz/i)&&_0x16629b[_0x56520b(0xcd4)](/vert/i))_0x4e261a+=_0x19670c[_0x56520b(0x2ff)]()?-_0x5a6cc7:_0x5a6cc7,_0x40f087+=_0x19670c['isActor']()?-_0x168ea6:_0x168ea6;else{if(_0x16629b[_0x56520b(0xcd4)](/horz/i))_0x4e261a+=_0x19670c[_0x56520b(0x2ff)]()?-_0x5a6cc7:_0x5a6cc7,_0x40f087+=_0x168ea6;else _0x16629b['match'](/vert/i)&&(_0x4e261a+=_0x5a6cc7,_0x40f087+=_0x19670c['isActor']()?-_0x168ea6:_0x168ea6);}}_0x19670c[_0x56520b(0x72b)](_0x4e261a,_0x40f087,_0xf64281,_0x3eb1e5,_0x312ebe,-0x1),_0x19670c[_0x56520b(0x792)](_0x1cd081);}if(_0x473c53)_0x3e0cb2[_0x56520b(0xb37)](_0x56520b(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x767),_0x31b105=>{const _0x2f3c03=_0x5e79d1;if(!SceneManager[_0x2f3c03(0x6a6)]())return;if(!$gameSystem[_0x2f3c03(0x9a5)]())return;VisuMZ['ConvertParams'](_0x31b105,_0x31b105);const _0x24dc6d=$gameTemp['getLastPluginCommandInterpreter'](),_0x4da921=VisuMZ[_0x2f3c03(0x270)](_0x31b105[_0x2f3c03(0x8c0)]),_0x196226=VisuMZ[_0x2f3c03(0x270)](_0x31b105[_0x2f3c03(0x565)]),_0x6860d1=_0x31b105['TargetLocation'];let _0x1d251b=_0x31b105[_0x2f3c03(0xadf)];const _0x48a8c5=_0x31b105['OffsetAdjust'],_0x1820b1=_0x31b105[_0x2f3c03(0x75b)],_0x156c7d=_0x31b105['OffsetY'],_0x3be8b9=_0x31b105[_0x2f3c03(0x8cd)],_0x458b53=_0x31b105['FaceDirection'],_0x53c19d=_0x31b105[_0x2f3c03(0x599)],_0x5ee7bb=_0x31b105[_0x2f3c03(0x6ec)],_0x58d978=_0x31b105[_0x2f3c03(0x769)],_0x2c26c8=Math['min'](..._0x196226['map'](_0x438eec=>_0x438eec[_0x2f3c03(0x949)]()['_baseX']-_0x438eec['battler']()[_0x2f3c03(0x872)]()/0x2)),_0x162a35=Math['max'](..._0x196226[_0x2f3c03(0x343)](_0x484399=>_0x484399[_0x2f3c03(0x949)]()[_0x2f3c03(0x523)]+_0x484399[_0x2f3c03(0x949)]()['mainSpriteWidth']()/0x2)),_0x74045d=Math[_0x2f3c03(0x52b)](..._0x196226[_0x2f3c03(0x343)](_0x847909=>_0x847909[_0x2f3c03(0x949)]()['_baseY']-_0x847909[_0x2f3c03(0x949)]()[_0x2f3c03(0x58a)]())),_0x46ad1e=Math[_0x2f3c03(0x9db)](..._0x196226['map'](_0x11097f=>_0x11097f[_0x2f3c03(0x949)]()[_0x2f3c03(0x415)])),_0x26706a=_0x196226[_0x2f3c03(0x984)](_0x154cc1=>_0x154cc1['isActor']())['length'],_0x5aa4ed=_0x196226[_0x2f3c03(0x984)](_0x47b64c=>_0x47b64c[_0x2f3c03(0x4cf)]())[_0x2f3c03(0xc35)];let _0x2baad6=0x0,_0x36c052=0x0;if(_0x6860d1[_0x2f3c03(0xcd4)](/front/i))_0x2baad6=_0x26706a>=_0x5aa4ed?_0x2c26c8:_0x162a35;else{if(_0x6860d1[_0x2f3c03(0xcd4)](/middle/i))_0x2baad6=(_0x2c26c8+_0x162a35)/0x2,_0x1d251b=-0x1;else _0x6860d1[_0x2f3c03(0xcd4)](/back/i)&&(_0x2baad6=_0x26706a>=_0x5aa4ed?_0x162a35:_0x2c26c8);}if(_0x6860d1[_0x2f3c03(0xcd4)](/head/i))_0x36c052=_0x74045d;else{if(_0x6860d1[_0x2f3c03(0xcd4)](/center/i))_0x36c052=(_0x74045d+_0x46ad1e)/0x2;else _0x6860d1[_0x2f3c03(0xcd4)](/base/i)&&(_0x36c052=_0x46ad1e);}if(!_0x24dc6d)return;for(const _0x3be4a0 of _0x4da921){if(!_0x3be4a0)continue;let _0x1895c1=_0x2baad6,_0x371313=_0x36c052;if(_0x48a8c5[_0x2f3c03(0xcd4)](/none/i))_0x1895c1+=_0x1820b1,_0x371313+=_0x156c7d;else{if(_0x48a8c5[_0x2f3c03(0xcd4)](/horz/i)&&_0x48a8c5['match'](/vert/i))_0x1895c1+=_0x3be4a0['isActor']()?-_0x1820b1:_0x1820b1,_0x371313+=_0x3be4a0[_0x2f3c03(0x2ff)]()?-_0x156c7d:_0x156c7d;else{if(_0x48a8c5[_0x2f3c03(0xcd4)](/horz/i))_0x1895c1+=_0x3be4a0[_0x2f3c03(0x2ff)]()?-_0x1820b1:_0x1820b1,_0x371313+=_0x156c7d;else _0x48a8c5[_0x2f3c03(0xcd4)](/vert/i)&&(_0x1895c1+=_0x1820b1,_0x371313+=_0x3be4a0[_0x2f3c03(0x2ff)]()?-_0x156c7d:_0x156c7d);}}_0x3be4a0[_0x2f3c03(0x72b)](_0x1895c1,_0x371313,_0x3be8b9,_0x458b53,_0x53c19d,_0x1d251b),_0x3be4a0[_0x2f3c03(0x792)](_0x5ee7bb);}if(_0x58d978)_0x24dc6d[_0x2f3c03(0xb37)](_0x2f3c03(0x946));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Movement_Opacity',_0x4c0621=>{const _0x1aee55=_0x5e79d1;if(!SceneManager[_0x1aee55(0x6a6)]())return;VisuMZ[_0x1aee55(0x9de)](_0x4c0621,_0x4c0621);const _0x41595d=$gameTemp[_0x1aee55(0x4c9)](),_0x5a0c65=VisuMZ[_0x1aee55(0x270)](_0x4c0621[_0x1aee55(0xa47)]),_0x1af99f=_0x4c0621[_0x1aee55(0x899)],_0x30cc66=_0x4c0621[_0x1aee55(0x8cd)],_0x3fe97f=_0x4c0621[_0x1aee55(0x599)],_0x1a7360=_0x4c0621[_0x1aee55(0xbfd)];if(!_0x41595d)return;for(const _0x12423c of _0x5a0c65){if(!_0x12423c)continue;_0x12423c[_0x1aee55(0x30e)](_0x1af99f,_0x30cc66,_0x3fe97f);}if(_0x1a7360)_0x41595d[_0x1aee55(0xb37)](_0x1aee55(0xbc6));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x552),_0x3d5444=>{const _0x2682bb=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x2682bb(0x9de)](_0x3d5444,_0x3d5444);const _0x362b80=$gameTemp['getLastPluginCommandInterpreter'](),_0x5b2a49=VisuMZ[_0x2682bb(0x270)](_0x3d5444[_0x2682bb(0xa47)]),_0x1a3500=_0x3d5444[_0x2682bb(0x6b1)],_0x2f1b3a=_0x3d5444[_0x2682bb(0x52d)],_0x3981d0=_0x3d5444[_0x2682bb(0x8cd)],_0x5dee67=_0x3d5444['EasingType'],_0x34a761=_0x3d5444[_0x2682bb(0x27b)];if(!_0x362b80)return;for(const _0x41fdf8 of _0x5b2a49){if(!_0x41fdf8)continue;_0x41fdf8[_0x2682bb(0xb7a)](_0x1a3500,_0x2f1b3a,_0x3981d0,_0x5dee67);}if(_0x34a761)_0x362b80[_0x2682bb(0xb37)]('battleGrow');}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_Skew',_0x1efe71=>{const _0x1d3e6b=_0x5e79d1;if(!SceneManager[_0x1d3e6b(0x6a6)]())return;VisuMZ[_0x1d3e6b(0x9de)](_0x1efe71,_0x1efe71);const _0x329eaf=$gameTemp['getLastPluginCommandInterpreter'](),_0x146d0d=VisuMZ[_0x1d3e6b(0x270)](_0x1efe71['Targets']),_0x390be1=_0x1efe71[_0x1d3e6b(0x2e7)],_0xf06bf5=_0x1efe71[_0x1d3e6b(0x5aa)],_0x4ae9a1=_0x1efe71[_0x1d3e6b(0x8cd)],_0x3537bb=_0x1efe71[_0x1d3e6b(0x599)],_0x1c973b=_0x1efe71[_0x1d3e6b(0x3cf)];if(!_0x329eaf)return;for(const _0x1c9c9a of _0x146d0d){if(!_0x1c9c9a)continue;_0x1c9c9a[_0x1d3e6b(0x5de)](_0x390be1,_0xf06bf5,_0x4ae9a1,_0x3537bb);}if(_0x1c973b)_0x329eaf[_0x1d3e6b(0xb37)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Movement_Spin',_0x462410=>{const _0x2b87f6=_0x5e79d1;if(!SceneManager[_0x2b87f6(0x6a6)]())return;VisuMZ[_0x2b87f6(0x9de)](_0x462410,_0x462410);const _0x25cc0f=$gameTemp[_0x2b87f6(0x4c9)](),_0x512064=VisuMZ[_0x2b87f6(0x270)](_0x462410[_0x2b87f6(0xa47)]),_0x27ec70=_0x462410[_0x2b87f6(0x35c)],_0x1e7ced=_0x462410[_0x2b87f6(0x8cd)],_0x1af539=_0x462410['EasingType'],_0x2e5fb0=_0x462410[_0x2b87f6(0x6e8)],_0x3b3eb2=_0x462410[_0x2b87f6(0xc38)];if(!_0x25cc0f)return;for(const _0x335fef of _0x512064){if(!_0x335fef)continue;_0x335fef[_0x2b87f6(0x32d)](_0x27ec70,_0x1e7ced,_0x1af539,_0x2e5fb0);}if(_0x3b3eb2)_0x25cc0f[_0x2b87f6(0xb37)](_0x2b87f6(0x502));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x564),_0x20c937=>{const _0x12f419=_0x5e79d1;if(!SceneManager[_0x12f419(0x6a6)]())return;const _0x58d568=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x58d568)return;_0x58d568[_0x12f419(0xb37)](_0x12f419(0x24f));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],'ActSeq_Movement_WaitForJump',_0x48d354=>{const _0x1cb6d7=_0x5e79d1;if(!SceneManager[_0x1cb6d7(0x6a6)]())return;const _0x2ca5de=$gameTemp[_0x1cb6d7(0x4c9)]();if(!_0x2ca5de)return;_0x2ca5de[_0x1cb6d7(0xb37)]('battleJump');}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x775),_0x1ecab6=>{const _0x32ccf7=_0x5e79d1;if(!SceneManager[_0x32ccf7(0x6a6)]())return;const _0x3e9594=$gameTemp[_0x32ccf7(0x4c9)]();if(!_0x3e9594)return;_0x3e9594[_0x32ccf7(0xb37)](_0x32ccf7(0x946));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xa3f),_0x58d6d6=>{const _0xdcd604=_0x5e79d1;if(!SceneManager[_0xdcd604(0x6a6)]())return;const _0x56d243=$gameTemp[_0xdcd604(0x4c9)]();if(!_0x56d243)return;_0x56d243[_0xdcd604(0xb37)](_0xdcd604(0xbc6));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x921),_0x3f42d8=>{const _0x526d87=_0x5e79d1;if(!SceneManager[_0x526d87(0x6a6)]())return;const _0x49bd07=$gameTemp[_0x526d87(0x4c9)]();if(!_0x49bd07)return;_0x49bd07[_0x526d87(0xb37)](_0x526d87(0x302));}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x4f2),_0x4271ee=>{const _0x29adef=_0x5e79d1;if(!SceneManager[_0x29adef(0x6a6)]())return;const _0x4eb172=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x4eb172)return;_0x4eb172['setWaitMode'](_0x29adef(0x4fb));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x939),_0x64665d=>{const _0x4f6961=_0x5e79d1;if(!SceneManager[_0x4f6961(0x6a6)]())return;const _0xd8903=$gameTemp[_0x4f6961(0x4c9)]();if(!_0xd8903)return;_0xd8903[_0x4f6961(0xb37)](_0x4f6961(0x502));}),VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x741)]=function(){const _0xae06d5=_0x5e79d1;if(!Imported[_0xae06d5(0x479)])return;if(VisuMZ[_0xae06d5(0x430)]['version']<1.08){let _0xad4e8b='';_0xad4e8b+=_0xae06d5(0xaf7),_0xad4e8b+=_0xae06d5(0x223),alert(_0xad4e8b),SceneManager[_0xae06d5(0x9e8)]();}},PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Projectile_Animation',_0x456f43=>{const _0x1594ea=_0x5e79d1;if(!SceneManager[_0x1594ea(0x6a6)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x1594ea(0x9de)](_0x456f43,_0x456f43),VisuMZ['BattleCore'][_0x1594ea(0x741)]();const _0xb62008=$gameTemp[_0x1594ea(0x4c9)](),_0x44ddd4=_0x456f43[_0x1594ea(0x81e)];if(!_0xb62008)return;const _0x5205c5=BattleManager['_spriteset'];if(!_0x5205c5)return;_0x5205c5[_0x1594ea(0xbed)](_0x456f43);if(_0x44ddd4)_0xb62008[_0x1594ea(0xb37)](_0x1594ea(0x81c));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Projectile_Icon',_0x82d850=>{const _0x5a6cc8=_0x5e79d1;if(!SceneManager[_0x5a6cc8(0x6a6)]())return;if(!Imported[_0x5a6cc8(0x479)])return;VisuMZ[_0x5a6cc8(0x9de)](_0x82d850,_0x82d850),VisuMZ['BattleCore'][_0x5a6cc8(0x741)]();const _0x3b7115=$gameTemp[_0x5a6cc8(0x4c9)](),_0x4659f3=_0x82d850[_0x5a6cc8(0x81e)];if(!_0x3b7115)return;const _0x56e561=BattleManager['_spriteset'];if(!_0x56e561)return;_0x56e561[_0x5a6cc8(0xbed)](_0x82d850);if(_0x4659f3)_0x3b7115[_0x5a6cc8(0xb37)](_0x5a6cc8(0x81c));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x54f),_0x34bb32=>{const _0x47312f=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x47312f(0x479)])return;VisuMZ[_0x47312f(0x9de)](_0x34bb32,_0x34bb32),VisuMZ['BattleCore']['CheckActSeqProjectileVersion']();const _0x349459=$gameTemp[_0x47312f(0x4c9)](),_0x2ede46=_0x34bb32[_0x47312f(0x81e)];if(!_0x349459)return;const _0x214c94=BattleManager[_0x47312f(0x29c)];if(!_0x214c94)return;_0x214c94[_0x47312f(0xbed)](_0x34bb32);if(_0x2ede46)_0x349459[_0x47312f(0xb37)](_0x47312f(0x81c));}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xbc2),_0x32af07=>{const _0x10fc76=_0x5e79d1;if(!SceneManager[_0x10fc76(0x6a6)]())return;if(!Imported[_0x10fc76(0x857)])return;VisuMZ['ConvertParams'](_0x32af07,_0x32af07);const _0x2ef80f=$gameTemp[_0x10fc76(0x4c9)](),_0x108a4b=_0x32af07[_0x10fc76(0x3cf)];if(!_0x2ef80f)return;$gameScreen[_0x10fc76(0x251)](_0x32af07[_0x10fc76(0x2e7)],_0x32af07['SkewY'],_0x32af07[_0x10fc76(0x8cd)],_0x32af07[_0x10fc76(0x599)]);if(_0x108a4b)_0x2ef80f[_0x10fc76(0xb37)](_0x10fc76(0x1fa));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Skew_Reset',_0x509779=>{const _0x52acb7=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x52acb7(0x857)])return;VisuMZ[_0x52acb7(0x9de)](_0x509779,_0x509779);const _0x1a7eca=$gameTemp[_0x52acb7(0x4c9)](),_0x428721=_0x509779[_0x52acb7(0x3cf)];if(!_0x1a7eca)return;$gameScreen[_0x52acb7(0x251)](0x0,0x0,_0x509779[_0x52acb7(0x8cd)],_0x509779[_0x52acb7(0x599)]);if(_0x428721)_0x1a7eca[_0x52acb7(0xb37)]('battleSkew');}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x9b5),_0x340127=>{const _0x14935c=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x14935c(0x857)])return;const _0x23e492=$gameTemp[_0x14935c(0x4c9)]();if(!_0x23e492)return;_0x23e492[_0x14935c(0xb37)](_0x14935c(0x1fa));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Target_CurrentIndex',_0x78e3a5=>{const _0xa5376a=_0x5e79d1;if(!SceneManager[_0xa5376a(0x6a6)]())return;VisuMZ[_0xa5376a(0x9de)](_0x78e3a5,_0x78e3a5);const _0x2dfd01=$gameTemp['getLastPluginCommandInterpreter'](),_0x1d5f22=_0x78e3a5[_0xa5376a(0xca2)],_0x595ddd=_0x78e3a5[_0xa5376a(0x7c6)];if(!_0x2dfd01)return;BattleManager[_0xa5376a(0x39a)]=_0x1d5f22,BattleManager[_0xa5376a(0x6ee)]=BattleManager[_0xa5376a(0x98a)]?BattleManager[_0xa5376a(0x98a)][BattleManager['_targetIndex']]||null:null,BattleManager[_0xa5376a(0x6ee)]&&_0x595ddd[_0xa5376a(0xcde)]()[_0xa5376a(0xacc)]()!=='UNTITLED'&&_0x2dfd01[_0xa5376a(0x8e4)]([_0x595ddd]);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Target_NextTarget',_0x39863a=>{const _0x5906b1=_0x5e79d1;if(!SceneManager[_0x5906b1(0x6a6)]())return;VisuMZ['ConvertParams'](_0x39863a,_0x39863a);const _0x196fe6=$gameTemp[_0x5906b1(0x4c9)](),_0x5f4e01=_0x39863a['JumpToLabel'];if(!_0x196fe6)return;BattleManager[_0x5906b1(0x39a)]++,BattleManager[_0x5906b1(0x6ee)]=BattleManager['_allTargets'][BattleManager[_0x5906b1(0x39a)]]||null,BattleManager[_0x5906b1(0x6ee)]&&_0x5f4e01['toUpperCase']()[_0x5906b1(0xacc)]()!==_0x5906b1(0x859)&&_0x196fe6['command119']([_0x5f4e01]);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x1e3),_0x223bc1=>{const _0xc3c22e=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xc3c22e(0x9de)](_0x223bc1,_0x223bc1);const _0x2d6130=$gameTemp['getLastPluginCommandInterpreter'](),_0x56e70e=_0x223bc1[_0xc3c22e(0x7c6)];if(!_0x2d6130)return;BattleManager['_targetIndex']--,BattleManager['_target']=BattleManager[_0xc3c22e(0x98a)][BattleManager['_targetIndex']]||null,BattleManager['_target']&&_0x56e70e[_0xc3c22e(0xcde)]()[_0xc3c22e(0xacc)]()!==_0xc3c22e(0x859)&&_0x2d6130[_0xc3c22e(0x8e4)]([_0x56e70e]);}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],'ActSeq_Target_RandTarget',_0x36bba5=>{const _0x3e0d82=_0x5e79d1;if(!SceneManager[_0x3e0d82(0x6a6)]())return;VisuMZ['ConvertParams'](_0x36bba5,_0x36bba5);const _0x222e56=$gameTemp[_0x3e0d82(0x4c9)](),_0x179430=_0x36bba5[_0x3e0d82(0x3b4)],_0x2341f1=_0x36bba5[_0x3e0d82(0x7c6)];if(!_0x222e56)return;const _0x432195=BattleManager[_0x3e0d82(0x39a)];for(;;){BattleManager['_targetIndex']=Math[_0x3e0d82(0x65b)](BattleManager[_0x3e0d82(0x98a)]['length']);if(!_0x179430)break;if(BattleManager[_0x3e0d82(0x39a)]!==_0x432195)break;if(BattleManager['_allTargets'][_0x3e0d82(0xc35)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager[_0x3e0d82(0x6ee)]=BattleManager[_0x3e0d82(0x98a)][BattleManager[_0x3e0d82(0x39a)]]||null,BattleManager[_0x3e0d82(0x6ee)]&&_0x2341f1[_0x3e0d82(0xcde)]()[_0x3e0d82(0xacc)]()!==_0x3e0d82(0x859)&&_0x222e56[_0x3e0d82(0x8e4)]([_0x2341f1]);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x75f),_0x4b74f5=>{const _0x5cedd5=_0x5e79d1;if(!SceneManager[_0x5cedd5(0x6a6)]())return;if(!Imported[_0x5cedd5(0xb4d)])return;if(!ConfigManager[_0x5cedd5(0x5c0)])return;VisuMZ['ConvertParams'](_0x4b74f5,_0x4b74f5);const _0x452be5=VisuMZ[_0x5cedd5(0x270)](_0x4b74f5['Targets']);let _0x22bdcc=_0x4b74f5['VoiceLine']||'';for(const _0x4fb065 of _0x452be5){if(!_0x4fb065)continue;_0x4fb065[_0x5cedd5(0x904)](_0x22bdcc);}}),PluginManager['registerCommand'](pluginData['name'],_0x5e79d1(0x22e),_0x375a41=>{const _0x34ef40=_0x5e79d1;if(!SceneManager[_0x34ef40(0x6a6)]())return;if(!Imported[_0x34ef40(0xb4d)])return;if(!ConfigManager[_0x34ef40(0x5c0)])return;VisuMZ[_0x34ef40(0x9de)](_0x375a41,_0x375a41);const _0x430078=VisuMZ[_0x34ef40(0x270)](_0x375a41[_0x34ef40(0xa47)]);let _0x25ae97=(_0x375a41[_0x34ef40(0xc9e)]||'')+(_0x375a41['Letter']||'');for(const _0x267f2e of _0x430078){if(!_0x267f2e)continue;_0x267f2e[_0x34ef40(0x904)](_0x25ae97);}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Weapon_ClearActiveWeapon',_0x5cf52e=>{const _0x2f21fa=_0x5e79d1;if(!SceneManager[_0x2f21fa(0x6a6)]())return;VisuMZ[_0x2f21fa(0x9de)](_0x5cf52e,_0x5cf52e);const _0x5c3c6c=VisuMZ[_0x2f21fa(0x270)](_0x5cf52e[_0x2f21fa(0xa47)]);for(const _0x31e449 of _0x5c3c6c){if(!_0x31e449)continue;if(!_0x31e449[_0x2f21fa(0x2ff)]())continue;_0x31e449[_0x2f21fa(0x8f0)]();}}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],'ActSeq_Weapon_NextActiveWeapon',_0x29828e=>{const _0x5c208b=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5c208b(0x9de)](_0x29828e,_0x29828e);const _0x786c42=$gameTemp[_0x5c208b(0x4c9)]();let _0x586d3f=![];const _0x256375=_0x29828e['JumpToLabel'],_0x2bc425=VisuMZ[_0x5c208b(0x270)](_0x29828e[_0x5c208b(0xa47)]);for(const _0x2c7cbc of _0x2bc425){if(!_0x2c7cbc)continue;if(!_0x2c7cbc[_0x5c208b(0x2ff)]())continue;_0x2c7cbc[_0x5c208b(0xc78)](),_0x2c7cbc[_0x5c208b(0xc19)]()[_0x5c208b(0xc35)]>0x0?_0x586d3f=!![]:_0x2c7cbc[_0x5c208b(0x8f0)]();}_0x586d3f&&_0x256375[_0x5c208b(0xcde)]()[_0x5c208b(0xacc)]()!==_0x5c208b(0x859)&&_0x786c42[_0x5c208b(0x8e4)]([_0x256375]);}),PluginManager['registerCommand'](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x7f9),_0x480f8f=>{const _0x20d091=_0x5e79d1;if(!SceneManager[_0x20d091(0x6a6)]())return;VisuMZ[_0x20d091(0x9de)](_0x480f8f,_0x480f8f);let _0x474b76=_0x480f8f[_0x20d091(0x6ad)];_0x474b76--,_0x474b76=Math[_0x20d091(0x9db)](_0x474b76,0x0);const _0x16b3c3=VisuMZ[_0x20d091(0x270)](_0x480f8f[_0x20d091(0xa47)]);for(const _0x3c4726 of _0x16b3c3){if(!_0x3c4726)continue;if(!_0x3c4726['isActor']())continue;_0x3c4726[_0x20d091(0x5d7)](_0x474b76);}}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0x6d2),_0x4ea991=>{const _0xa32350=_0x5e79d1;if(!SceneManager[_0xa32350(0x6a6)]())return;if(!Imported[_0xa32350(0x857)])return;VisuMZ['ConvertParams'](_0x4ea991,_0x4ea991);const _0x28cb19=$gameTemp[_0xa32350(0x4c9)](),_0x5b3598=_0x4ea991[_0xa32350(0xc72)];if(!_0x28cb19)return;$gameScreen['setBattleZoom'](_0x4ea991[_0xa32350(0x9e3)],_0x4ea991['Duration'],_0x4ea991['EasingType']);if(_0x5b3598)_0x28cb19[_0xa32350(0xb37)](_0xa32350(0xce6));}),PluginManager[_0x5e79d1(0x690)](pluginData[_0x5e79d1(0x66e)],_0x5e79d1(0xb24),_0x51964a=>{const _0x29c893=_0x5e79d1;if(!SceneManager[_0x29c893(0x6a6)]())return;if(!Imported[_0x29c893(0x857)])return;VisuMZ[_0x29c893(0x9de)](_0x51964a,_0x51964a);const _0x247781=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c1a44=_0x51964a['WaitForZoom'];if(!_0x247781)return;$gameScreen[_0x29c893(0x6f4)](0x1,_0x51964a[_0x29c893(0x8cd)],_0x51964a[_0x29c893(0x599)]);if(_0x5c1a44)_0x247781[_0x29c893(0xb37)](_0x29c893(0xce6));}),PluginManager[_0x5e79d1(0x690)](pluginData['name'],_0x5e79d1(0x5dd),_0xf1816=>{const _0x128ea9=_0x5e79d1;if(!SceneManager[_0x128ea9(0x6a6)]())return;if(!Imported[_0x128ea9(0x857)])return;const _0x2c6df9=$gameTemp[_0x128ea9(0x4c9)]();if(!_0x2c6df9)return;_0x2c6df9[_0x128ea9(0xb37)](_0x128ea9(0xce6));}),VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2de)]=Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0xa54)],Scene_Boot['prototype'][_0x5e79d1(0xa54)]=function(){const _0x3f400e=_0x5e79d1;this['process_VisuMZ_BattleCore_Failsafes'](),this[_0x3f400e(0xbe4)](),this[_0x3f400e(0x719)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x3f400e(0x57e)][_0x3f400e(0x2de)]['call'](this),this[_0x3f400e(0x3b7)](),this[_0x3f400e(0x712)](),this[_0x3f400e(0xcb1)](),this[_0x3f400e(0x803)]();},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0x3b7)]=function(){const _0x537da9=_0x5e79d1;if(VisuMZ['ParseAllNotetags'])return;this[_0x537da9(0x263)](),this['process_VisuMZ_BattleCore_TraitObject_Notetags'](),this['process_VisuMZ_BattleCore_jsFunctions']();},Scene_Boot['prototype'][_0x5e79d1(0xce0)]=function(){const _0x31add9=_0x5e79d1,_0x1f7e6f=$dataSystem[_0x31add9(0xc43)][_0x31add9(0xc35)];for(let _0x5da98b=0x0;_0x5da98b<_0x1f7e6f;_0x5da98b++){const _0x3dd3ab=$dataSystem[_0x31add9(0x6ed)][_0x5da98b];if(_0x3dd3ab)continue;$dataSystem['attackMotions'][_0x5da98b]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0xbe4)]=function(){const _0x4380ec=_0x5e79d1,_0x24724d=VisuMZ['BattleCore']['Settings'];_0x24724d[_0x4380ec(0xb4c)][_0x4380ec(0x287)]===undefined&&(_0x24724d[_0x4380ec(0xb4c)][_0x4380ec(0x287)]=_0x4380ec(0x867)),_0x24724d[_0x4380ec(0x232)][_0x4380ec(0xa30)]===undefined&&(_0x24724d[_0x4380ec(0x232)][_0x4380ec(0xa30)]=![]),_0x24724d[_0x4380ec(0xb2e)][_0x4380ec(0xa30)]===undefined&&(_0x24724d[_0x4380ec(0xb2e)]['SmoothImage']=!![]),_0x24724d[_0x4380ec(0x232)][_0x4380ec(0x230)]===undefined&&(_0x24724d[_0x4380ec(0x232)][_0x4380ec(0x230)]=![]),_0x24724d[_0x4380ec(0x232)][_0x4380ec(0x4c0)]===undefined&&(_0x24724d['Actor']['PrioritySortActors']=!![]);},VisuMZ['DamageStyles']={},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0x719)]=function(){const _0x4a47ce=_0x5e79d1;for(const _0x30d999 of VisuMZ[_0x4a47ce(0x57e)][_0x4a47ce(0xc89)][_0x4a47ce(0xb4c)][_0x4a47ce(0xb17)]){if(!_0x30d999)continue;const _0x308197=_0x30d999['Name']['toUpperCase']()[_0x4a47ce(0xacc)]();VisuMZ['DamageStyles'][_0x308197]=_0x30d999;}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x9fe)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0x82b)]=function(){const _0x4819b5=_0x5e79d1,_0x14af16=VisuMZ[_0x4819b5(0x57e)][_0x4819b5(0x9fe)],_0x258564=_0x4819b5(0x942),_0x12150b=[[_0x4819b5(0xae3),_0x4819b5(0x987)],[_0x4819b5(0x8f1),_0x4819b5(0xa9c)]],_0x5c77bf=[[_0x4819b5(0x672),'JS\x20%1APPLY\x20%2'],[_0x4819b5(0x25e),_0x4819b5(0x7d3)]],_0x24a6a6=[['',''],['AsUser',_0x4819b5(0x543)],[_0x4819b5(0x353),_0x4819b5(0x75a)]];for(const _0x4c7b1e of _0x5c77bf){for(const _0x1c5b21 of _0x24a6a6){for(const _0x5d8627 of _0x12150b){const _0x4cd5a6=_0x4c7b1e[0x0][_0x4819b5(0x2a0)](_0x5d8627[0x0],_0x1c5b21[0x0]),_0x45978e=_0x4c7b1e[0x1][_0x4819b5(0x2a0)](_0x5d8627[0x1],_0x1c5b21[0x1])[_0x4819b5(0xacc)](),_0x31a98b=new RegExp(_0x258564[_0x4819b5(0x2a0)](_0x45978e),'i');_0x14af16[_0x4cd5a6]=_0x31a98b;}}}const _0x4cff53=[[_0x4819b5(0xaf5),'JS\x20%1START\x20ACTION'],['%1EndActionJS',_0x4819b5(0x933)]];for(const _0x36421e of _0x4cff53){for(const _0x21339a of _0x12150b){const _0x95f179=_0x36421e[0x0][_0x4819b5(0x2a0)](_0x21339a[0x0]),_0x147baa=_0x36421e[0x1][_0x4819b5(0x2a0)](_0x21339a[0x1]),_0x45c533=new RegExp(_0x258564[_0x4819b5(0x2a0)](_0x147baa),'i');_0x14af16[_0x95f179]=_0x45c533;}}const _0x32e8f0=[['%1StartBattleJS',_0x4819b5(0x291)],[_0x4819b5(0x48c),_0x4819b5(0x5f5)],['BattleVictoryJS',_0x4819b5(0xc26)],[_0x4819b5(0x22f),'JS\x20BATTLE\x20DEFEAT'],['EscapeSuccessJS',_0x4819b5(0x259)],[_0x4819b5(0xbac),_0x4819b5(0x91b)],[_0x4819b5(0x2be),_0x4819b5(0x87d)],['%1EndTurnJS','JS\x20%1END\x20TURN'],[_0x4819b5(0x281),'JS\x20%1REGENERATE']];for(const _0x437d90 of _0x32e8f0){for(const _0x183c7f of _0x12150b){const _0x416666=_0x437d90[0x0][_0x4819b5(0x2a0)](_0x183c7f[0x0]),_0x63ad9=_0x437d90[0x1][_0x4819b5(0x2a0)](_0x183c7f[0x1]),_0x56157f=new RegExp(_0x258564['format'](_0x63ad9),'i');_0x14af16[_0x416666]=_0x56157f;}}},Scene_Boot[_0x5e79d1(0x3a9)]['process_VisuMZ_BattleCore_Action_Notetags']=function(){const _0x146e16=_0x5e79d1,_0x18a2e8=$dataSkills[_0x146e16(0x960)]($dataItems);for(const _0x5ddf9f of _0x18a2e8){if(!_0x5ddf9f)continue;VisuMZ['BattleCore'][_0x146e16(0x86b)](_0x5ddf9f);}},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0x5f7)]=function(){const _0x14f66b=_0x5e79d1,_0x2fcd6a=$dataActors['concat']($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x5def53 of _0x2fcd6a){if(!_0x5def53)continue;VisuMZ[_0x14f66b(0x57e)]['Parse_Notetags_TraitObjects'](_0x5def53),_0x5def53[_0x14f66b(0xb56)]!==undefined&&VisuMZ[_0x14f66b(0x57e)][_0x14f66b(0x6f8)](_0x5def53);}},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0x712)]=function(){const _0x5b3eee=_0x5e79d1,_0x5e48b0=VisuMZ[_0x5b3eee(0x57e)][_0x5b3eee(0xc89)][_0x5b3eee(0x368)][_0x5b3eee(0x801)],_0x416b17=[];for(const _0x50b266 of _0x5e48b0){const _0x29b8cb=$dataTroops[_0x50b266];if(_0x29b8cb)_0x416b17[_0x5b3eee(0x68a)](JsonEx[_0x5b3eee(0xbec)](_0x29b8cb));}for(const _0x5d74a3 of $dataTroops){if(!_0x5d74a3)continue;for(const _0x2d1672 of _0x416b17){if(_0x2d1672['id']===_0x5d74a3['id'])continue;_0x5d74a3['pages']=_0x5d74a3[_0x5b3eee(0xc1e)]['concat'](_0x2d1672['pages']);}}},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0xcb1)]=function(){const _0x412f24=_0x5e79d1,_0x563fb8=VisuMZ[_0x412f24(0x57e)][_0x412f24(0xc89)][_0x412f24(0x368)];if(_0x563fb8[_0x412f24(0x67f)]>0x0&&$dataCommonEvents[_0x563fb8['BattleStartEvent']]){const _0x723cfd=$dataCommonEvents[_0x563fb8[_0x412f24(0x67f)]],_0x3ac032=_0x723cfd[_0x412f24(0x69f)]['length']-0x2,_0x54d9c3=_0x723cfd['list'][_0x3ac032];if(_0x54d9c3&&_0x54d9c3[_0x412f24(0xbe2)]!==0xe6){const _0x3be639={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x578a8f=_0x723cfd['list'][_0x412f24(0x1dd)]();_0x723cfd['list'][_0x412f24(0xa0b)](_0x3be639),_0x723cfd[_0x412f24(0x69f)]['unshift'](_0x578a8f);}}},Scene_Boot[_0x5e79d1(0x3a9)][_0x5e79d1(0x803)]=function(){const _0x13429e=_0x5e79d1;VisuMZ['BattleCore']['CreateCommonEventKeys'](),VisuMZ[_0x13429e(0x57e)][_0x13429e(0x406)]($dataSkills),VisuMZ[_0x13429e(0x57e)]['BindCommonEventKeysForGroup']($dataItems);},VisuMZ[_0x5e79d1(0x57e)]['CreateCommonEventKeys']=function(){const _0xe320cb=_0x5e79d1;VisuMZ[_0xe320cb(0x57e)][_0xe320cb(0x8e5)]={};for(const _0x189a33 of $dataCommonEvents){if(!_0x189a33)continue;if(_0x189a33[_0xe320cb(0x66e)][_0xe320cb(0xcd4)](/\[(.*)\]/i)){let _0x5e463e=String(RegExp['$1'])[_0xe320cb(0x4f6)](/,/g,'')[_0xe320cb(0xcde)]()[_0xe320cb(0xacc)]();VisuMZ[_0xe320cb(0x57e)][_0xe320cb(0x8e5)][_0x5e463e]=_0x189a33['id'];}}},VisuMZ['BattleCore']['BindCommonEventKeysForGroup']=function(_0x1d13ce){const _0x5e8157=_0x5e79d1;for(const _0x5c1ac9 of _0x1d13ce){if(!_0x5c1ac9)continue;VisuMZ[_0x5e8157(0x57e)][_0x5e8157(0x6be)](_0x5c1ac9);}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x6be)]=function(_0x11f3fc){const _0x1d7736=_0x5e79d1;if(!_0x11f3fc)return;if(!_0x11f3fc[_0x1d7736(0x498)])return;VisuMZ['BattleCore'][_0x1d7736(0x8e5)]=VisuMZ[_0x1d7736(0x57e)]['_commonEventKey']||{};const _0x4ce25b=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x4c9290=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x4f8114=[];const _0x253476=_0x11f3fc[_0x1d7736(0x85e)][_0x1d7736(0xcd4)](_0x4ce25b);if(_0x253476){for(const _0x3a5e1d of _0x253476){_0x3a5e1d[_0x1d7736(0xcd4)](_0x4ce25b);const _0x411949=String(RegExp['$1'])[_0x1d7736(0x60b)](',')[_0x1d7736(0x343)](_0x4d5671=>String(_0x4d5671)[_0x1d7736(0xcde)]()[_0x1d7736(0xacc)]());_0x4f8114=_0x4f8114[_0x1d7736(0x960)](_0x411949);}!_0x11f3fc[_0x1d7736(0x85e)][_0x1d7736(0xcd4)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x11f3fc[_0x1d7736(0x85e)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x11f3fc[_0x1d7736(0x85e)][_0x1d7736(0xcd4)](_0x4c9290)){const _0x130516=String(RegExp['$1'])[_0x1d7736(0x60b)](/[\r\n]+/)['map'](_0x16bc89=>String(_0x16bc89)[_0x1d7736(0xcde)]()[_0x1d7736(0xacc)]());_0x4f8114=_0x4f8114[_0x1d7736(0x960)](_0x130516);!_0x11f3fc['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x11f3fc[_0x1d7736(0x85e)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x3ba9a9 of _0x4f8114){if(VisuMZ[_0x1d7736(0x57e)][_0x1d7736(0x8e5)][_0x3ba9a9]){const _0x26319a=VisuMZ[_0x1d7736(0x57e)][_0x1d7736(0x8e5)][_0x3ba9a9],_0xaa3636={'code':0x2c,'dataId':_0x26319a,'value1':0x1,'value2':0x0};_0x11f3fc['effects'][_0x1d7736(0x68a)](_0xaa3636);}}},Scene_Boot['prototype'][_0x5e79d1(0x4f1)]=function(){const _0x188c70=_0x5e79d1,_0x7f9415=$dataSkills[_0x188c70(0x960)]($dataItems);for(const _0x12e4f0 of _0x7f9415){if(!_0x12e4f0)continue;VisuMZ[_0x188c70(0x57e)][_0x188c70(0x61b)](_0x12e4f0);}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x6ca)]=VisuMZ[_0x5e79d1(0x6ca)],VisuMZ['ParseActorNotetags']=function(_0x3fded4){const _0x4cf1c4=_0x5e79d1;VisuMZ[_0x4cf1c4(0x57e)][_0x4cf1c4(0x6ca)]&&VisuMZ[_0x4cf1c4(0x57e)][_0x4cf1c4(0x6ca)][_0x4cf1c4(0x695)](this,_0x3fded4),VisuMZ[_0x4cf1c4(0x57e)][_0x4cf1c4(0xca5)](_0x3fded4);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc20)]=VisuMZ[_0x5e79d1(0xc20)],VisuMZ[_0x5e79d1(0xc20)]=function(_0xf7f882){const _0x26af7b=_0x5e79d1;VisuMZ[_0x26af7b(0x57e)][_0x26af7b(0xc20)]&&VisuMZ[_0x26af7b(0x57e)][_0x26af7b(0xc20)][_0x26af7b(0x695)](this,_0xf7f882),VisuMZ[_0x26af7b(0x57e)]['Parse_Notetags_TraitObjects'](_0xf7f882);},VisuMZ['BattleCore'][_0x5e79d1(0x93f)]=VisuMZ['ParseSkillNotetags'],VisuMZ[_0x5e79d1(0x93f)]=function(_0x2d886b){const _0x3d782b=_0x5e79d1;VisuMZ[_0x3d782b(0x57e)][_0x3d782b(0x93f)]&&VisuMZ[_0x3d782b(0x57e)][_0x3d782b(0x93f)][_0x3d782b(0x695)](this,_0x2d886b),VisuMZ[_0x3d782b(0x57e)]['Parse_Notetags_Action'](_0x2d886b),VisuMZ['BattleCore'][_0x3d782b(0x61b)](_0x2d886b);},VisuMZ['BattleCore'][_0x5e79d1(0xb88)]=VisuMZ[_0x5e79d1(0xb88)],VisuMZ[_0x5e79d1(0xb88)]=function(_0x39cec8){const _0xaaf30d=_0x5e79d1;VisuMZ[_0xaaf30d(0x57e)][_0xaaf30d(0xb88)]&&VisuMZ[_0xaaf30d(0x57e)][_0xaaf30d(0xb88)][_0xaaf30d(0x695)](this,_0x39cec8),VisuMZ[_0xaaf30d(0x57e)][_0xaaf30d(0x86b)](_0x39cec8),VisuMZ['BattleCore'][_0xaaf30d(0x61b)](_0x39cec8);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x714)]=VisuMZ['ParseWeaponNotetags'],VisuMZ[_0x5e79d1(0x714)]=function(_0x11b235){const _0x257df8=_0x5e79d1;VisuMZ[_0x257df8(0x57e)]['ParseWeaponNotetags']&&VisuMZ['BattleCore'][_0x257df8(0x714)][_0x257df8(0x695)](this,_0x11b235),VisuMZ[_0x257df8(0x57e)][_0x257df8(0xca5)](_0x11b235);},VisuMZ[_0x5e79d1(0x57e)]['ParseArmorNotetags']=VisuMZ[_0x5e79d1(0x8e1)],VisuMZ['ParseArmorNotetags']=function(_0x1b451c){const _0x574a65=_0x5e79d1;VisuMZ[_0x574a65(0x57e)][_0x574a65(0x8e1)]&&VisuMZ[_0x574a65(0x57e)][_0x574a65(0x8e1)]['call'](this,_0x1b451c),VisuMZ[_0x574a65(0x57e)][_0x574a65(0xca5)](_0x1b451c);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x527)]=VisuMZ[_0x5e79d1(0x527)],VisuMZ[_0x5e79d1(0x527)]=function(_0x5e658d){const _0x46852a=_0x5e79d1;VisuMZ[_0x46852a(0x57e)]['ParseEnemyNotetags']&&VisuMZ[_0x46852a(0x57e)]['ParseEnemyNotetags'][_0x46852a(0x695)](this,_0x5e658d),VisuMZ[_0x46852a(0x57e)][_0x46852a(0xca5)](_0x5e658d);},VisuMZ['BattleCore'][_0x5e79d1(0xa02)]=VisuMZ[_0x5e79d1(0xa02)],VisuMZ[_0x5e79d1(0xa02)]=function(_0x1c7b10){const _0x481b6=_0x5e79d1;VisuMZ[_0x481b6(0x57e)][_0x481b6(0xa02)]&&VisuMZ['BattleCore']['ParseStateNotetags']['call'](this,_0x1c7b10),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x1c7b10),VisuMZ[_0x481b6(0x57e)][_0x481b6(0x6f8)](_0x1c7b10);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x86b)]=function(_0xc13cfc){const _0x2f0759=_0x5e79d1,_0x89ce13=['PreApplyJS','PostApplyJS','PreDamageJS',_0x2f0759(0x421),_0x2f0759(0xbff),_0x2f0759(0x46c),_0x2f0759(0x51a),'PostEndActionJS'];for(const _0x18a09b of _0x89ce13){VisuMZ[_0x2f0759(0x57e)][_0x2f0759(0x443)](_0xc13cfc,_0x18a09b);}const _0x3cc5ba=_0xc13cfc[_0x2f0759(0x85e)];_0x3cc5ba[_0x2f0759(0xcd4)](/<ALWAYS CRITICAL/i)&&(_0xc13cfc[_0x2f0759(0x6e4)][_0x2f0759(0x7d4)]=!![]),_0x3cc5ba[_0x2f0759(0xcd4)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0xc13cfc[_0x2f0759(0x4e5)]=Math[_0x2f0759(0x9db)](0x1,Number(RegExp['$1']))),_0x3cc5ba[_0x2f0759(0xcd4)](/<TARGET:[ ](.*)>/i)&&(_0xc13cfc['scope']=String(RegExp['$1'])[_0x2f0759(0xcde)]()[_0x2f0759(0xacc)]());},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xca5)]=function(_0x179c76){const _0x1660a7=_0x5e79d1,_0x4efd02=[_0x1660a7(0x7c3),_0x1660a7(0x297),_0x1660a7(0x237),_0x1660a7(0x748),_0x1660a7(0x74a),'PostApplyAsTargetJS','PreDamageAsTargetJS',_0x1660a7(0x9c1),'PreStartActionJS',_0x1660a7(0x46c),'PreEndActionJS','PostEndActionJS',_0x1660a7(0xb4a),_0x1660a7(0x799),_0x1660a7(0x770),_0x1660a7(0x2b1),_0x1660a7(0xa32),_0x1660a7(0x22f),_0x1660a7(0x600),_0x1660a7(0xbac),_0x1660a7(0x900),_0x1660a7(0x8ed),_0x1660a7(0x307),_0x1660a7(0xa6a),_0x1660a7(0x24c),_0x1660a7(0x3e4)];for(const _0x3c71b8 of _0x4efd02){VisuMZ[_0x1660a7(0x57e)][_0x1660a7(0x443)](_0x179c76,_0x3c71b8);}const _0xfae34b=[_0x1660a7(0x847),_0x1660a7(0x561),_0x1660a7(0xc63),_0x1660a7(0xc41),_0x1660a7(0x687)];for(const _0x4737e6 of _0xfae34b){VisuMZ[_0x1660a7(0x57e)][_0x1660a7(0x97a)](_0x179c76,_0x4737e6);}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x61b)]=function(_0x121d58){const _0x52e4ad=_0x5e79d1,_0x4b978d=_0x121d58[_0x52e4ad(0x85e)];if(_0x4b978d[_0x52e4ad(0xcd4)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x2b0b1b=String(RegExp['$1']),_0x18aeec=VisuMZ['BattleCore']['createKeyJS'](_0x121d58,_0x52e4ad(0xa47));VisuMZ[_0x52e4ad(0x57e)][_0x52e4ad(0x455)](_0x2b0b1b,_0x18aeec);}if(_0x4b978d[_0x52e4ad(0xcd4)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x5a83ba=String(RegExp['$1']),_0x46429c=VisuMZ['BattleCore']['createKeyJS'](_0x121d58,'CommandVisible');VisuMZ['BattleCore'][_0x52e4ad(0x1c5)](_0x5a83ba,_0x46429c);}},VisuMZ[_0x5e79d1(0x57e)]['JS']={},VisuMZ['BattleCore'][_0x5e79d1(0x443)]=function(_0x41f77d,_0x9cc2a8){const _0x400fe0=_0x5e79d1,_0x5a8175=_0x41f77d[_0x400fe0(0x85e)];if(_0x5a8175['match'](VisuMZ[_0x400fe0(0x57e)]['RegExp'][_0x9cc2a8])){const _0x5b6c25=RegExp['$1'],_0x1b4cb5=_0x400fe0(0x6a7)[_0x400fe0(0x2a0)](_0x5b6c25),_0x4b6678=VisuMZ['BattleCore'][_0x400fe0(0x402)](_0x41f77d,_0x9cc2a8);VisuMZ[_0x400fe0(0x57e)]['JS'][_0x4b6678]=new Function(_0x1b4cb5);}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x402)]=function(_0x56cb54,_0x35763d){const _0xb659c2=_0x5e79d1;if(VisuMZ[_0xb659c2(0x402)])return VisuMZ[_0xb659c2(0x402)](_0x56cb54,_0x35763d);let _0x28ac04='';if($dataActors[_0xb659c2(0x9fb)](_0x56cb54))_0x28ac04='Actor-%1-%2'['format'](_0x56cb54['id'],_0x35763d);if($dataClasses[_0xb659c2(0x9fb)](_0x56cb54))_0x28ac04='Class-%1-%2'[_0xb659c2(0x2a0)](_0x56cb54['id'],_0x35763d);if($dataSkills[_0xb659c2(0x9fb)](_0x56cb54))_0x28ac04=_0xb659c2(0xaf3)['format'](_0x56cb54['id'],_0x35763d);if($dataItems[_0xb659c2(0x9fb)](_0x56cb54))_0x28ac04=_0xb659c2(0x77c)[_0xb659c2(0x2a0)](_0x56cb54['id'],_0x35763d);if($dataWeapons[_0xb659c2(0x9fb)](_0x56cb54))_0x28ac04='Weapon-%1-%2'[_0xb659c2(0x2a0)](_0x56cb54['id'],_0x35763d);if($dataArmors[_0xb659c2(0x9fb)](_0x56cb54))_0x28ac04='Armor-%1-%2'[_0xb659c2(0x2a0)](_0x56cb54['id'],_0x35763d);if($dataEnemies['includes'](_0x56cb54))_0x28ac04=_0xb659c2(0x68e)['format'](_0x56cb54['id'],_0x35763d);if($dataStates['includes'](_0x56cb54))_0x28ac04=_0xb659c2(0x29d)[_0xb659c2(0x2a0)](_0x56cb54['id'],_0x35763d);return _0x28ac04;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x455)]=function(_0x5ec78c,_0x13a68a){const _0x14ad20=_0x5e79d1,_0x35a867=_0x14ad20(0xcdd)[_0x14ad20(0x2a0)](_0x5ec78c);VisuMZ['BattleCore']['JS'][_0x13a68a]=new Function(_0x35a867);},VisuMZ[_0x5e79d1(0x57e)]['createCommandVisibleJS']=function(_0x3d776a,_0x309ac8){const _0x2638c7=_0x5e79d1,_0x26e39f='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x2638c7(0x2a0)](_0x3d776a);VisuMZ[_0x2638c7(0x57e)]['JS'][_0x309ac8]=new Function(_0x26e39f);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x97a)]=function(_0x512e8d,_0x26db67){const _0x5b19ff=_0x5e79d1,_0xd5edba=_0x512e8d[_0x5b19ff(0x85e)];if(_0xd5edba[_0x5b19ff(0xcd4)](VisuMZ[_0x5b19ff(0x57e)][_0x5b19ff(0x9fe)][_0x26db67])){const _0x58913d=RegExp['$1'],_0x22efd9=_0x5b19ff(0x4ed)[_0x5b19ff(0x2a0)](_0x58913d),_0x25f7e7=VisuMZ[_0x5b19ff(0x57e)]['createKeyJS'](_0x512e8d,_0x26db67);VisuMZ[_0x5b19ff(0x57e)]['JS'][_0x25f7e7]=new Function(_0x22efd9);}},VisuMZ['BattleCore'][_0x5e79d1(0x6f8)]=function(_0x384ad1){const _0x4d71a4=_0x5e79d1;_0x384ad1[_0x4d71a4(0x24b)]='-';const _0x4ef248=_0x384ad1[_0x4d71a4(0x85e)];_0x4ef248['match'](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x384ad1[_0x4d71a4(0x24b)]=String(RegExp['$1'])[_0x4d71a4(0xacc)]()),_0x4ef248[_0x4d71a4(0xcd4)](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x384ad1[_0x4d71a4(0x4fc)]=String(RegExp['$1'])['trim']()),_0x4ef248[_0x4d71a4(0xcd4)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING)>/i)&&(_0x384ad1['excludeListing']=!![]);},TextManager['autoBattle']=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0xb54)][_0x5e79d1(0xb5f)],TextManager['autoBattleStart']=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0xa79)][_0x5e79d1(0xb63)],TextManager[_0x5e79d1(0xb62)]=VisuMZ['BattleCore'][_0x5e79d1(0xc89)]['AutoBattle']['StyleName'],TextManager[_0x5e79d1(0x26a)]=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['HpGauge']['Name'],ColorManager['getColor']=function(_0x9736d4){const _0x4fb1ce=_0x5e79d1;return _0x9736d4=String(_0x9736d4),_0x9736d4[_0x4fb1ce(0xcd4)](/#(.*)/i)?'#%1'[_0x4fb1ce(0x2a0)](String(RegExp['$1'])):this[_0x4fb1ce(0x909)](Number(_0x9736d4));},DataManager[_0x5e79d1(0xc6c)]=function(_0x4ff49a){const _0x53f4ab=_0x5e79d1;if(_0x4ff49a[_0x53f4ab(0x85e)][_0x53f4ab(0xcd4)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0xe94760=String(RegExp['$1'])['toUpperCase']()[_0x53f4ab(0xacc)]();if(_0xe94760===_0x53f4ab(0xcb6))return _0x53f4ab(0xcb6);if(VisuMZ[_0x53f4ab(0xa0d)][_0xe94760])return _0xe94760;}const _0x2be338=VisuMZ[_0x53f4ab(0x57e)][_0x53f4ab(0xc89)][_0x53f4ab(0xb4c)][_0x53f4ab(0xafd)][_0x53f4ab(0xcde)]()['trim']();if(VisuMZ['DamageStyles'][_0x2be338])return _0x2be338;return _0x53f4ab(0xcb6);},DataManager[_0x5e79d1(0x66f)]=function(_0x57c3dd){const _0x20d767=_0x5e79d1;_0x57c3dd=_0x57c3dd[_0x20d767(0xcde)]()[_0x20d767(0xacc)](),this['_stypeIDs']=this[_0x20d767(0x35f)]||{};if(this[_0x20d767(0x35f)][_0x57c3dd])return this[_0x20d767(0x35f)][_0x57c3dd];for(let _0x3c988b=0x1;_0x3c988b<0x64;_0x3c988b++){if(!$dataSystem[_0x20d767(0x492)][_0x3c988b])continue;let _0xe7b1eb=$dataSystem[_0x20d767(0x492)][_0x3c988b][_0x20d767(0xcde)]()[_0x20d767(0xacc)]();_0xe7b1eb=_0xe7b1eb[_0x20d767(0x4f6)](/\x1I\[(\d+)\]/gi,''),_0xe7b1eb=_0xe7b1eb[_0x20d767(0x4f6)](/\\I\[(\d+)\]/gi,''),this[_0x20d767(0x35f)][_0xe7b1eb]=_0x3c988b;}return this[_0x20d767(0x35f)][_0x57c3dd]||0x0;},DataManager[_0x5e79d1(0xc6f)]=function(_0x889f64){const _0x4d302a=_0x5e79d1;_0x889f64=_0x889f64[_0x4d302a(0xcde)]()['trim'](),this[_0x4d302a(0x8a9)]=this['_skillIDs']||{};if(this[_0x4d302a(0x8a9)][_0x889f64])return this[_0x4d302a(0x8a9)][_0x889f64];for(const _0x4e4d12 of $dataSkills){if(!_0x4e4d12)continue;this[_0x4d302a(0x8a9)][_0x4e4d12[_0x4d302a(0x66e)]['toUpperCase']()['trim']()]=_0x4e4d12['id'];}return this['_skillIDs'][_0x889f64]||0x0;},DataManager[_0x5e79d1(0xb47)]=function(_0x308738){const _0x31a96b=_0x5e79d1;_0x308738=_0x308738[_0x31a96b(0xcde)]()['trim'](),this[_0x31a96b(0x929)]=this[_0x31a96b(0x929)]||{};if(this['_enemyIDs'][_0x308738])return this[_0x31a96b(0x929)][_0x308738];for(const _0x1a4f6f of $dataEnemies){if(!_0x1a4f6f)continue;this[_0x31a96b(0x929)][_0x1a4f6f['name']['toUpperCase']()['trim']()]=_0x1a4f6f['id'];}return this['_enemyIDs'][_0x308738]||0x0;},DataManager[_0x5e79d1(0x462)]=function(_0x905ea1){const _0x444a87=_0x5e79d1;_0x905ea1=_0x905ea1[_0x444a87(0xcde)]()[_0x444a87(0xacc)](),this[_0x444a87(0xa05)]=this[_0x444a87(0xa05)]||{};if(this[_0x444a87(0xa05)][_0x905ea1])return this[_0x444a87(0xa05)][_0x905ea1];for(let _0x147e2e=0x1;_0x147e2e<0x64;_0x147e2e++){if(!$dataSystem[_0x444a87(0xc43)][_0x147e2e])continue;let _0x138513=$dataSystem[_0x444a87(0xc43)][_0x147e2e]['toUpperCase']()[_0x444a87(0xacc)]();_0x138513=_0x138513['replace'](/\x1I\[(\d+)\]/gi,''),_0x138513=_0x138513[_0x444a87(0x4f6)](/\\I\[(\d+)\]/gi,''),this[_0x444a87(0xa05)][_0x138513]=_0x147e2e;}return this[_0x444a87(0xa05)][_0x444a87(0x99a)]=0x0,this[_0x444a87(0xa05)][_0x905ea1]||0x0;},DataManager[_0x5e79d1(0x964)]=function(_0x54517c){const _0x2e4aa3=_0x5e79d1,_0x515d26=_0x2e4aa3(0x21c);let _0x534940=_0x54517c[_0x2e4aa3(0xae7)],_0xbcbd8f=_0x54517c[_0x2e4aa3(0x66e)];const _0x28a531=_0x54517c[_0x2e4aa3(0x85e)];return _0x28a531[_0x2e4aa3(0xcd4)](/<DISPLAY ICON: (\d+)>/i)&&(_0x534940=Number(RegExp['$1'])),_0x28a531['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0xbcbd8f=String(RegExp['$1'])),_0x515d26[_0x2e4aa3(0x2a0)](_0x534940,_0xbcbd8f);},DataManager[_0x5e79d1(0x33e)]=function(_0x37d663){const _0x50d966=_0x5e79d1;return _0x37d663[_0x50d966(0x85e)][_0x50d966(0xcd4)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x37d663[_0x50d966(0x66e)];},DataManager['battleCommandIcon']=function(_0x217313){const _0x447c17=_0x5e79d1;return _0x217313[_0x447c17(0x85e)][_0x447c17(0xcd4)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x217313[_0x447c17(0xae7)];},DataManager[_0x5e79d1(0x68d)]=function(_0x329bab){const _0x286321=_0x5e79d1,_0x6032fd=$dataEnemies[_0x329bab];if(_0x6032fd){if(_0x6032fd[_0x286321(0x85e)][_0x286321(0xcd4)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x246ef2=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x286321(0x9b8)](''),_0x1f53cf=this['processRandomizedData'](_0x246ef2);_0x329bab=this[_0x286321(0xb47)](_0x1f53cf)||_0x329bab,_0x329bab=DataManager[_0x286321(0x68d)](_0x329bab);}}return _0x329bab;},DataManager[_0x5e79d1(0xaff)]=function(_0x5f0a56){const _0x5b0138=_0x5e79d1;let _0x4075f0=0x0;const _0x358607={};for(const _0x1281a7 of _0x5f0a56){if(_0x1281a7['match'](/(.*):[ ](\d+)/i)){const _0x51a965=String(RegExp['$1'])['trim'](),_0x1d6eb5=Number(RegExp['$2']);_0x358607[_0x51a965]=_0x1d6eb5,_0x4075f0+=_0x1d6eb5;}else{if(_0x1281a7[_0x5b0138(0xcd4)](/(.*):[ ](\d+\.?\d+)/i)){const _0x156f15=String(RegExp['$1'])['trim'](),_0x3d2e34=Number(RegExp['$2']);_0x358607[_0x156f15]=_0x3d2e34,_0x4075f0+=_0x3d2e34;}else _0x1281a7!==''&&(_0x358607[_0x1281a7]=0x1,_0x4075f0++);}}if(_0x4075f0<=0x0)return'';let _0x1fcae7=Math[_0x5b0138(0xc61)]()*_0x4075f0;for(const _0xa098ae in _0x358607){_0x1fcae7-=_0x358607[_0xa098ae];if(_0x1fcae7<=0x0)return _0xa098ae;}return'';},DataManager[_0x5e79d1(0x2da)]=function(_0x16e566){const _0x3eee13=_0x5e79d1;if(!_0x16e566)return![];if(!VisuMZ[_0x3eee13(0x57e)][_0x3eee13(0xc89)][_0x3eee13(0x37e)][_0x3eee13(0x824)])return![];if(_0x16e566[_0x3eee13(0x85e)][_0x3eee13(0xcd4)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x16e566[_0x3eee13(0x85e)][_0x3eee13(0xcd4)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x3d9be0 of _0x16e566[_0x3eee13(0x498)]){if(!_0x3d9be0)continue;if(_0x3d9be0[_0x3eee13(0xbe2)]===Game_Action[_0x3eee13(0xa71)])return!![];}return![];},DataManager[_0x5e79d1(0xac4)]=function(_0x20375a){const _0x35ae42=_0x5e79d1,_0x3d235d=$dataTroops[_0x20375a];if(!_0x3d235d)return'';let _0x2343bc='';_0x2343bc+=_0x3d235d['name'];for(const _0x71241c of _0x3d235d[_0x35ae42(0xc1e)]){for(const _0x2d37f6 of _0x71241c[_0x35ae42(0x69f)]){[0x6c,0x198][_0x35ae42(0x9fb)](_0x2d37f6[_0x35ae42(0xbe2)])&&(_0x2343bc+='\x0a',_0x2343bc+=_0x2d37f6[_0x35ae42(0x702)][0x0]);}}return _0x2343bc;},ConfigManager[_0x5e79d1(0x32c)]=ConfigManager[_0x5e79d1(0x32c)]??![],ConfigManager[_0x5e79d1(0x9d3)]=ConfigManager[_0x5e79d1(0x9d3)]??![],ConfigManager[_0x5e79d1(0x26a)]=ConfigManager['visualHpGauge']??!![],VisuMZ['BattleCore'][_0x5e79d1(0x952)]=ConfigManager[_0x5e79d1(0x677)],ConfigManager[_0x5e79d1(0x677)]=function(){const _0x33cfca=_0x5e79d1,_0x888c83=VisuMZ['BattleCore'][_0x33cfca(0x952)]['call'](this);return _0x888c83[_0x33cfca(0x32c)]=this[_0x33cfca(0x32c)],_0x888c83[_0x33cfca(0x9d3)]=this[_0x33cfca(0x9d3)],_0x888c83['visualHpGauge']=this[_0x33cfca(0x26a)],_0x888c83;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x215)]=ConfigManager[_0x5e79d1(0x231)],ConfigManager[_0x5e79d1(0x231)]=function(_0xe74c9d){const _0x23d674=_0x5e79d1;VisuMZ[_0x23d674(0x57e)][_0x23d674(0x215)]['call'](this,_0xe74c9d),_0x23d674(0x32c)in _0xe74c9d?this[_0x23d674(0x32c)]=_0xe74c9d[_0x23d674(0x32c)]:this[_0x23d674(0x32c)]=![],_0x23d674(0x9d3)in _0xe74c9d?this['autoBattleUseSkills']=_0xe74c9d[_0x23d674(0x9d3)]:this[_0x23d674(0x9d3)]=![],'visualHpGauge'in _0xe74c9d?this[_0x23d674(0x26a)]=_0xe74c9d[_0x23d674(0x26a)]:this[_0x23d674(0x26a)]=!![];},ImageManager[_0x5e79d1(0x5a5)]=ImageManager['svActorHorzCells']||0x9,ImageManager[_0x5e79d1(0x605)]=ImageManager[_0x5e79d1(0x605)]||0x6,VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x938)]=BattleManager['setup'],BattleManager[_0x5e79d1(0x45d)]=function(_0x246be7,_0xc8fab3,_0x401794){const _0x1dcd89=_0x5e79d1;VisuMZ[_0x1dcd89(0x57e)][_0x1dcd89(0x938)]['call'](this,_0x246be7,_0xc8fab3,_0x401794),this[_0x1dcd89(0x9ce)]={};},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x5f9)]=BattleManager['initMembers'],BattleManager[_0x5e79d1(0x70d)]=function(){const _0x1273b1=_0x5e79d1;VisuMZ[_0x1273b1(0x57e)]['BattleManager_initMembers'][_0x1273b1(0x695)](this),this['_forcedBattlers']=[];},BattleManager[_0x5e79d1(0x654)]=function(){const _0x38f2df=_0x5e79d1;if(!SceneManager[_0x38f2df(0x6a6)]())return;const _0x1662ea=SceneManager[_0x38f2df(0xc59)][_0x38f2df(0x2cf)];if(_0x1662ea)_0x1662ea[_0x38f2df(0x269)]();},BattleManager[_0x5e79d1(0xad8)]=function(){const _0x7037c2=_0x5e79d1;if(BattleManager[_0x7037c2(0xc70)]())return _0x7037c2(0x8b7);return _0x7037c2(0xb89);},BattleManager[_0x5e79d1(0x23c)]=function(_0xbb9702){const _0x2fbfe7=_0x5e79d1;return _0xbb9702=_0xbb9702[_0x2fbfe7(0xcde)]()[_0x2fbfe7(0xacc)](),this[_0x2fbfe7(0xad8)]()===_0xbb9702;},BattleManager['isDTB']=function(){const _0x159c65=_0x5e79d1;return this[_0x159c65(0x23c)]('DTB');},BattleManager[_0x5e79d1(0xadb)]=function(){const _0x2a0f7a=_0x5e79d1;return this[_0x2a0f7a(0xaf9)]();},BattleManager[_0x5e79d1(0x3da)]=function(){return!this['isTurnBased']();},BattleManager[_0x5e79d1(0x4c6)]=function(){const _0x25d8b9=_0x5e79d1;return!this[_0x25d8b9(0xadb)]()&&!this[_0x25d8b9(0x3da)]();},BattleManager['getBattlerFromKey']=function(_0x34fd58){const _0x142acf=_0x5e79d1;this[_0x142acf(0x9ce)]=this[_0x142acf(0x9ce)]||{};if(this[_0x142acf(0x9ce)][_0x34fd58]!==undefined)return this[_0x142acf(0x9ce)][_0x34fd58];this[_0x142acf(0x9ce)][_0x34fd58]=null;const _0x55700b=this['allBattleMembers'](),_0x5db666=_0x55700b['find'](_0x5d442d=>_0x5d442d[_0x142acf(0x5e5)]()===_0x34fd58);if(_0x5db666)this[_0x142acf(0x9ce)][_0x34fd58]=_0x5db666;return this['_battlerKeyCache'][_0x34fd58];},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x5e5)]=function(){const _0x38872a=_0x5e79d1;return _0x38872a(0x225)[_0x38872a(0x2a0)](this['isActor']()?'actor':'enemy',this[_0x38872a(0x66e)]()+'-'+(this[_0x38872a(0x2ff)]()?this['actorId']():this[_0x38872a(0x972)]()));},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xb51)]=function(_0x4618c7){const _0x5bd28b=_0x5e79d1;if(this[_0x5bd28b(0x9fd)]!=='')return;typeof _0x4618c7===_0x5bd28b(0xad1)?this[_0x5bd28b(0x9fd)]=_0x4618c7[_0x5bd28b(0xbee)]()[_0x5bd28b(0xacc)]():this['_targetBattlerKey']=_0x4618c7[_0x5bd28b(0x5e5)]();},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x608)]=function(){const _0x26d70d=_0x5e79d1;return[this[_0x26d70d(0x693)]()];},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x693)]=function(){const _0x528bf8=_0x5e79d1,_0x46f56b=this[_0x528bf8(0x9fd)]||'',_0x1c7423=BattleManager[_0x528bf8(0x2a4)](_0x46f56b);if(!_0x1c7423)return this['getBattlerKeyTargetReplacement']();if(!_0x1c7423[_0x528bf8(0xc5e)]())return this[_0x528bf8(0xba3)]();return _0x1c7423;},Game_Action[_0x5e79d1(0x3a9)]['getBattlerKeyTargetReplacement']=function(){const _0x4d9ca5=_0x5e79d1,_0x2e9e50=this[_0x4d9ca5(0x9fd)];return _0x2e9e50[_0x4d9ca5(0xcd4)](/ACTOR/i)?this[_0x4d9ca5(0xa93)]()[_0x4d9ca5(0x999)]():this[_0x4d9ca5(0x412)]()[_0x4d9ca5(0x999)]();},BattleManager[_0x5e79d1(0xa2c)]=function(){const _0x2d0baf=_0x5e79d1;return this[_0x2d0baf(0xc4c)]()[_0x2d0baf(0x984)](_0x2cd06a=>_0x2cd06a['isSelected']());},BattleManager[_0x5e79d1(0x8c4)]=function(_0x3e6d8a){const _0xe1d2cf=_0x5e79d1;_0x3e6d8a==='BattleVictoryJS'&&(this[_0xe1d2cf(0x371)]=!![]),$gameParty['processBattleCoreJS'](_0x3e6d8a),$gameTroop[_0xe1d2cf(0x8c4)](_0x3e6d8a);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x9aa)]=BattleManager[_0x5e79d1(0x50d)],BattleManager[_0x5e79d1(0x50d)]=function(){const _0x1b33a2=_0x5e79d1;this[_0x1b33a2(0x1de)]=![],this[_0x1b33a2(0x8f7)]=ConfigManager[_0x1b33a2(0x32c)],this[_0x1b33a2(0x371)]=![],this[_0x1b33a2(0x8c4)](_0x1b33a2(0xb4a)),VisuMZ[_0x1b33a2(0x57e)][_0x1b33a2(0x9aa)]['call'](this),this['processBattleCoreJS'](_0x1b33a2(0x799));},BattleManager['processPostBattleCommonEvents']=function(_0x17155e){const _0x944ff8=_0x5e79d1,_0x536a74=VisuMZ[_0x944ff8(0x57e)][_0x944ff8(0xc89)][_0x944ff8(0x368)];_0x17155e!=='EscapeFail'&&_0x536a74[_0x944ff8(0x224)]&&VisuMZ[_0x944ff8(0x57e)]['CheckMapBattleEventValid'](_0x536a74[_0x944ff8(0x224)])&&$gameTemp[_0x944ff8(0x92c)](_0x536a74[_0x944ff8(0x224)]);const _0x4e1690=_0x944ff8(0x1d5)['format'](_0x17155e);_0x536a74[_0x4e1690]&&VisuMZ['BattleCore'][_0x944ff8(0xb57)](_0x536a74[_0x4e1690])&&$gameTemp[_0x944ff8(0x92c)](_0x536a74[_0x4e1690]);},VisuMZ['BattleCore']['BattleManager_abort']=BattleManager[_0x5e79d1(0xc1a)],BattleManager[_0x5e79d1(0xc1a)]=function(){const _0x5fd3a0=_0x5e79d1;VisuMZ[_0x5fd3a0(0x57e)][_0x5fd3a0(0x2d0)]['call'](this),SceneManager['isSceneBattle']()&&BattleManager[_0x5fd3a0(0x5ce)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x966)]=BattleManager[_0x5e79d1(0x25b)],BattleManager[_0x5e79d1(0x25b)]=function(){const _0x46cb5f=_0x5e79d1;if(this[_0x46cb5f(0x6e5)]==='turn'){if($gameTemp['isCommonEventReserved']())return![];}return VisuMZ['BattleCore'][_0x46cb5f(0x966)][_0x46cb5f(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc66)]=BattleManager[_0x5e79d1(0x28f)],BattleManager[_0x5e79d1(0x28f)]=function(){const _0x44f1b5=_0x5e79d1;this['_endingBattle']=!![],this[_0x44f1b5(0x8c4)](_0x44f1b5(0xa32)),VisuMZ['BattleCore'][_0x44f1b5(0xc66)]['call'](this),this[_0x44f1b5(0xa58)]('Victory');},VisuMZ['BattleCore']['BattleManager_processAbort']=BattleManager[_0x5e79d1(0x4ec)],BattleManager[_0x5e79d1(0x4ec)]=function(){const _0x113cbe=_0x5e79d1;this[_0x113cbe(0x371)]=!![],VisuMZ[_0x113cbe(0x57e)][_0x113cbe(0x557)][_0x113cbe(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2bb)]=BattleManager[_0x5e79d1(0x5d6)],BattleManager[_0x5e79d1(0x5d6)]=function(){const _0x1d47ef=_0x5e79d1;this[_0x1d47ef(0x371)]=!![],this[_0x1d47ef(0x8c4)](_0x1d47ef(0x22f)),VisuMZ[_0x1d47ef(0x57e)]['BattleManager_processDefeat'][_0x1d47ef(0x695)](this),this[_0x1d47ef(0xa58)](_0x1d47ef(0x84c));},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x495)]=BattleManager[_0x5e79d1(0x894)],BattleManager[_0x5e79d1(0x894)]=function(_0x3faaec){const _0xf2567=_0x5e79d1;this[_0xf2567(0x1de)]=!![],this[_0xf2567(0x8f7)]=![],this[_0xf2567(0x8c4)](_0xf2567(0x770)),VisuMZ['BattleCore']['BattleManager_endBattle'][_0xf2567(0x695)](this,_0x3faaec),this[_0xf2567(0x8c4)](_0xf2567(0x2b1));},VisuMZ[_0x5e79d1(0x57e)]['BattleManager_startTurn']=BattleManager[_0x5e79d1(0x36a)],BattleManager[_0x5e79d1(0x36a)]=function(){const _0x275455=_0x5e79d1;if(this['isTurnBased']())this[_0x275455(0x8c4)](_0x275455(0x900));VisuMZ[_0x275455(0x57e)]['BattleManager_startTurn'][_0x275455(0x695)](this);if(this[_0x275455(0xadb)]())this['processBattleCoreJS'](_0x275455(0x8ed));},BattleManager['processTurn']=function(){const _0x44bdfe=_0x5e79d1,_0x4f28b1=this[_0x44bdfe(0x5c2)],_0x819263=_0x4f28b1[_0x44bdfe(0xc09)]();_0x819263?(_0x819263[_0x44bdfe(0x959)](),_0x819263[_0x44bdfe(0x65c)]()?(this[_0x44bdfe(0x5b6)](),_0x4f28b1['removeCurrentAction']()):(_0x4f28b1[_0x44bdfe(0x1ec)](),this[_0x44bdfe(0xb49)]())):(this[_0x44bdfe(0xb49)](),this[_0x44bdfe(0x5c2)]=null);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x9c6)]=BattleManager[_0x5e79d1(0x5b6)],BattleManager['startAction']=function(){const _0x2d1b3d=_0x5e79d1,_0x10fc41=this[_0x2d1b3d(0x5c2)]['currentAction'](),_0x2fc4ba=this[_0x2d1b3d(0x5c2)];_0x10fc41&&_0x10fc41[_0x2d1b3d(0x9cd)]()===_0x2fc4ba&&_0x10fc41[_0x2d1b3d(0xc9d)](_0x2d1b3d(0xbff)),VisuMZ[_0x2d1b3d(0x57e)][_0x2d1b3d(0x9c6)][_0x2d1b3d(0x695)](this),_0x10fc41&&_0x10fc41[_0x2d1b3d(0x9cd)]()===_0x2fc4ba&&_0x10fc41['actionBattleCoreJS']('PostStartActionJS');},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x21f)]=BattleManager[_0x5e79d1(0xb49)],BattleManager[_0x5e79d1(0xb49)]=function(){const _0x3a1f18=_0x5e79d1,_0x46b82b=this['_action'],_0x43e6d1=this[_0x3a1f18(0x5c2)];_0x46b82b&&_0x46b82b!==this[_0x3a1f18(0xc4d)]&&_0x46b82b[_0x3a1f18(0x9cd)]()===_0x43e6d1&&_0x46b82b[_0x3a1f18(0xc9d)](_0x3a1f18(0x51a)),this[_0x3a1f18(0x5c2)]?VisuMZ[_0x3a1f18(0x57e)][_0x3a1f18(0x21f)][_0x3a1f18(0x695)](this):this['_phase']=_0x3a1f18(0x49b),_0x46b82b&&_0x46b82b!==this['_lastAction']&&_0x46b82b[_0x3a1f18(0x9cd)]()===_0x43e6d1&&_0x46b82b[_0x3a1f18(0xc9d)](_0x3a1f18(0x49d)),this[_0x3a1f18(0x8ab)](this[_0x3a1f18(0xc4c)]()),this[_0x3a1f18(0xc4d)]=this[_0x3a1f18(0x1fb)];},BattleManager[_0x5e79d1(0x8ab)]=function(_0x11fb2d){const _0x58182d=_0x5e79d1;for(const _0xda919 of _0x11fb2d){if(!_0xda919)continue;if(!_0xda919['battler']())continue;_0xda919[_0x58182d(0x949)]()['refreshMotion']();}},BattleManager[_0x5e79d1(0x360)]=function(){const _0x5202cd=_0x5e79d1;!this[_0x5202cd(0x556)][_0x5202cd(0x635)]()&&this['endAction']();},Game_Battler['prototype'][_0x5e79d1(0x414)]=function(){const _0x343fbd=_0x5e79d1;this['clearResult']();if(Imported[_0x343fbd(0xa5b)]){const _0x2cccac=VisuMZ[_0x343fbd(0x375)]['Settings']['States'];_0x2cccac&&_0x2cccac[_0x343fbd(0x5fe)]===![]&&this['removeStatesAuto'](0x1);}else this[_0x343fbd(0xcc7)](0x1);this['removeBuffsAuto']();},BattleManager[_0x5e79d1(0x67a)]=function(){const _0xe5e3ed=_0x5e79d1;this['_escapeRatio']=VisuMZ[_0xe5e3ed(0x57e)][_0xe5e3ed(0xc89)][_0xe5e3ed(0x368)]['CalcEscapeRatioJS'][_0xe5e3ed(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)]['BattleManager_onEscapeSuccess']=BattleManager[_0x5e79d1(0xa10)],BattleManager[_0x5e79d1(0xa10)]=function(){const _0x589cd4=_0x5e79d1;this['processBattleCoreJS'](_0x589cd4(0x600)),BattleManager[_0x589cd4(0x29c)][_0x589cd4(0xc02)](),VisuMZ[_0x589cd4(0x57e)]['BattleManager_onEscapeSuccess'][_0x589cd4(0x695)](this),this['processPostBattleCommonEvents'](_0x589cd4(0xb38));},VisuMZ[_0x5e79d1(0x57e)]['BattleManager_onEscapeFailure']=BattleManager[_0x5e79d1(0xbd9)],BattleManager[_0x5e79d1(0xbd9)]=function(){const _0x369311=_0x5e79d1;this['processBattleCoreJS'](_0x369311(0xbac));const _0x382c2b=this[_0x369311(0x2b4)];VisuMZ[_0x369311(0x57e)][_0x369311(0x246)]['call'](this),this[_0x369311(0x2b4)]=_0x382c2b+VisuMZ[_0x369311(0x57e)]['Settings'][_0x369311(0x368)]['CalcEscapeRaiseJS'][_0x369311(0x695)](this),this[_0x369311(0xbe1)]=![],this[_0x369311(0xa58)](_0x369311(0x2f8));},BattleManager[_0x5e79d1(0x7d7)]=function(){const _0xb133e0=_0x5e79d1;let _0x338f5c=![];if(this[_0xb133e0(0x902)]())for(const _0x406adb of $gameTroop[_0xb133e0(0xbf7)]()){this['_logWindow']['push'](_0xb133e0(0x979),TextManager[_0xb133e0(0xcf0)][_0xb133e0(0x2a0)](_0x406adb)),this[_0xb133e0(0x556)][_0xb133e0(0x68a)](_0xb133e0(0xb68)),_0x338f5c=!![];}if(this['_preemptive'])this[_0xb133e0(0x556)][_0xb133e0(0x68a)](_0xb133e0(0x979),TextManager[_0xb133e0(0x37b)][_0xb133e0(0x2a0)]($gameParty['name']())),this['_logWindow'][_0xb133e0(0x68a)](_0xb133e0(0xb68));else this[_0xb133e0(0x5b8)]&&(this[_0xb133e0(0x556)][_0xb133e0(0x68a)](_0xb133e0(0x979),TextManager['surprise'][_0xb133e0(0x2a0)]($gameParty[_0xb133e0(0x66e)]())),this[_0xb133e0(0x556)]['push'](_0xb133e0(0xb68)));_0x338f5c&&(this[_0xb133e0(0x556)][_0xb133e0(0x68a)]('wait'),this[_0xb133e0(0x556)][_0xb133e0(0x68a)](_0xb133e0(0x438))),this[_0xb133e0(0xc70)]()&&this[_0xb133e0(0x61e)]()&&(this[_0xb133e0(0x5a8)]=![]);},BattleManager[_0x5e79d1(0x902)]=function(){const _0x41a69a=_0x5e79d1;if(BattleManager['_autoBattle'])return![];return VisuMZ['BattleCore'][_0x41a69a(0xc89)][_0x41a69a(0xb2e)]['EmergeText'];},VisuMZ['BattleCore'][_0x5e79d1(0x90d)]=BattleManager['startInput'],BattleManager[_0x5e79d1(0xc9a)]=function(){const _0x19fe1d=_0x5e79d1;VisuMZ[_0x19fe1d(0x57e)][_0x19fe1d(0x90d)][_0x19fe1d(0x695)](this),this[_0x19fe1d(0xaf9)]()&&this[_0x19fe1d(0x61e)]()&&!this['_surprise']&&$gameParty[_0x19fe1d(0x378)]()&&this[_0x19fe1d(0x4d1)]();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x3a6cfd=_0x5e79d1;return VisuMZ[_0x3a6cfd(0x57e)][_0x3a6cfd(0xc89)][_0x3a6cfd(0xb54)][_0x3a6cfd(0x9d7)];},BattleManager[_0x5e79d1(0x45f)]=function(){const _0x2d04a3=_0x5e79d1;this[_0x2d04a3(0x6df)]()&&this['selectNextCommand']();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x5e3)]=Scene_Battle['prototype'][_0x5e79d1(0xba6)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xba6)]=function(){const _0x14be66=_0x5e79d1;VisuMZ[_0x14be66(0x57e)][_0x14be66(0x5e3)][_0x14be66(0x695)](this),BattleManager[_0x14be66(0xc70)]()&&BattleManager['_tpbNeedsPartyCommand']&&(BattleManager[_0x14be66(0x5a8)]=![],this[_0x14be66(0x862)]());},BattleManager[_0x5e79d1(0x44b)]=function(_0x1a0c73,_0x2491b3,_0x370659){const _0x5d9779=_0x5e79d1;if(!_0x370659)return;if(!_0x1a0c73)return;if(!_0x2491b3)return;const _0x175243=this[_0x5d9779(0x1fb)];this[_0x5d9779(0x1fb)]=new Game_Action(_0x1a0c73);if(DataManager['isItem'](_0x370659))this[_0x5d9779(0x1fb)][_0x5d9779(0x38e)](_0x370659['id']);if(DataManager[_0x5d9779(0x241)](_0x370659))this['_action'][_0x5d9779(0xc3b)](_0x370659['id']);if(this[_0x5d9779(0x1fb)]['item']())BattleManager['invokeAction'](_0x1a0c73,_0x2491b3);this[_0x5d9779(0x1fb)]=_0x175243;},BattleManager[_0x5e79d1(0xcb3)]=function(_0xccba4f,_0x53b9ae){const _0x53ca1f=_0x5e79d1;this['_action'][_0x53ca1f(0x5db)]=_0x53b9ae,this[_0x53ca1f(0x556)]['displayReflection'](_0x53b9ae),this['_logWindow'][_0x53ca1f(0x877)](_0xccba4f,this['_action']),this[_0x53ca1f(0x1fb)]['apply'](_0xccba4f),this[_0x53ca1f(0x556)][_0x53ca1f(0x736)](_0xccba4f,_0xccba4f);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x1cb)]=BattleManager[_0x5e79d1(0x829)],BattleManager['makeActionOrders']=function(){const _0x358209=_0x5e79d1;VisuMZ['BattleCore'][_0x358209(0x1cb)][_0x358209(0x695)](this),this[_0x358209(0x243)]=this['_actionBattlers'][_0x358209(0x984)](_0x4d65fb=>_0x4d65fb&&_0x4d65fb[_0x358209(0x4ba)]());},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x96a)]=BattleManager[_0x5e79d1(0x6c7)],BattleManager['updatePhase']=function(_0x4a3c32){const _0x2c605a=_0x5e79d1;if(this[_0x2c605a(0x6e5)]==='custom')this[_0x2c605a(0x6c4)]();else this['_phase']==='forceAction'?this[_0x2c605a(0x5e6)]():VisuMZ[_0x2c605a(0x57e)][_0x2c605a(0x96a)]['call'](this,_0x4a3c32);},BattleManager[_0x5e79d1(0xbef)]=function(){const _0x581d6b=_0x5e79d1;this[_0x581d6b(0x98a)]=this[_0x581d6b(0x4a6)]['slice'](0x0),this[_0x581d6b(0x39a)]=0x0,this[_0x581d6b(0x6ee)]=this[_0x581d6b(0x98a)][0x0]||null,this['_phase']=_0x581d6b(0x74b);},BattleManager[_0x5e79d1(0x6c4)]=function(){const _0x18b9b8=_0x5e79d1;!this['updateEventMain']()&&!this[_0x18b9b8(0x556)][_0x18b9b8(0x635)]()&&(this[_0x18b9b8(0x6e5)]=_0x18b9b8(0x6a0));},BattleManager[_0x5e79d1(0x9c7)]=function(_0x3d4374){const _0x5893a6=_0x5e79d1;this[_0x5893a6(0x243)][_0x5893a6(0x9b8)](_0x3d4374);if(_0x3d4374===this[_0x5893a6(0x5c2)])return;const _0x11ccff=JsonEx['makeDeepCopy'](_0x3d4374[_0x5893a6(0xc09)]());this[_0x5893a6(0x482)][_0x5893a6(0x68a)]([_0x3d4374,_0x11ccff]);},BattleManager[_0x5e79d1(0x788)]=function(){},BattleManager[_0x5e79d1(0x1c6)]=function(){const _0x5f17ef=_0x5e79d1;if(this['isTpb']())this[_0x5f17ef(0x6e5)]=_0x5f17ef(0x49b);else this[_0x5f17ef(0x482)][_0x5f17ef(0xc35)]>0x0?this[_0x5f17ef(0x6e5)]=_0x5f17ef(0x49b):this[_0x5f17ef(0xc9a)]();},BattleManager[_0x5e79d1(0x6b9)]=function(){const _0x484ff5=_0x5e79d1,_0xaccffb=this[_0x484ff5(0x5c2)];_0xaccffb&&this[_0x484ff5(0xc70)]()&&_0xaccffb[_0x484ff5(0xa8e)]('undecided');for(;;){const _0x4a8eb8=this[_0x484ff5(0x717)]();if(!_0x4a8eb8)return null;if(_0x4a8eb8[_0x484ff5(0xcc2)]()&&_0x4a8eb8['isAlive']())return _0x4a8eb8;}},BattleManager[_0x5e79d1(0x717)]=function(){const _0x186498=_0x5e79d1;if(this[_0x186498(0x482)][_0x186498(0xc35)]>0x0){const _0x28e819=this[_0x186498(0x482)][_0x186498(0xa91)](),_0x2cf744=_0x28e819[0x0];return _0x2cf744[_0x186498(0xa99)]=_0x2cf744[_0x186498(0xa99)]||[],_0x2cf744[_0x186498(0xa99)][0x0]=_0x28e819[0x1],_0x2cf744;}else return this['_actionBattlers'][_0x186498(0xa91)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x384)]=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x9c7)],Game_Battler[_0x5e79d1(0x3a9)]['forceAction']=function(_0x18cdf5,_0x3f34c1){const _0xb3978d=_0x5e79d1;VisuMZ[_0xb3978d(0x57e)]['Game_Battler_forceAction'][_0xb3978d(0x695)](this,_0x18cdf5,_0x3f34c1),this['_actions'][this[_0xb3978d(0xa99)][_0xb3978d(0xc35)]-0x1][_0xb3978d(0x3cc)]=!![];},Game_Interpreter['prototype'][_0x5e79d1(0x58e)]=function(_0x4fe4a3){const _0x4a18d4=_0x5e79d1;return this[_0x4a18d4(0x535)](_0x4fe4a3[0x0],_0x4fe4a3[0x1],_0x21b1c5=>{const _0x4c33ad=_0x4a18d4;!_0x21b1c5[_0x4c33ad(0xa3c)]()&&(_0x21b1c5[_0x4c33ad(0x9c7)](_0x4fe4a3[0x2],_0x4fe4a3[0x3]),BattleManager[_0x4c33ad(0x9c7)](_0x21b1c5));}),!![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x26d)]=Game_Battler['prototype'][_0x5e79d1(0x765)],Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x765)]=function(){const _0x19eb36=_0x5e79d1;VisuMZ[_0x19eb36(0x57e)][_0x19eb36(0x26d)]['call'](this),this[_0x19eb36(0xa99)][_0x19eb36(0xc35)]<=0x0&&(this[_0x19eb36(0x3a3)]=Number[_0x19eb36(0x8d0)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x521eb2=_0x5e79d1;if(VisuMZ[_0x521eb2(0x57e)][_0x521eb2(0xc89)]['Damage'][_0x521eb2(0x71d)]??!![])return![];return SceneManager[_0x521eb2(0x6a6)]()&&this[_0x521eb2(0x371)];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xbba)]=BattleManager[_0x5e79d1(0x4d1)],BattleManager[_0x5e79d1(0x4d1)]=function(){const _0xce15fe=_0x5e79d1;this[_0xce15fe(0xc70)]()?this[_0xce15fe(0x92e)]():VisuMZ[_0xce15fe(0x57e)]['BattleManager_selectNextCommand'][_0xce15fe(0x695)](this);},BattleManager[_0x5e79d1(0x92e)]=function(){const _0x615ec1=_0x5e79d1;if(this[_0x615ec1(0x83c)]){if(this['_currentActor'][_0x615ec1(0x4d1)]())return;this['finishActorInput'](),this[_0x615ec1(0x516)](),!this[_0x615ec1(0x5c2)]&&!this[_0x615ec1(0x83c)]&&SceneManager[_0x615ec1(0xc59)][_0x615ec1(0x2ac)]();}else!this['_subject']&&this[_0x615ec1(0x8d9)]();},BattleManager['checkTpbInputClose']=function(){const _0x3ba71e=_0x5e79d1;(!this[_0x3ba71e(0x6df)]()||this[_0x3ba71e(0xa59)]())&&(this[_0x3ba71e(0x814)]&&(!$gameParty[_0x3ba71e(0xb9d)]()[_0x3ba71e(0x9fb)](this[_0x3ba71e(0x814)])&&(this[_0x3ba71e(0x814)]=null)),!this[_0x3ba71e(0x814)]?(this[_0x3ba71e(0x280)](),this[_0x3ba71e(0x83c)]=null,this[_0x3ba71e(0xbe1)]=![]):this['revertTpbCachedActor']());},BattleManager['revertTpbCachedActor']=function(){const _0x5123a7=_0x5e79d1;!$gameParty['battleMembers']()['includes'](this['_tpbSceneChangeCacheActor'])&&(this[_0x5123a7(0x814)]=null),this[_0x5123a7(0x814)]?(this['_currentActor']=this[_0x5123a7(0x814)],this['_currentActor'][_0x5123a7(0x606)]=_0x5123a7(0xcae),this[_0x5123a7(0xbe1)]=!![],this[_0x5123a7(0x814)]=null):(this['cancelActorInput'](),this['_currentActor']=null,this[_0x5123a7(0xbe1)]=![]);},VisuMZ[_0x5e79d1(0x57e)]['BattleManager_isTpbMainPhase']=BattleManager[_0x5e79d1(0x26b)],BattleManager[_0x5e79d1(0x26b)]=function(){const _0x5d9701=_0x5e79d1;return this[_0x5d9701(0x6e5)]===_0x5d9701(0x74b)?this[_0x5d9701(0x914)]():VisuMZ[_0x5d9701(0x57e)]['BattleManager_isTpbMainPhase'][_0x5d9701(0x695)](this);},BattleManager[_0x5e79d1(0x914)]=function(){const _0x4898a0=_0x5e79d1;return this[_0x4898a0(0x216)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x1dc)]=BattleManager[_0x5e79d1(0x280)],BattleManager[_0x5e79d1(0x280)]=function(){const _0x10a10b=_0x5e79d1;this['isTpb']()&&this[_0x10a10b(0x6e5)]===_0x10a10b(0xa9e)&&(this[_0x10a10b(0x83c)]=null),VisuMZ[_0x10a10b(0x57e)][_0x10a10b(0x1dc)][_0x10a10b(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x521)]=BattleManager['inputtingAction'],BattleManager['inputtingAction']=function(){const _0x4b137b=_0x5e79d1,_0xabfddb=this['_currentActor'];if(_0xabfddb&&!_0xabfddb[_0x4b137b(0x7a3)]()){const _0x2aee9d=_0xabfddb[_0x4b137b(0x409)];_0xabfddb[_0x4b137b(0xa99)][_0x2aee9d]=new Game_Action(_0xabfddb);}return VisuMZ[_0x4b137b(0x57e)][_0x4b137b(0x521)][_0x4b137b(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x9cf)]=BattleManager['checkSubstitute'],BattleManager[_0x5e79d1(0x55e)]=function(_0x35c5b9){const _0x26f5f0=_0x5e79d1;if(this[_0x26f5f0(0x1fb)][_0x26f5f0(0xcc1)]())return![];return VisuMZ['BattleCore']['BattleManager_checkSubstitute'][_0x26f5f0(0x695)](this,_0x35c5b9);},SceneManager[_0x5e79d1(0x6a6)]=function(){const _0x5ea7c8=_0x5e79d1;return this[_0x5ea7c8(0xc59)]&&this[_0x5ea7c8(0xc59)][_0x5ea7c8(0x54e)]===Scene_Battle;},SceneManager[_0x5e79d1(0x44d)]=function(){const _0xe92118=_0x5e79d1;return Spriteset_Battle[_0xe92118(0x3a9)][_0xe92118(0x4a8)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x181ab6=_0x5e79d1;if(SceneManager[_0x181ab6(0x923)](Scene_Options))return!![];return![];},SceneManager[_0x5e79d1(0x6fe)]=function(){const _0x1b0fad=_0x5e79d1;if(SceneManager[_0x1b0fad(0x56f)](Scene_Options))return!![];return![];},SceneManager[_0x5e79d1(0xc2a)]=function(_0x51da9b){const _0x57d12f=_0x5e79d1;if(!SceneManager[_0x57d12f(0x6a6)]())return!![];const _0x5e64b6=[_0x57d12f(0x761),_0x57d12f(0xb74),_0x57d12f(0x77d)];return _0x5e64b6['includes'](_0x51da9b['name']);},VisuMZ['BattleCore'][_0x5e79d1(0x666)]=SceneManager['push'],SceneManager['push']=function(_0x505abd){const _0x750369=_0x5e79d1;if(!SceneManager[_0x750369(0xc2a)](_0x505abd))return this['displayBattleCoreTransitionErrorMsg'](_0x505abd);VisuMZ['BattleCore'][_0x750369(0x666)][_0x750369(0x695)](this,_0x505abd);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x15726b){const _0x5b80bb=_0x5e79d1;if(!$gameTemp[_0x5b80bb(0xc9c)]())return;if(this[_0x5b80bb(0x34f)])return;this[_0x5b80bb(0x34f)]=!![];let _0x41bd9a='';_0x41bd9a+=_0x5b80bb(0x6c8),_0x41bd9a+='\x20to\x20%1\x20midbattle.'['format'](_0x15726b[_0x5b80bb(0x66e)]),alert(_0x41bd9a);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x4f0)]=Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)],Game_Temp[_0x5e79d1(0x3a9)]['initialize']=function(){const _0x447a6f=_0x5e79d1;VisuMZ[_0x447a6f(0x57e)][_0x447a6f(0x4f0)][_0x447a6f(0x695)](this),this[_0x447a6f(0x846)]=[];},VisuMZ['BattleCore'][_0x5e79d1(0x745)]=Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0x301)],Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0x301)]=function(_0x661fc2,_0xa11d54,_0x38a23c){const _0x40df10=_0x5e79d1;_0x661fc2=_0x661fc2[_0x40df10(0x984)]((_0x1aa288,_0x5bf7e9,_0x1b6116)=>_0x1b6116['indexOf'](_0x1aa288)===_0x5bf7e9);SceneManager[_0x40df10(0x6a6)]()&&SceneManager[_0x40df10(0x44d)]()&&(_0x38a23c=!_0x38a23c);VisuMZ[_0x40df10(0x57e)][_0x40df10(0x745)][_0x40df10(0x695)](this,_0x661fc2,_0xa11d54,_0x38a23c);SceneManager[_0x40df10(0x6a6)]()&&BattleManager[_0x40df10(0x29c)][_0x40df10(0x81a)]();for(const _0x930092 of _0x661fc2){_0x930092&&_0x930092[_0x40df10(0x4cf)]&&_0x930092['isEnemy']()&&_0x930092[_0x40df10(0xa60)]();}},Game_Temp[_0x5e79d1(0x3a9)]['setLastPluginCommandInterpreter']=function(_0x365fa3){const _0x37bf89=_0x5e79d1;this[_0x37bf89(0x9a9)]=_0x365fa3;},Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0x4c9)]=function(){const _0x4edf31=_0x5e79d1;return this[_0x4edf31(0x9a9)];},Game_Temp[_0x5e79d1(0x3a9)]['clearForcedGameTroopSettingsBattleCore']=function(){this['_forcedBattleLayout']=undefined;},Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0x342)]=function(_0x1e8195){const _0x29ff6f=_0x5e79d1;$gameMap&&$dataMap&&$dataMap[_0x29ff6f(0x85e)]&&this[_0x29ff6f(0x464)]($dataMap[_0x29ff6f(0x85e)]);const _0x129b7e=$dataTroops[_0x1e8195];if(_0x129b7e){let _0x37b44b=DataManager['createTroopNote'](_0x129b7e['id']);this[_0x29ff6f(0x464)](_0x37b44b);}},Game_Temp['prototype']['parseForcedGameTroopSettingsBattleCore']=function(_0x2d1dd4){const _0x4c8e92=_0x5e79d1;if(!_0x2d1dd4)return;if(_0x2d1dd4['match'](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x37c3d7=String(RegExp['$1']);if(_0x37c3d7[_0x4c8e92(0xcd4)](/DEFAULT/i))this[_0x4c8e92(0x221)]=_0x4c8e92(0x5ab);else{if(_0x37c3d7['match'](/LIST/i))this[_0x4c8e92(0x221)]=_0x4c8e92(0x69f);else{if(_0x37c3d7['match'](/XP/i))this[_0x4c8e92(0x221)]='xp';else{if(_0x37c3d7[_0x4c8e92(0xcd4)](/PORTRAIT/i))this[_0x4c8e92(0x221)]=_0x4c8e92(0x2af);else{if(_0x37c3d7['match'](/BORDER/i))this[_0x4c8e92(0x221)]=_0x4c8e92(0x758);else{if(_0x37c3d7[_0x4c8e92(0xcd4)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x4c8e92(0x6d1)]?this[_0x4c8e92(0x221)]=_0x4c8e92(0x6cd):this[_0x4c8e92(0x221)]='default';else _0x37c3d7[_0x4c8e92(0xcd4)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x4c8e92(0xc48)]?this[_0x4c8e92(0x221)]='frontview_ui':this['_forcedBattleLayout']=_0x4c8e92(0x5ab));}}}}}}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x871)]=Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0xa78)],Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0xa78)]=function(_0x17cc76,_0x35578e){const _0x46f266=_0x5e79d1;SceneManager[_0x46f266(0x6a6)]()?this['requestBattleBalloon'](_0x17cc76,_0x35578e):VisuMZ[_0x46f266(0x57e)][_0x46f266(0x871)][_0x46f266(0x695)](this,_0x17cc76,_0x35578e);},Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0x855)]=function(_0x318a65,_0x385819){const _0x167002=_0x5e79d1,_0x1163e3={'target':_0x318a65,'balloonId':_0x385819};this['_battleBalloonQueue']=this['_battleBalloonQueue']||[],this[_0x167002(0x846)]['push'](_0x1163e3);},Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0x837)]=function(){const _0x3b5b9c=_0x5e79d1;return this['_battleBalloonQueue']=this[_0x3b5b9c(0x846)]||[],this[_0x3b5b9c(0x846)][_0x3b5b9c(0xa91)]();},Game_Temp[_0x5e79d1(0x3a9)][_0x5e79d1(0x8dd)]=function(){const _0x16370e=_0x5e79d1;this[_0x16370e(0x846)]=[];},Spriteset_Battle['prototype'][_0x5e79d1(0xa0e)]=function(){const _0x2e4979=_0x5e79d1;this[_0x2e4979(0xa45)]===undefined&&(this['_battleBalloonSprites']=[]);for(const _0x4b59c0 of this[_0x2e4979(0xa45)]){!_0x4b59c0[_0x2e4979(0x76d)]()&&this[_0x2e4979(0x6a5)](_0x4b59c0);}this[_0x2e4979(0x99e)]();},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x99e)]=function(){const _0x5e9256=_0x5e79d1;for(;;){const _0x34fb9a=$gameTemp[_0x5e9256(0x837)]();if(_0x34fb9a)this['createBattleBalloon'](_0x34fb9a);else break;}},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x73e)]=function(_0x102e89){const _0x27ccc0=_0x5e79d1,_0x181203=this[_0x27ccc0(0x334)](_0x102e89['target']);if(_0x181203){let _0xcd6849=null;Imported[_0x27ccc0(0x234)]&&Array[_0x27ccc0(0xac3)](_0x102e89[_0x27ccc0(0xa88)])?_0xcd6849=new Sprite_IconBalloon():_0xcd6849=new Sprite_Balloon(),_0xcd6849[_0x27ccc0(0x819)]=_0x102e89[_0x27ccc0(0x326)],_0xcd6849[_0x27ccc0(0x6ee)]=_0x181203,_0xcd6849[_0x27ccc0(0x6ee)][_0x27ccc0(0xc92)]=_0x181203,_0xcd6849[_0x27ccc0(0x45d)](_0x181203,_0x102e89[_0x27ccc0(0xa88)]),BattleManager[_0x27ccc0(0x3d6)](_0xcd6849),this[_0x27ccc0(0xa45)][_0x27ccc0(0x68a)](_0xcd6849);}},Spriteset_Battle[_0x5e79d1(0x3a9)]['removeBattleBalloon']=function(_0x43b5ff){const _0x24176a=_0x5e79d1;this[_0x24176a(0xa45)][_0x24176a(0x9b8)](_0x43b5ff),BattleManager[_0x24176a(0xa74)](_0x43b5ff),_0x43b5ff[_0x24176a(0x8b9)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xb0a)]=function(_0x398b7c,_0x9e66a8){},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x617)]=function(){return![];},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x6a8)]=function(){const _0xab23e5=_0x5e79d1;return this[_0xab23e5(0xa45)]=this[_0xab23e5(0xa45)]||[],this[_0xab23e5(0xa45)][_0xab23e5(0xc35)]>0x0;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x9c9)]=Game_System[_0x5e79d1(0x3a9)]['initialize'],Game_System[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(){const _0x593bc8=_0x5e79d1;VisuMZ[_0x593bc8(0x57e)][_0x593bc8(0x9c9)][_0x593bc8(0x695)](this),this[_0x593bc8(0xbce)]();},Game_System[_0x5e79d1(0x3a9)][_0x5e79d1(0xbce)]=function(){const _0x27ad09=_0x5e79d1;this['_defeatedEnemies']=this[_0x27ad09(0x3b0)]||[];},Game_System[_0x5e79d1(0x3a9)][_0x5e79d1(0x7a1)]=function(){const _0xe84f7c=_0x5e79d1;if(this[_0xe84f7c(0x3b0)]===undefined)this['initBattleCore']();return this[_0xe84f7c(0x3b0)];},Game_System[_0x5e79d1(0x3a9)][_0x5e79d1(0x98d)]=function(_0x1f0e21){const _0x3776d4=_0x5e79d1;if(this[_0x3776d4(0x3b0)]===undefined)this[_0x3776d4(0xbce)]();if(!_0x1f0e21)return;if(this[_0x3776d4(0x3b0)][_0x3776d4(0x9fb)](_0x1f0e21))return;this[_0x3776d4(0x3b0)][_0x3776d4(0x68a)](_0x1f0e21),this[_0x3776d4(0x3b0)]['sort']((_0x159129,_0x2c9a0f)=>_0x159129-_0x2c9a0f);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x33f)]=Game_BattlerBase[_0x5e79d1(0x3a9)]['addNewState'],Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x968)]=function(_0x5310ca){const _0x4135e2=_0x5e79d1,_0x2f2aff=this[_0x4135e2(0xc5e)](),_0x49be91=this[_0x4135e2(0x1e0)]();VisuMZ[_0x4135e2(0x57e)][_0x4135e2(0x33f)]['call'](this,_0x5310ca),this[_0x4135e2(0x4cf)]()&&_0x2f2aff&&this[_0x4135e2(0x5d8)]()&&(this['_visualHpGauge_JustDied']=!this['hasBeenDefeatedBefore'](),$gameSystem[_0x4135e2(0x98d)](this['enemyId']())),SceneManager[_0x4135e2(0x6a6)]()&&_0x49be91!==this[_0x4135e2(0x1e0)]()&&(this[_0x4135e2(0x949)]()&&this['battler']()['refreshMotion']());},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x595)]=function(){const _0x15413b=_0x5e79d1;return $gameSystem['getDefeatedEnemies']()[_0x15413b(0x9fb)](this['_enemyId']);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x750)]=Game_BattlerBase['prototype'][_0x5e79d1(0xa77)],Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0xa77)]=function(_0x511e81){const _0x3ed8c9=_0x5e79d1;VisuMZ['BattleCore'][_0x3ed8c9(0x750)]['call'](this,_0x511e81),this['isEnemy']()&&_0x511e81===this['deathStateId']()&&this[_0x3ed8c9(0xc5e)]()&&(this[_0x3ed8c9(0x5ee)]=![]),!this[_0x3ed8c9(0xb1c)]&&!this[_0x3ed8c9(0x807)]&&SceneManager[_0x3ed8c9(0x6a6)]()&&this[_0x3ed8c9(0x4bd)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x310)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x438)],Game_Action[_0x5e79d1(0x3a9)]['clear']=function(){const _0x3574d9=_0x5e79d1;VisuMZ['BattleCore'][_0x3574d9(0x310)][_0x3574d9(0x695)](this),this[_0x3574d9(0x463)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x3574d9(0x9ad)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x3574d9(0x589)]=_0x3574d9(0x5ab),this[_0x3574d9(0x930)]();},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x930)]=function(){const _0x2e400f=_0x5e79d1;this[_0x2e400f(0x9fd)]='';},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xa7b)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xce5)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xce5)]=function(_0x5eaa72){const _0x355634=_0x5e79d1;VisuMZ[_0x355634(0x57e)][_0x355634(0xa7b)][_0x355634(0x695)](this,_0x5eaa72),this[_0x355634(0x930)]();},VisuMZ['BattleCore'][_0x5e79d1(0x9f1)]=Game_Action[_0x5e79d1(0x3a9)]['setSkill'],Game_Action['prototype'][_0x5e79d1(0xc3b)]=function(_0x36839a){const _0x3aab3a=_0x5e79d1;VisuMZ[_0x3aab3a(0x57e)][_0x3aab3a(0x9f1)][_0x3aab3a(0x695)](this,_0x36839a),this[_0x3aab3a(0x930)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xb87)]=Game_Action[_0x5e79d1(0x3a9)]['setItem'],Game_Action['prototype'][_0x5e79d1(0x38e)]=function(_0x5726f9){const _0x3428fe=_0x5e79d1;VisuMZ[_0x3428fe(0x57e)]['Game_Action_setItem']['call'](this,_0x5726f9),this['clearTargetBattlerKey']();},Game_Action[_0x5e79d1(0x3a9)]['makeDamageValue']=function(_0x12f389,_0x425d81){const _0x6f835d=_0x5e79d1;return VisuMZ[_0x6f835d(0x57e)][_0x6f835d(0xc89)]['Damage']['OverallFormulaJS']['call'](this,_0x12f389,_0x425d81);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xb71)]=function(_0xe0b149,_0x92a9e2){const _0x416901=_0x5e79d1;return VisuMZ['BattleCore'][_0x416901(0xc89)][_0x416901(0xb4c)][_0x416901(0x422)][_0x416901(0x695)](this,_0xe0b149,_0x92a9e2);},Game_Action['prototype'][_0x5e79d1(0xafa)]=function(_0x4f88b9,_0x23a36b){const _0x36d1fc=_0x5e79d1;return VisuMZ[_0x36d1fc(0x57e)][_0x36d1fc(0xc89)][_0x36d1fc(0xb4c)]['GuardFormulaJS'][_0x36d1fc(0x695)](this,_0x4f88b9,_0x23a36b);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x3ec)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x311)],Game_Action[_0x5e79d1(0x3a9)]['itemHit']=function(_0x5cca4b){const _0x50d66a=_0x5e79d1,_0x5970ca=this[_0x50d66a(0x990)]()[_0x50d66a(0x85e)];if(_0x5970ca[_0x50d66a(0xcd4)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x5970ca['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x52a369=VisuMZ['BattleCore'][_0x50d66a(0x3ec)]['call'](this,_0x5cca4b);return _0x52a369=this['_multipliers'][_0x50d66a(0x5b2)]*_0x52a369+this[_0x50d66a(0x9ad)]['hitFlat'],$gameParty[_0x50d66a(0xb2d)]()&&(_0x52a369=this[_0x50d66a(0x986)](_0x52a369,_0x5cca4b)),_0x52a369;}}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x982)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x771)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x771)]=function(_0x2aa415){const _0x4bed22=_0x5e79d1;this[_0x4bed22(0x506)]=!![],VisuMZ[_0x4bed22(0x57e)][_0x4bed22(0x982)]['call'](this,_0x2aa415),this['_bypass_applyBattleCoreHitRateJS']=undefined;},Game_Action[_0x5e79d1(0x3a9)]['declareGlobalVariables']=function(_0x3cc575){const _0x588721=_0x5e79d1;window['action']=this,window['a']=this[_0x588721(0x9cd)](),window['b']=_0x3cc575,window[_0x588721(0x59a)]=this['subject'](),window[_0x588721(0x326)]=_0x3cc575,window[_0x588721(0x20b)]=this[_0x588721(0x990)](),window['skill']=this['item'](),window[_0x588721(0x990)]=this[_0x588721(0x990)]();},Game_Action[_0x5e79d1(0x3a9)]['clearGlobalVariables']=function(_0x527a08){const _0x5eb737=_0x5e79d1;window['action']=undefined,window['a']=undefined,window['b']=undefined,window[_0x5eb737(0x59a)]=undefined,window[_0x5eb737(0x326)]=undefined,window[_0x5eb737(0x20b)]=undefined,window[_0x5eb737(0x202)]=undefined,window[_0x5eb737(0x990)]=undefined;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x986)]=function(_0x3ee48d,_0x3e28ac){const _0x3a7a4a=_0x5e79d1;if(this[_0x3a7a4a(0x506)])return _0x3ee48d;this[_0x3a7a4a(0x3e0)](_0x3e28ac);if(this[_0x3a7a4a(0x990)]()){let _0x32b4ae=VisuMZ[_0x3a7a4a(0x57e)][_0x3a7a4a(0x402)](this[_0x3a7a4a(0x990)](),_0x3a7a4a(0x847));VisuMZ[_0x3a7a4a(0x57e)]['JS'][_0x32b4ae]&&(_0x3ee48d=VisuMZ[_0x3a7a4a(0x57e)]['JS'][_0x32b4ae][_0x3a7a4a(0x695)](this,this[_0x3a7a4a(0x9cd)](),_0x3e28ac,this[_0x3a7a4a(0x990)](),_0x3ee48d));}for(const _0x474ee6 of this[_0x3a7a4a(0x9cd)]()['traitObjects']()){if(!_0x474ee6)continue;key=VisuMZ[_0x3a7a4a(0x57e)]['createKeyJS'](_0x474ee6,_0x3a7a4a(0x561)),VisuMZ[_0x3a7a4a(0x57e)]['JS'][key]&&(_0x3ee48d=VisuMZ[_0x3a7a4a(0x57e)]['JS'][key]['call'](this,this[_0x3a7a4a(0x9cd)](),_0x3e28ac,this[_0x3a7a4a(0x990)](),_0x3ee48d));}for(const _0x5d64cf of _0x3e28ac[_0x3a7a4a(0x3b6)]()){if(!_0x5d64cf)continue;key=VisuMZ[_0x3a7a4a(0x57e)][_0x3a7a4a(0x402)](_0x5d64cf,'jsAccuracyAsTarget'),VisuMZ[_0x3a7a4a(0x57e)]['JS'][key]&&(_0x3ee48d=VisuMZ[_0x3a7a4a(0x57e)]['JS'][key][_0x3a7a4a(0x695)](this,this[_0x3a7a4a(0x9cd)](),_0x3e28ac,this['item'](),_0x3ee48d));}return this[_0x3a7a4a(0x5c5)](_0x3e28ac),_0x3ee48d;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x497)]=function(_0x4d41bd){const _0x18185f=_0x5e79d1;if(!this['item']()[_0x18185f(0x6e4)][_0x18185f(0x7d4)])return 0x0;let _0x3360f9=VisuMZ[_0x18185f(0x57e)][_0x18185f(0xc89)][_0x18185f(0xb4c)]['CriticalHitRateJS'][_0x18185f(0x695)](this,_0x4d41bd);return _0x3360f9=this['_multipliers']['criticalHitRate']*_0x3360f9+this[_0x18185f(0x9ad)]['criticalHitFlat'],$gameParty['inBattle']()&&(_0x3360f9=this[_0x18185f(0x445)](_0x3360f9,_0x4d41bd)),_0x3360f9;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x445)]=function(_0x25e735,_0x4a783d){const _0x40241e=_0x5e79d1;this[_0x40241e(0x3e0)](_0x4a783d),window[_0x40241e(0x8b5)]=_0x25e735;{const _0x21c71b=this[_0x40241e(0x9cd)]()[_0x40241e(0x3b6)]();for(const _0x126f0c of _0x21c71b){if(!_0x126f0c)continue;if(_0x126f0c['note'][_0x40241e(0xcd4)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0x19362b=String(RegExp['$1']);try{eval(_0x19362b);}catch(_0x4fb108){if($gameTemp[_0x40241e(0xc9c)]())console[_0x40241e(0x346)](_0x4fb108);}}}}{const _0x41f9a7=_0x4a783d[_0x40241e(0x3b6)]();for(const _0x29ccea of _0x41f9a7){if(!_0x29ccea)continue;if(_0x29ccea['note'][_0x40241e(0xcd4)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x110d2c=String(RegExp['$1']);try{eval(_0x110d2c);}catch(_0x2c1972){if($gameTemp['isPlaytest']())console[_0x40241e(0x346)](_0x2c1972);}}}}return _0x25e735=window['rate'],this[_0x40241e(0x5c5)](_0x4a783d),_0x25e735;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x445)]=function(_0x16afe8,_0x2f8a3d){const _0x498ad0=_0x5e79d1;this[_0x498ad0(0x3e0)](_0x2f8a3d);for(const _0x3dae20 of this[_0x498ad0(0x9cd)]()[_0x498ad0(0x3b6)]()){if(!_0x3dae20)continue;key=VisuMZ[_0x498ad0(0x57e)][_0x498ad0(0x402)](_0x3dae20,'jsCritRateAsUser'),VisuMZ[_0x498ad0(0x57e)]['JS'][key]&&(_0x16afe8=VisuMZ[_0x498ad0(0x57e)]['JS'][key][_0x498ad0(0x695)](this,this[_0x498ad0(0x9cd)](),_0x2f8a3d,this[_0x498ad0(0x990)](),_0x16afe8));}for(const _0x566869 of _0x2f8a3d['traitObjects']()){if(!_0x566869)continue;key=VisuMZ[_0x498ad0(0x57e)]['createKeyJS'](_0x566869,_0x498ad0(0x687)),VisuMZ['BattleCore']['JS'][key]&&(_0x16afe8=VisuMZ[_0x498ad0(0x57e)]['JS'][key][_0x498ad0(0x695)](this,this[_0x498ad0(0x9cd)](),_0x2f8a3d,this[_0x498ad0(0x990)](),_0x16afe8));}return this['clearGlobalVariables'](_0x2f8a3d),_0x16afe8;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xbbf)]=function(_0x327535){const _0x87cddd=_0x5e79d1;return _0x327535=VisuMZ['BattleCore'][_0x87cddd(0xc89)][_0x87cddd(0xb4c)][_0x87cddd(0x4ae)][_0x87cddd(0x695)](this,_0x327535),_0x327535=this[_0x87cddd(0x9ad)]['criticalDmgRate']*_0x327535+this[_0x87cddd(0x9ad)][_0x87cddd(0x5e7)],_0x327535;},VisuMZ['BattleCore'][_0x5e79d1(0x3cb)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x997)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x997)]=function(_0x11c5b2){const _0x44664d=_0x5e79d1;if(this[_0x44664d(0x589)]!==_0x44664d(0x5ab))return this[_0x44664d(0x46b)](_0x11c5b2);else return DataManager[_0x44664d(0xc6c)](this['item']())===_0x44664d(0xcb6)?VisuMZ[_0x44664d(0x57e)][_0x44664d(0x3cb)][_0x44664d(0x695)](this,_0x11c5b2):this[_0x44664d(0x1c7)](_0x11c5b2);},Game_Action['prototype']['setCustomDamageFormula']=function(_0x239bc6){this['_customDamageFormula']=_0x239bc6;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x46b)]=function(_0x4dff40){const _0xabb762=_0x5e79d1,_0x54912c=this['item'](),_0x1fc544=_0x54912c[_0xabb762(0x6e4)]['formula'];_0x54912c[_0xabb762(0x6e4)][_0xabb762(0x75e)]=this['_customDamageFormula'];let _0xa0c217=VisuMZ[_0xabb762(0x57e)][_0xabb762(0x3cb)]['call'](this,_0x4dff40);return _0x54912c[_0xabb762(0x6e4)][_0xabb762(0x75e)]=_0x1fc544,_0xa0c217;},Game_Action['prototype']['damageStyle']=function(){const _0x21659c=_0x5e79d1;if(this[_0x21659c(0x990)]()[_0x21659c(0x85e)]['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5268e7=String(RegExp['$1'])[_0x21659c(0xcde)]()[_0x21659c(0xacc)]();return _0x5268e7;}return _0x21659c(0xcb6);},Game_Action['prototype'][_0x5e79d1(0x1c7)]=function(_0x24f8b5){const _0x483d8d=_0x5e79d1,_0x1b24f8=DataManager[_0x483d8d(0xc6c)](this['item']()),_0x541677=VisuMZ[_0x483d8d(0xa0d)][_0x1b24f8];try{return _0x541677[_0x483d8d(0x78c)][_0x483d8d(0x695)](this,_0x24f8b5);}catch(_0x5cebef){if($gameTemp[_0x483d8d(0xc9c)]())console[_0x483d8d(0x346)](_0x5cebef);return VisuMZ['BattleCore'][_0x483d8d(0x3cb)][_0x483d8d(0x695)](this);}},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x356)]=function(_0x39e399,_0x5db7ac){const _0x59532e=_0x5e79d1;if(this['isCertainHit']())return _0x5db7ac;const _0x5ae02f=this[_0x59532e(0x9cd)](),_0xa353d7=_0x39e399;let _0xb80b89=[],_0x9297f8=[];_0xb80b89[_0x59532e(0x68a)](this['_armorPenetration']['arPenFlat'],this[_0x59532e(0x463)][_0x59532e(0x79e)]),_0x9297f8[_0x59532e(0x68a)](this[_0x59532e(0x463)]['arPenRate'],this[_0x59532e(0x463)][_0x59532e(0x362)]);const _0x482cf4=this[_0x59532e(0x8a8)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x5a8db1=this['isPhysical']()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x3faacf=this[_0x59532e(0x8a8)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x3bd06b=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0xb80b89=_0xb80b89[_0x59532e(0x960)](_0xa353d7[_0x59532e(0x3b6)]()[_0x59532e(0x343)](_0xab1901=>_0xab1901&&_0xab1901[_0x59532e(0x85e)]['match'](_0x482cf4)?Number(RegExp['$1']):0x0)),_0x9297f8=_0x9297f8[_0x59532e(0x960)](_0xa353d7[_0x59532e(0x3b6)]()[_0x59532e(0x343)](_0x1307be=>_0x1307be&&_0x1307be['note']['match'](_0x5a8db1)?Number(RegExp['$1'])/0x64:0x0)),_0xb80b89=_0xb80b89[_0x59532e(0x960)](_0x5ae02f[_0x59532e(0x3b6)]()[_0x59532e(0x343)](_0xdcf463=>_0xdcf463&&_0xdcf463[_0x59532e(0x85e)][_0x59532e(0xcd4)](_0x3faacf)?Number(RegExp['$1']):0x0)),_0x9297f8=_0x9297f8[_0x59532e(0x960)](_0x5ae02f['traitObjects']()[_0x59532e(0x343)](_0x21dece=>_0x21dece&&_0x21dece[_0x59532e(0x85e)]['match'](_0x3bd06b)?Number(RegExp['$1'])/0x64:0x0)),this[_0x59532e(0x990)]()[_0x59532e(0x85e)][_0x59532e(0xcd4)](_0x3faacf)&&_0xb80b89['push'](Number(RegExp['$1'])),this['item']()[_0x59532e(0x85e)]['match'](_0x3bd06b)&&_0x9297f8[_0x59532e(0x68a)](Number(RegExp['$1'])),_0x5db7ac=_0xb80b89[_0x59532e(0xc30)]((_0x494524,_0x3eb636)=>_0x494524-_0x3eb636,_0x5db7ac),_0x5db7ac>0x0&&(_0x5db7ac=_0x9297f8['reduce']((_0x1d2f8c,_0x499039)=>_0x1d2f8c*(0x1-_0x499039),_0x5db7ac)),_0x5db7ac;},VisuMZ['BattleCore'][_0x5e79d1(0x59c)]=Game_Action[_0x5e79d1(0x3a9)]['executeDamage'],Game_Action['prototype'][_0x5e79d1(0x766)]=function(_0x54d36d,_0x3648a2){const _0x531e0e=_0x5e79d1;_0x3648a2=_0x3648a2*this[_0x531e0e(0x9ad)][_0x531e0e(0xb20)],_0x3648a2+=this['_multipliers'][_0x531e0e(0x9c2)]*(_0x3648a2>=0x0?0x1:-0x1),_0x3648a2=this[_0x531e0e(0xb4f)](_0x531e0e(0x31b),_0x54d36d,_0x3648a2,![]),_0x3648a2=this['applyDamageCaps'](_0x3648a2),_0x3648a2>0x0?_0x3648a2=Math[_0x531e0e(0xb46)](_0x3648a2):_0x3648a2=Math[_0x531e0e(0x48d)](_0x3648a2),this[_0x531e0e(0x5c8)]=_0x3648a2,this[_0x531e0e(0xc3a)]=this[_0x531e0e(0xc3a)]||0x0,this[_0x531e0e(0xc3a)]+=_0x3648a2,VisuMZ[_0x531e0e(0x57e)][_0x531e0e(0x59c)]['call'](this,_0x54d36d,_0x3648a2),this[_0x531e0e(0xb4f)]('PostDamage%1JS',_0x54d36d,_0x3648a2,!![]);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xa96)]=function(_0xb4c2a0){const _0x546f26=_0x5e79d1;if(this[_0x546f26(0xbb2)]())return _0xb4c2a0;return _0xb4c2a0=this[_0x546f26(0x642)](_0xb4c2a0),_0xb4c2a0=this[_0x546f26(0x6fa)](_0xb4c2a0),_0xb4c2a0;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xbb2)]=function(){const _0x336e7f=_0x5e79d1,_0x22e6d9=/<BYPASS DAMAGE CAP>/i;if(this['item']()[_0x336e7f(0x85e)]['match'](_0x22e6d9))return!![];if(this[_0x336e7f(0x9cd)]()['traitObjects']()['some'](_0x31e5d1=>_0x31e5d1&&_0x31e5d1['note'][_0x336e7f(0xcd4)](_0x22e6d9)))return!![];return!VisuMZ[_0x336e7f(0x57e)][_0x336e7f(0xc89)][_0x336e7f(0xb4c)][_0x336e7f(0x240)];},Game_Action['prototype'][_0x5e79d1(0x642)]=function(_0x1a0a84){const _0x236d44=_0x5e79d1;if(!VisuMZ[_0x236d44(0x57e)][_0x236d44(0xc89)]['Damage'][_0x236d44(0x50c)])return _0x1a0a84;const _0x5176ac=/<BYPASS SOFT DAMAGE CAP>/i;if(this['item']()[_0x236d44(0x85e)][_0x236d44(0xcd4)](_0x5176ac))return _0x1a0a84;if(this['subject']()[_0x236d44(0x3b6)]()[_0x236d44(0xb7e)](_0x25ed58=>_0x25ed58&&_0x25ed58[_0x236d44(0x85e)][_0x236d44(0xcd4)](_0x5176ac)))return _0x1a0a84;const _0x4ba0fd=_0x1a0a84<0x0?-0x1:0x1;_0x1a0a84=Math[_0x236d44(0x7b9)](_0x1a0a84);let _0x4ec51b=this[_0x236d44(0x9cd)]()[_0x236d44(0xcd5)]();this[_0x236d44(0x990)]()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x4ec51b+=Number(RegExp['$1'])/0x64);_0x4ec51b=_0x4ec51b[_0x236d44(0x2a1)](0.01,0x1);const _0x3bfc0b=this[_0x236d44(0x686)](),_0x4ec943=_0x4ec51b*_0x3bfc0b;if(_0x1a0a84>_0x4ec943&&_0x3bfc0b>_0x4ec943){_0x1a0a84-=_0x4ec943;const _0x3f5c49=VisuMZ['BattleCore']['Settings'][_0x236d44(0xb4c)][_0x236d44(0x59b)],_0x5020ca=Math[_0x236d44(0x9db)](0x1-_0x1a0a84/((_0x3bfc0b-_0x4ec943)*_0x3f5c49+_0x1a0a84),0.01);_0x1a0a84*=_0x5020ca,_0x1a0a84+=_0x4ec943;}return _0x1a0a84*_0x4ba0fd;},Game_Action[_0x5e79d1(0x3a9)]['getHardDamageCap']=function(){const _0x8023fa=_0x5e79d1;return this[_0x8023fa(0x990)]()['note'][_0x8023fa(0xcd4)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()[_0x8023fa(0x99f)]();},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x6fa)]=function(_0x2c367a){const _0x213671=_0x5e79d1;let _0x59fdbf=this[_0x213671(0x686)]();return _0x2c367a[_0x213671(0x2a1)](-_0x59fdbf,_0x59fdbf);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x538)]=function(){const _0x520a08=_0x5e79d1;if(!this['item']())return![];if(!$gameParty[_0x520a08(0xb2d)]())return![];return(this[_0x520a08(0x990)]()[_0x520a08(0x85e)]||'')['match'](/<DISPERSE DAMAGE>/i);},Game_Action[_0x5e79d1(0x3a9)]['disperseDamage']=function(_0x1f821c){const _0x382bac=_0x5e79d1;if(this[_0x382bac(0x538)]()){let _0x1845bb=BattleManager['_targets'];_0x1f821c/=_0x1845bb[_0x382bac(0xc35)],this['isAttack']()&&(_0x1f821c*=this[_0x382bac(0x9cd)]()[_0x382bac(0x2df)]()+0x1),_0x1f821c=_0x1f821c>0x0?Math[_0x382bac(0xb46)](_0x1f821c):Math[_0x382bac(0x48d)](_0x1f821c);}return _0x1f821c;},VisuMZ['BattleCore']['Game_Action_makeDamageValueDisperse']=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x626)],Game_Action['prototype'][_0x5e79d1(0x626)]=function(_0x1c72b3,_0x3d9aa5){const _0x3a71ef=_0x5e79d1;let _0x4d7445=VisuMZ['BattleCore']['Game_Action_makeDamageValueDisperse']['call'](this,_0x1c72b3,_0x3d9aa5);return this[_0x3a71ef(0x2b9)](_0x4d7445);},Game_Action['prototype'][_0x5e79d1(0xbe5)]=function(_0x37bf98,_0x486199){const _0x5eec84=_0x5e79d1;let _0x2de079=(_0x37bf98[_0x5eec84(0x30f)]*_0x486199[_0x5eec84(0xbb7)]+_0x486199[_0x5eec84(0xa89)])*_0x37bf98[_0x5eec84(0x585)];_0x2de079=this[_0x5eec84(0x2b9)](_0x2de079),this[_0x5eec84(0x38f)]()&&(_0x2de079*=this['subject']()[_0x5eec84(0x55f)]),_0x2de079=Math['floor'](_0x2de079),_0x2de079!==0x0&&(_0x37bf98['gainHp'](_0x2de079),this[_0x5eec84(0x7cc)](_0x37bf98));},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xc3f)]=function(_0x47b874,_0x15f931){const _0x408ad8=_0x5e79d1;let _0x3dbd73=(_0x47b874['mmp']*_0x15f931['value1']+_0x15f931[_0x408ad8(0xa89)])*_0x47b874['rec'];_0x3dbd73=this[_0x408ad8(0x2b9)](_0x3dbd73),this[_0x408ad8(0x38f)]()&&(_0x3dbd73*=this['subject']()[_0x408ad8(0x55f)]),_0x3dbd73=Math[_0x408ad8(0x48d)](_0x3dbd73),_0x3dbd73!==0x0&&(_0x47b874['gainMp'](_0x3dbd73),this[_0x408ad8(0x7cc)](_0x47b874));},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x487)]=function(_0x2106cc,_0x1996bf){const _0x2db5ab=_0x5e79d1;let _0x16ae81=Math[_0x2db5ab(0x48d)](_0x1996bf[_0x2db5ab(0xbb7)]);_0x16ae81=this[_0x2db5ab(0x2b9)](_0x16ae81),_0x16ae81!==0x0&&(_0x2106cc[_0x2db5ab(0xc23)](_0x16ae81),this[_0x2db5ab(0x7cc)](_0x2106cc));},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xa61)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x35a)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x35a)]=function(_0x48ae4a){const _0xaf5630=_0x5e79d1;if(_0x48ae4a&&_0x48ae4a['isEnemy']())_0x48ae4a[_0xaf5630(0xa60)]();this['applyBattleCoreJS'](_0xaf5630(0x8d5),_0x48ae4a,0x0,!![]),VisuMZ[_0xaf5630(0x57e)]['Game_Action_apply'][_0xaf5630(0x695)](this,_0x48ae4a),this[_0xaf5630(0xb4f)](_0xaf5630(0x7b8),_0x48ae4a,this[_0xaf5630(0x5c8)]||0x0,!![]),this[_0xaf5630(0x3ad)](_0x48ae4a);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xb4f)]=function(_0x1ff55b,_0x5efb7d,_0x21337e,_0x170bc3){const _0x42694a=_0x5e79d1;if(this[_0x42694a(0x807)]||this['_tempActor'])return;_0x21337e=_0x21337e||0x0;const _0x10e60b=_0x21337e,_0x595c2a=VisuMZ[_0x42694a(0x57e)][_0x42694a(0xc89)]['Mechanics'],_0x1b04d1=_0x1ff55b[_0x42694a(0x2a0)]('');if(_0x595c2a[_0x1b04d1]){_0x21337e=_0x595c2a[_0x1b04d1][_0x42694a(0x695)](this,_0x21337e,_0x5efb7d);if(_0x170bc3)_0x21337e=_0x10e60b;}let _0x2ca1af=VisuMZ[_0x42694a(0x57e)][_0x42694a(0x402)](this[_0x42694a(0x990)](),_0x1ff55b[_0x42694a(0x2a0)](''));if(VisuMZ[_0x42694a(0x57e)]['JS'][_0x2ca1af]){_0x21337e=VisuMZ[_0x42694a(0x57e)]['JS'][_0x2ca1af][_0x42694a(0x695)](this,this[_0x42694a(0x9cd)](),_0x5efb7d,this['item'](),_0x21337e);if(_0x170bc3)_0x21337e=_0x10e60b;}for(const _0x349fd8 of this[_0x42694a(0x9cd)]()[_0x42694a(0x3b6)]()){if(!_0x349fd8)continue;_0x2ca1af=VisuMZ[_0x42694a(0x57e)]['createKeyJS'](_0x349fd8,_0x1ff55b[_0x42694a(0x2a0)]('AsUser'));if(VisuMZ[_0x42694a(0x57e)]['JS'][_0x2ca1af]){_0x21337e=VisuMZ[_0x42694a(0x57e)]['JS'][_0x2ca1af][_0x42694a(0x695)](this,this[_0x42694a(0x9cd)](),_0x5efb7d,_0x349fd8,_0x21337e);if(_0x170bc3)_0x21337e=_0x10e60b;}}for(const _0x4ac950 of _0x5efb7d[_0x42694a(0x3b6)]()){if(!_0x4ac950)continue;_0x2ca1af=VisuMZ[_0x42694a(0x57e)][_0x42694a(0x402)](_0x4ac950,_0x1ff55b['format'](_0x42694a(0x353)));if(VisuMZ[_0x42694a(0x57e)]['JS'][_0x2ca1af]){_0x21337e=VisuMZ[_0x42694a(0x57e)]['JS'][_0x2ca1af][_0x42694a(0x695)](this,this[_0x42694a(0x9cd)](),_0x5efb7d,_0x4ac950,_0x21337e);if(_0x170bc3)_0x21337e=_0x10e60b;}}return _0x21337e;},Game_Action[_0x5e79d1(0x3a9)]['actionBattleCoreJS']=function(_0x11beba){const _0x512abb=_0x5e79d1,_0x475115=this[_0x512abb(0xc3a)]||0x0,_0x32071f=VisuMZ[_0x512abb(0x57e)]['Settings'][_0x512abb(0x368)],_0x17dbdf=_0x11beba[_0x512abb(0x2a0)]('');_0x32071f[_0x17dbdf]&&_0x32071f[_0x17dbdf][_0x512abb(0x695)](this,_0x475115);let _0x29eda7=VisuMZ[_0x512abb(0x57e)]['createKeyJS'](this[_0x512abb(0x990)](),_0x11beba);VisuMZ[_0x512abb(0x57e)]['JS'][_0x29eda7]&&VisuMZ['BattleCore']['JS'][_0x29eda7][_0x512abb(0x695)](this,this[_0x512abb(0x9cd)](),this[_0x512abb(0x9cd)](),this[_0x512abb(0x990)](),_0x475115);for(const _0x4df83c of this[_0x512abb(0x9cd)]()[_0x512abb(0x3b6)]()){if(!_0x4df83c)continue;_0x29eda7=VisuMZ[_0x512abb(0x57e)]['createKeyJS'](_0x4df83c,_0x11beba),VisuMZ[_0x512abb(0x57e)]['JS'][_0x29eda7]&&VisuMZ['BattleCore']['JS'][_0x29eda7][_0x512abb(0x695)](this,this['subject'](),this[_0x512abb(0x9cd)](),_0x4df83c,_0x475115);}},Game_Action['prototype'][_0x5e79d1(0x85f)]=function(){const _0x4486fa=_0x5e79d1;return VisuMZ[_0x4486fa(0x57e)][_0x4486fa(0xc89)][_0x4486fa(0x368)]['CalcActionSpeedJS']['call'](this);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xabd)]=function(){const _0xc12367=_0x5e79d1;return VisuMZ[_0xc12367(0x57e)]['Settings'][_0xc12367(0x368)]['AllowRandomSpeed'];},Game_Action['prototype']['isCustomBattleScope']=function(){const _0x377504=_0x5e79d1;if(this[_0x377504(0x9fd)]===_0x377504(0xb95))return![];if(this['_targetBattlerKey']==='all\x20enemies')return![];if(!this[_0x377504(0x990)]())return![];return this[_0x377504(0x990)]()['note']['match'](/<JS TARGETS>/i);},Game_Action[_0x5e79d1(0x3a9)]['isBattleCoreTargetScope']=function(){const _0x570b9c=_0x5e79d1;if(this[_0x570b9c(0x9fd)]===_0x570b9c(0xb95))return![];if(this['_targetBattlerKey']===_0x570b9c(0x8de))return![];if(!this[_0x570b9c(0x20f)]&&this[_0x570b9c(0x9cd)]()[_0x570b9c(0x9e7)]())return![];if(this[_0x570b9c(0x694)]())return!![];if(!this[_0x570b9c(0x990)]())return![];return typeof this[_0x570b9c(0x990)]()[_0x570b9c(0x5ad)]===_0x570b9c(0xad1);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc25)]=Game_Action['prototype'][_0x5e79d1(0x82d)],Game_Action[_0x5e79d1(0x3a9)]['isForOpponent']=function(){const _0x5ad2bc=_0x5e79d1;if(this[_0x5ad2bc(0x9fd)]===_0x5ad2bc(0xb95))return![];if(this['_targetBattlerKey']===_0x5ad2bc(0x8de))return!![];return this[_0x5ad2bc(0x597)]()&&!this[_0x5ad2bc(0x694)]()?this[_0x5ad2bc(0xaa0)]():VisuMZ[_0x5ad2bc(0x57e)][_0x5ad2bc(0xc25)]['call'](this);},Game_Action['prototype'][_0x5e79d1(0xaa0)]=function(){const _0xfa0291=_0x5e79d1,_0x418ab0=String(this['item']()[_0xfa0291(0x5ad)]);if(_0x418ab0[_0xfa0291(0xcd4)](/ANY/i))return!![];return _0x418ab0[_0xfa0291(0xcd4)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2fe)]=Game_Action[_0x5e79d1(0x3a9)]['isForFriend'],Game_Action['prototype'][_0x5e79d1(0xcc1)]=function(){const _0x4bacb1=_0x5e79d1;if(this['_targetBattlerKey']==='all\x20actors')return!![];if(this[_0x4bacb1(0x9fd)]===_0x4bacb1(0x8de))return![];return this[_0x4bacb1(0x597)]()&&!this['isCustomBattleScope']()?this[_0x4bacb1(0x8d3)]():VisuMZ['BattleCore'][_0x4bacb1(0x2fe)][_0x4bacb1(0x695)](this);},Game_Action['prototype'][_0x5e79d1(0x8d3)]=function(){const _0x3764c9=_0x5e79d1,_0x229fdd=String(this['item']()[_0x3764c9(0x5ad)]);return _0x229fdd[_0x3764c9(0xcd4)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xc08)]=function(){const _0x4d9e85=_0x5e79d1;if(this[_0x4d9e85(0x597)]()&&!this['isCustomBattleScope']()){const _0xff184b=String(this[_0x4d9e85(0x990)]()['scope']);return _0xff184b[_0x4d9e85(0xcd4)](/(?:ENEMY|FOE)/i)&&_0xff184b[_0x4d9e85(0xcd4)](/OR/i)&&_0xff184b[_0x4d9e85(0xcd4)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x341)]=function(){const _0x536892=_0x5e79d1;if(this[_0x536892(0xc08)]()){const _0x516205=String(this[_0x536892(0x990)]()['scope']);if(_0x516205[_0x536892(0xcd4)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x843)]=function(){const _0x4e219a=_0x5e79d1;if(this[_0x4e219a(0xc08)]()){const _0x13d37d=String(this['item']()['scope']);if(_0x13d37d[_0x4e219a(0xcd4)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x5e79d1(0x57e)]['Game_Action_isForAliveFriend']=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x508)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x508)]=function(){const _0x7c22c9=_0x5e79d1;if(this['_targetBattlerKey']==='all\x20actors')return!![];return this[_0x7c22c9(0x597)]()&&!this[_0x7c22c9(0x694)]()?this['isForAliveFriendBattleCore']():VisuMZ[_0x7c22c9(0x57e)][_0x7c22c9(0x5da)][_0x7c22c9(0x695)](this);},VisuMZ['BattleCore']['Game_Action_isForDeadFriend']=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x575)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x575)]=function(){const _0x5eb074=_0x5e79d1;if(this[_0x5eb074(0x9fd)]===_0x5eb074(0xb95))return VisuMZ[_0x5eb074(0x57e)][_0x5eb074(0x3a4)][_0x5eb074(0x695)](this);return VisuMZ[_0x5eb074(0x57e)][_0x5eb074(0x3a4)][_0x5eb074(0x695)](this);},Game_Action['prototype'][_0x5e79d1(0x679)]=function(){const _0x59bc39=_0x5e79d1;if(this[_0x59bc39(0xc08)]())return!![];return![];},Game_Action[_0x5e79d1(0x3a9)]['isForNotUser']=function(){const _0x29ec64=_0x5e79d1;return this[_0x29ec64(0x990)]()&&this['item']()[_0x29ec64(0x85e)][_0x29ec64(0xcd4)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore'][_0x5e79d1(0xc87)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xc2e)],Game_Action[_0x5e79d1(0x3a9)]['isForOne']=function(){const _0x26a260=_0x5e79d1;if(this[_0x26a260(0x9fd)]===_0x26a260(0xb95))return![];if(this[_0x26a260(0x9fd)]===_0x26a260(0x8de))return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x26a260(0xa4f)]():VisuMZ[_0x26a260(0x57e)][_0x26a260(0xc87)][_0x26a260(0x695)](this);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xa4f)]=function(){const _0x1e5c0b=_0x5e79d1;if(this[_0x1e5c0b(0xc08)]())return!![];return![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc8a)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x6fb)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x6fb)]=function(){const _0xc705c=_0x5e79d1;if(this[_0xc705c(0x9fd)]===_0xc705c(0xb95))return![];if(this[_0xc705c(0x9fd)]===_0xc705c(0x8de))return![];return this[_0xc705c(0x597)]()&&!this['isCustomBattleScope']()?this[_0xc705c(0x31d)]():VisuMZ[_0xc705c(0x57e)][_0xc705c(0xc8a)][_0xc705c(0x695)](this);},Game_Action[_0x5e79d1(0x3a9)]['isForRandomBattleCore']=function(){const _0x5cd256=_0x5e79d1,_0x243498=String(this[_0x5cd256(0x990)]()[_0x5cd256(0x5ad)]);return _0x243498[_0x5cd256(0xcd4)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x5e79d1(0x57e)]['Game_Action_isForAll']=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x477)],Game_Action[_0x5e79d1(0x3a9)]['isForAll']=function(){const _0x19d542=_0x5e79d1;if(this['_targetBattlerKey']==='all\x20actors')return!![];if(this['_targetBattlerKey']===_0x19d542(0x8de))return!![];return VisuMZ['BattleCore'][_0x19d542(0x4b6)][_0x19d542(0x695)](this);},Game_Action['prototype'][_0x5e79d1(0x6af)]=function(){const _0x184155=_0x5e79d1;if(!this[_0x184155(0x990)]())return![];if(this['isForDeadFriend']())return![];return(this[_0x184155(0x990)]()[_0x184155(0x85e)]||'')['match'](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x3fc)]=Game_Action['prototype'][_0x5e79d1(0x247)],Game_Action['prototype'][_0x5e79d1(0x247)]=function(_0x4e8880){const _0x560c73=_0x5e79d1;if(this['isForNotUser']()&&_0x4e8880===this[_0x560c73(0x9cd)]())return![];return VisuMZ['BattleCore']['Game_Action_testApply'][_0x560c73(0x695)](this,_0x4e8880);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x739)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x8af)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x8af)]=function(){const _0x43859e=_0x5e79d1,_0x49928f=VisuMZ[_0x43859e(0x57e)]['Game_Action_itemTargetCandidates']['call'](this);if(this[_0x43859e(0xa5f)]())_0x49928f['remove'](this[_0x43859e(0x9cd)]());return _0x49928f;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x3b2)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xb8e)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xb8e)]=function(){const _0x58883f=_0x5e79d1;return this['isBattleCoreTargetScope']()&&!this[_0x58883f(0x694)]()?this[_0x58883f(0x7c5)]():VisuMZ['BattleCore'][_0x58883f(0x3b2)][_0x58883f(0x695)](this);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x7c5)]=function(){const _0x1c0b36=_0x5e79d1,_0x40e675=String(this[_0x1c0b36(0x990)]()[_0x1c0b36(0x5ad)]);if(_0x40e675[_0x1c0b36(0xcd4)](/RANDOM/i))return![];if(_0x40e675[_0x1c0b36(0xcd4)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x40e675[_0x1c0b36(0xcd4)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x40e675[_0x1c0b36(0xcd4)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x40e675[_0x1c0b36(0xcd4)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore'][_0x1c0b36(0x3b2)]['call'](this);},VisuMZ['BattleCore'][_0x5e79d1(0x351)]=Game_Action[_0x5e79d1(0x3a9)]['makeTargets'],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x417)]=function(){const _0x5c64ea=_0x5e79d1;let _0x127cd5=[];return this[_0x5c64ea(0x597)]()?this[_0x5c64ea(0x694)]()?_0x127cd5=this[_0x5c64ea(0xc7d)]():_0x127cd5=this['makeTargetsBattleCore']():_0x127cd5=VisuMZ[_0x5c64ea(0x57e)][_0x5c64ea(0x351)][_0x5c64ea(0x695)](this),_0x127cd5=this[_0x5c64ea(0x51e)](_0x127cd5),_0x127cd5;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x2d8)]=function(){const _0x5b0904=_0x5e79d1;return this[_0x5b0904(0x9cd)]()[_0x5b0904(0x2ff)]()&&!this[_0x5b0904(0x9cd)]()['isAutoBattle']();},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xc7d)]=function(){const _0x275000=_0x5e79d1,_0x13057b=VisuMZ['BattleCore']['createKeyJS'](this[_0x275000(0x990)](),'Targets');if(VisuMZ[_0x275000(0x57e)]['JS'][_0x13057b]){targets=VisuMZ[_0x275000(0x57e)][_0x275000(0x351)][_0x275000(0x695)](this);const _0x502dea=VisuMZ['BattleCore'][_0x275000(0x402)](this[_0x275000(0x990)](),_0x275000(0xa47));return targets=VisuMZ[_0x275000(0x57e)]['JS'][_0x502dea][_0x275000(0x695)](this,this[_0x275000(0x9cd)](),targets),this['repeatTargets'](targets);}return this[_0x275000(0x3b5)]();},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x3b5)]=function(){const _0x2a5775=_0x5e79d1;let _0x379176=[];const _0x369ad6=String(this['item']()['scope']);if(this[_0x2a5775(0x843)]())return this['isSubjectValidForAnyoneSelect']()?(_0x379176=this[_0x2a5775(0x608)](),this[_0x2a5775(0x38a)](_0x379176)):(this[_0x2a5775(0x39a)]=-0x1,_0x379176[_0x2a5775(0x68a)](...this['targetsForOpponents']()),this[_0x2a5775(0x38a)](_0x379176));if(this[_0x2a5775(0x341)]()){if(this[_0x2a5775(0x2d8)]())return _0x379176=this[_0x2a5775(0x608)](),this[_0x2a5775(0x38a)](_0x379176);else{if(Imported[_0x2a5775(0xc73)]){if(VisuMZ['BattleAI'][_0x2a5775(0xae5)]<1.19){let _0x4839d2='';_0x4839d2+='VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20',_0x4839d2+='in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20',_0x4839d2+=_0x2a5775(0xae2),alert(_0x4839d2),SceneManager[_0x2a5775(0x9e8)]();}}return this[_0x2a5775(0x39a)]=-0x1,_0x379176[_0x2a5775(0x68a)](...this[_0x2a5775(0x869)]()),this[_0x2a5775(0x38a)](_0x379176);}}if(_0x369ad6[_0x2a5775(0xcd4)](/(\d+) RANDOM ANY/i)){let _0x5135f1=Number(RegExp['$1']);while(_0x5135f1--){const _0x213bbb=Math['randomInt'](0x2)===0x0?this[_0x2a5775(0x412)]():this['friendsUnit']();_0x379176[_0x2a5775(0x68a)](_0x213bbb[_0x2a5775(0x999)]());}return this[_0x2a5775(0x38a)](_0x379176);}if(_0x369ad6[_0x2a5775(0xcd4)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0xd53662=Number(RegExp['$1']);while(_0xd53662--){_0x379176[_0x2a5775(0x68a)](this[_0x2a5775(0x412)]()[_0x2a5775(0x999)]());}return this[_0x2a5775(0x38a)](_0x379176);}if(_0x369ad6[_0x2a5775(0xcd4)](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x5a81d0=Number(RegExp['$1']);while(_0x5a81d0--){_0x379176['push'](this['friendsUnit']()[_0x2a5775(0x999)]());}return this[_0x2a5775(0x38a)](_0x379176);}if(_0x369ad6['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x379176[_0x2a5775(0x68a)](...this[_0x2a5775(0xa93)]()[_0x2a5775(0x43a)]()[_0x2a5775(0x984)](_0x482e4a=>_0x482e4a!==this['subject']())),this[_0x2a5775(0x38a)](_0x379176);return VisuMZ[_0x2a5775(0x57e)]['Game_Action_makeTargets'][_0x2a5775(0x695)](this);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x4ab)]=function(_0x15eb73){const _0x3808cb=_0x5e79d1,_0x5ebb14=[];for(let _0x172c95=0x0;_0x172c95<this['numTargets']();_0x172c95++){_0x5ebb14[_0x3808cb(0x68a)](_0x15eb73[_0x3808cb(0x999)]());}return _0x5ebb14;},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x51e)]=function(_0x2b09e4){const _0x366507=_0x5e79d1;if(!this[_0x366507(0x990)]())return _0x2b09e4;const _0x20e98c=this[_0x366507(0x990)]()[_0x366507(0x85e)];if(this[_0x366507(0xa5f)]()){this[_0x366507(0x477)]()&&_0x2b09e4[_0x366507(0x9b8)](this[_0x366507(0x9cd)]());if(_0x2b09e4[_0x366507(0x9fb)](this[_0x366507(0x9cd)]())){const _0x4e54c1=this[_0x366507(0xa93)]()[_0x366507(0x43a)]()['remove'](this[_0x366507(0x9cd)]());if(_0x4e54c1[_0x366507(0xc35)]>0x0){_0x4e54c1[_0x366507(0xaaf)]((_0x22e626,_0x2d62b7)=>_0x22e626[_0x366507(0x9b0)]()-_0x2d62b7[_0x366507(0x9b0)]());while(_0x2b09e4['includes'](this[_0x366507(0x9cd)]())){const _0x1ca8f8=_0x2b09e4[_0x366507(0x985)](this['subject']());_0x2b09e4[_0x1ca8f8]=_0x4e54c1[Math['randomInt'](_0x4e54c1[_0x366507(0xc35)])];}}else _0x2b09e4['remove'](this['subject']());}}return _0x2b09e4;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x49e)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x8be)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x8be)]=function(_0x31fcee,_0x8cedc2){const _0x3269dd=_0x5e79d1;VisuMZ[_0x3269dd(0x57e)][_0x3269dd(0x49e)][_0x3269dd(0x695)](this,_0x31fcee,_0x8cedc2);if(!_0x31fcee[_0x3269dd(0x7c8)]())return;for(const _0x5e94c6 of this['subject']()[_0x3269dd(0x919)]()){if(_0x5e94c6===_0x31fcee[_0x3269dd(0x3d9)]()){let _0x56aebc=_0x8cedc2[_0x3269dd(0xbb7)];_0x56aebc*=_0x31fcee[_0x3269dd(0x2c3)](_0x5e94c6),_0x56aebc*=this['subject']()[_0x3269dd(0xcc5)](_0x5e94c6),_0x56aebc*=this[_0x3269dd(0x637)](_0x31fcee),Math[_0x3269dd(0xc61)]()<_0x56aebc&&(_0x31fcee['_deathStateApplied']=!![],this[_0x3269dd(0x7cc)](_0x31fcee));}}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x266)]=Game_Action[_0x5e79d1(0x3a9)]['itemEffectAddNormalState'],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x865)]=function(_0xf7e1d7,_0x445eff){const _0x5d32dc=_0x5e79d1;VisuMZ[_0x5d32dc(0x57e)][_0x5d32dc(0x266)]['call'](this,_0xf7e1d7,_0x445eff);if(!_0xf7e1d7[_0x5d32dc(0x7c8)]())return;if(_0x445eff[_0x5d32dc(0x88f)]!==_0xf7e1d7[_0x5d32dc(0x3d9)]())return;let _0x38844b=_0x445eff[_0x5d32dc(0xbb7)];!this[_0x5d32dc(0xa7e)]()&&(_0x38844b*=_0xf7e1d7['stateRate'](_0x445eff[_0x5d32dc(0x88f)]),_0x38844b*=this['lukEffectRate'](_0xf7e1d7)),Math[_0x5d32dc(0xc61)]()<_0x38844b&&(_0xf7e1d7['_deathStateApplied']=!![],this[_0x5d32dc(0x7cc)](_0xf7e1d7));},VisuMZ['BattleCore']['Game_Action_applyGlobal']=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xab6)],Game_Action['prototype'][_0x5e79d1(0xab6)]=function(){const _0x2b09d3=_0x5e79d1;VisuMZ[_0x2b09d3(0x57e)][_0x2b09d3(0xb99)][_0x2b09d3(0x695)](this),this[_0x2b09d3(0xbd1)](),this[_0x2b09d3(0x4bf)]();},Game_Action['prototype'][_0x5e79d1(0xbd1)]=function(){const _0x288da5=_0x5e79d1;if(!SceneManager[_0x288da5(0x6a6)]())return;const _0x2c8d08=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x1df01b=this[_0x288da5(0x990)]()[_0x288da5(0x85e)][_0x288da5(0xcd4)](_0x2c8d08);if(_0x1df01b)for(const _0x5ddf07 of _0x1df01b){if(!_0x5ddf07)continue;_0x5ddf07['match'](_0x2c8d08);const _0x10b091=String(RegExp['$1'])[_0x288da5(0x60b)](',')[_0x288da5(0x343)](_0x54f9bb=>String(_0x54f9bb)[_0x288da5(0xacc)]()),_0x1c2a7f=_0x10b091[_0x288da5(0x343)](_0x12ef5d=>DataManager['getCommonEventIdWithName'](_0x12ef5d));for(const _0x195025 of _0x1c2a7f){const _0x1af7c7=$dataCommonEvents[_0x195025];_0x1af7c7&&$gameTemp[_0x288da5(0x92c)](_0x195025);}}},DataManager[_0x5e79d1(0x470)]=function(_0x475f82){const _0x449899=_0x5e79d1;_0x475f82=_0x475f82['toUpperCase']()[_0x449899(0xacc)](),this[_0x449899(0x7eb)]=this['_commonEventIDs']||{};if(this[_0x449899(0x7eb)][_0x475f82])return this[_0x449899(0x7eb)][_0x475f82];for(const _0x1f66d7 of $dataCommonEvents){if(!_0x1f66d7)continue;let _0x3395a8=_0x1f66d7['name'];_0x3395a8=_0x3395a8[_0x449899(0x4f6)](/\x1I\[(\d+)\]/gi,''),_0x3395a8=_0x3395a8[_0x449899(0x4f6)](/\\I\[(\d+)\]/gi,''),this[_0x449899(0x7eb)][_0x3395a8[_0x449899(0xcde)]()[_0x449899(0xacc)]()]=_0x1f66d7['id'];}return this[_0x449899(0x7eb)][_0x475f82]||0x0;},Game_Action['prototype'][_0x5e79d1(0x4bf)]=function(){const _0x563171=_0x5e79d1;if(!SceneManager[_0x563171(0x6a6)]())return;const _0x54d170=VisuMZ['BattleCore'][_0x563171(0xc89)]['Mechanics'];_0x54d170[_0x563171(0x319)]&&$gameSwitches['setValue'](_0x54d170['SwitchCritical'],![]),_0x54d170[_0x563171(0x969)]&&$gameSwitches['setValue'](_0x54d170[_0x563171(0x969)],![]),_0x54d170[_0x563171(0x4d5)]&&$gameVariables[_0x563171(0x8a3)](_0x54d170['VariableDmg'],0x0),_0x54d170[_0x563171(0xc51)]&&$gameVariables['setValue'](_0x54d170[_0x563171(0xc51)],0x0);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x3ad)]=function(_0x1d7e6a){const _0x20d79b=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(!_0x1d7e6a)return;const _0x38f0fa=_0x1d7e6a[_0x20d79b(0xbe0)](),_0x98c1d9=VisuMZ[_0x20d79b(0x57e)][_0x20d79b(0xc89)][_0x20d79b(0x368)];_0x98c1d9[_0x20d79b(0x319)]&&_0x38f0fa['critical']&&$gameSwitches[_0x20d79b(0x8a3)](_0x98c1d9[_0x20d79b(0x319)],!![]);_0x98c1d9[_0x20d79b(0x969)]&&(_0x38f0fa[_0x20d79b(0x7d1)]||_0x38f0fa[_0x20d79b(0x65f)])&&$gameSwitches[_0x20d79b(0x8a3)](_0x98c1d9[_0x20d79b(0x969)],!![]);if(_0x98c1d9[_0x20d79b(0x4d5)]){let _0x38513e=$gameVariables[_0x20d79b(0x992)](_0x98c1d9[_0x20d79b(0x4d5)]);_0x38f0fa[_0x20d79b(0x90f)]>0x0&&(_0x38513e+=Math['abs'](_0x38f0fa['hpDamage'])),$gameVariables['setValue'](_0x98c1d9['VariableDmg'],_0x38513e);}if(_0x98c1d9[_0x20d79b(0xc51)]){let _0x23bc82=$gameVariables[_0x20d79b(0x992)](_0x98c1d9[_0x20d79b(0xc51)]);_0x38f0fa['hpDamage']<0x0&&(_0x23bc82+=Math[_0x20d79b(0x7b9)](_0x38f0fa[_0x20d79b(0x90f)])),$gameVariables[_0x20d79b(0x8a3)](_0x98c1d9[_0x20d79b(0xc51)],_0x23bc82);}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x86f)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x5cd)]=Game_Action['prototype'][_0x5e79d1(0x62e)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x62e)]=function(_0x3fe371,_0x362e99){const _0x1ad144=_0x5e79d1;VisuMZ[_0x1ad144(0x57e)][_0x1ad144(0x5cd)][_0x1ad144(0x695)](this,_0x3fe371,_0x362e99);!this[_0x1ad144(0x2b8)]()&&_0x3fe371&&_0x3fe371['result']()['hpDamage']>0x0&&this[_0x1ad144(0x9e9)]('HP',_0x3fe371,_0x3fe371[_0x1ad144(0xbe0)]()[_0x1ad144(0x90f)]);if(_0x3fe371){this[_0x1ad144(0xa27)]=this[_0x1ad144(0xa27)]||{};const _0x1710aa=_0x3fe371['battlerKey']();this[_0x1ad144(0xa27)][_0x1710aa]=_0x362e99;}},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x638)]=function(_0x25cb4c){const _0x2445b4=_0x5e79d1;this[_0x2445b4(0xa27)]=this[_0x2445b4(0xa27)]||{};const _0x5c1922=_0x25cb4c[_0x2445b4(0x5e5)]();return this[_0x2445b4(0xa27)][_0x5c1922]||0x0;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x58d)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x991)],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x991)]=function(_0x888690,_0x53c481){const _0x83012c=_0x5e79d1;VisuMZ[_0x83012c(0x57e)]['Game_Action_executeMpDamage']['call'](this,_0x888690,_0x53c481),!this[_0x83012c(0x2b8)]()&&_0x888690&&_0x888690[_0x83012c(0xbe0)]()[_0x83012c(0x9bb)]>0x0&&this[_0x83012c(0x9e9)]('MP',_0x888690,_0x888690[_0x83012c(0xbe0)]()[_0x83012c(0x9bb)]);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x9e9)]=function(_0x4d91cb,_0x474687,_0x106018){const _0x302d41=_0x5e79d1;_0x4d91cb=_0x4d91cb[_0x302d41(0xcde)]()[_0x302d41(0xacc)]();const _0x42f400=this[_0x302d41(0x9ff)](_0x4d91cb,_0x474687);if(_0x42f400<=0x0)return;const _0x648550=Math[_0x302d41(0xa7d)](_0x106018*_0x42f400);if(_0x648550<=0x0)return;let _0xe9959b=this[_0x302d41(0x9cd)]();if(this[_0x302d41(0x5db)])_0xe9959b=this[_0x302d41(0x5db)];const _0x28bdf3=_0x474687[_0x302d41(0x80c)](_0x4d91cb)?-0x1:0x1;if(_0x4d91cb==='HP')_0xe9959b['gainHp'](_0x28bdf3*_0x648550);if(_0x4d91cb==='MP')_0xe9959b[_0x302d41(0x435)](_0x28bdf3*_0x648550);},Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x9ff)]=function(_0x30de15,_0x552394){const _0x1796e2=_0x5e79d1;if(this['isCancelLifeSteal'](_0x30de15))return 0x0;if(this[_0x1796e2(0x9cd)]()[_0x1796e2(0x755)](_0x30de15))return 0x0;if(_0x552394[_0x1796e2(0x883)](_0x30de15))return 0x0;let _0x183a3b=0x0;return _0x183a3b+=this[_0x1796e2(0x41a)](_0x30de15),_0x183a3b+=this['subject']()[_0x1796e2(0x9ff)](_0x30de15,this[_0x1796e2(0x990)]()['hitType']),_0x183a3b[_0x1796e2(0x2a1)](0x0,0x1);},Game_Action[_0x5e79d1(0x3a9)]['isCancelLifeSteal']=function(_0x4b0b64){const _0x27a1d4=_0x5e79d1;_0x4b0b64=_0x4b0b64['toUpperCase']()['trim']();const _0xaecda2=VisuMZ[_0x27a1d4(0x57e)]['LifeStealRegExp'],_0x1dc233=this[_0x27a1d4(0x990)]()[_0x27a1d4(0x85e)]||'';if(_0x1dc233[_0x27a1d4(0xcd4)](_0xaecda2[_0x27a1d4(0xbf4)]))return!![];if(_0x4b0b64==='HP'&&_0x1dc233[_0x27a1d4(0xcd4)](_0xaecda2['cancelHpLifeSteal']))return!![];if(_0x4b0b64==='MP'&&_0x1dc233[_0x27a1d4(0xcd4)](_0xaecda2[_0x27a1d4(0xa52)]))return!![];return![];},Game_Action['prototype']['itemLifeStealRate']=function(_0x3dbd21){const _0x3adf96=_0x5e79d1,_0x3b276f=VisuMZ[_0x3adf96(0x57e)][_0x3adf96(0x86f)],_0x1f6d41=this['item']()['note']||'';_0x3dbd21=_0x3dbd21[_0x3adf96(0xcde)]()[_0x3adf96(0xacc)]();const _0x50536b=_0x1f6d41[_0x3adf96(0xcd4)](_0x3b276f[_0x3adf96(0x5fb)]);if(_0x50536b)for(const _0x767541 of _0x50536b){_0x767541[_0x3adf96(0xcd4)](_0x3b276f[_0x3adf96(0x5fb)]);const _0x9e27e1=String(RegExp['$1'])[_0x3adf96(0xcde)]()[_0x3adf96(0xacc)](),_0x2d1faa=Number(RegExp['$2'])*0.01;if(_0x9e27e1!==_0x3dbd21)continue;return _0x2d1faa;}return 0x0;},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x9ff)]=function(_0x2ac1fc,_0x46266a){const _0x4f7c73=_0x5e79d1,_0x55f104=VisuMZ['BattleCore'][_0x4f7c73(0x86f)];let _0x46fb9b=0x0;_0x2ac1fc=_0x2ac1fc[_0x4f7c73(0xcde)]()[_0x4f7c73(0xacc)]();for(const _0xa4e5de of this[_0x4f7c73(0x3b6)]()){if(!_0xa4e5de)continue;const _0xc1237c=_0xa4e5de[_0x4f7c73(0x85e)]||'',_0x28dec7=_0xc1237c[_0x4f7c73(0xcd4)](_0x55f104['lifeStealTrait']);if(_0x28dec7)for(const _0x38af51 of _0x28dec7){_0x38af51[_0x4f7c73(0xcd4)](_0x55f104['lifeStealTrait']);const _0x4830b4=String(RegExp['$1'])[_0x4f7c73(0xcde)]()[_0x4f7c73(0xacc)](),_0x4dfe46=String(RegExp['$2']),_0x30d5dc=Number(RegExp['$3'])*0.01;if(_0x4830b4!==_0x2ac1fc)continue;if(_0x46266a===Game_Action['HITTYPE_CERTAIN']&&_0x4dfe46[_0x4f7c73(0xcd4)](/CERTAIN/i))_0x46fb9b+=_0x30d5dc;else{if(_0x46266a===Game_Action[_0x4f7c73(0x2c7)]&&_0x4dfe46[_0x4f7c73(0xcd4)](/PHYS/i))_0x46fb9b+=_0x30d5dc;else _0x46266a===Game_Action[_0x4f7c73(0x82e)]&&_0x4dfe46[_0x4f7c73(0xcd4)](/MAGIC/i)&&(_0x46fb9b+=_0x30d5dc);}}}return _0x46fb9b;},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x755)]=function(_0x25cecb){const _0x120256=_0x5e79d1;_0x25cecb=_0x25cecb['toUpperCase']()['trim']();const _0x418642=VisuMZ[_0x120256(0x57e)]['LifeStealRegExp'];for(const _0x382810 of this[_0x120256(0x3b6)]()){if(!_0x382810)continue;const _0x5ab7bb=_0x382810[_0x120256(0x85e)]||'';if(_0x5ab7bb['match'](_0x418642['disarmLifeSteal']))return!![];if(_0x25cecb==='HP'&&_0x5ab7bb['match'](_0x418642[_0x120256(0xc83)]))return!![];if(_0x25cecb==='MP'&&_0x5ab7bb[_0x120256(0xcd4)](_0x418642[_0x120256(0x558)]))return!![];}return![];},Game_BattlerBase[_0x5e79d1(0x3a9)]['isNegativeLifeSteal']=function(_0x2e1e90){const _0x31fe8b=_0x5e79d1;_0x2e1e90=_0x2e1e90[_0x31fe8b(0xcde)]()[_0x31fe8b(0xacc)]();const _0x5d5bb4=VisuMZ[_0x31fe8b(0x57e)][_0x31fe8b(0x86f)];for(const _0x20e191 of this[_0x31fe8b(0x3b6)]()){if(!_0x20e191)continue;const _0x44142a=_0x20e191[_0x31fe8b(0x85e)]||'';if(_0x44142a[_0x31fe8b(0xcd4)](_0x5d5bb4[_0x31fe8b(0x53c)]))return!![];if(_0x2e1e90==='HP'&&_0x44142a[_0x31fe8b(0xcd4)](_0x5d5bb4[_0x31fe8b(0x303)]))return!![];if(_0x2e1e90==='MP'&&_0x44142a[_0x31fe8b(0xcd4)](_0x5d5bb4['negativeMpLifeSteal']))return!![];}return![];},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x883)]=function(_0x337606){const _0x4179b5=_0x5e79d1;_0x337606=_0x337606[_0x4179b5(0xcde)]()[_0x4179b5(0xacc)]();const _0x37840d=VisuMZ[_0x4179b5(0x57e)]['LifeStealRegExp'];for(const _0x47e26d of this[_0x4179b5(0x3b6)]()){if(!_0x47e26d)continue;const _0x326cd6=_0x47e26d[_0x4179b5(0x85e)]||'';if(_0x326cd6[_0x4179b5(0xcd4)](_0x37840d[_0x4179b5(0x21d)]))return!![];if(_0x337606==='HP'&&_0x326cd6[_0x4179b5(0xcd4)](_0x37840d[_0x4179b5(0xc18)]))return!![];if(_0x337606==='MP'&&_0x326cd6[_0x4179b5(0xcd4)](_0x37840d[_0x4179b5(0xbca)]))return!![];}return![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x613)]=Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x70d)],Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x70d)]=function(){const _0x351b42=_0x5e79d1;VisuMZ[_0x351b42(0x57e)][_0x351b42(0x613)]['call'](this),this[_0x351b42(0x424)]();},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x424)]=function(){const _0x30af87=_0x5e79d1;this[_0x30af87(0x8e9)]=![];},VisuMZ['BattleCore'][_0x5e79d1(0x6d3)]=Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x562)],Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x562)]=function(){const _0x515871=_0x5e79d1;this['_cache']={},VisuMZ[_0x515871(0x57e)][_0x515871(0x6d3)][_0x515871(0x695)](this);},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ac)]=function(_0x1fa075){const _0x3cb68c=_0x5e79d1;return this[_0x3cb68c(0x7bb)]=this[_0x3cb68c(0x7bb)]||{},this['_cache'][_0x1fa075]!==undefined;},Game_BattlerBase['prototype']['hardDamageCap']=function(){const _0x490a42=_0x5e79d1;if(this[_0x490a42(0x7bb)][_0x490a42(0x99f)]!==undefined)return this[_0x490a42(0x7bb)]['hardDamageCap'];const _0x408706=/<DAMAGE CAP:[ ](\d+)>/i,_0x545c2f=this[_0x490a42(0x3b6)]()[_0x490a42(0x343)](_0x43a881=>_0x43a881&&_0x43a881[_0x490a42(0x85e)][_0x490a42(0xcd4)](_0x408706)?Number(RegExp['$1']):0x0);let _0x2d4920=_0x545c2f[_0x490a42(0xc35)]>0x0?Math[_0x490a42(0x9db)](..._0x545c2f):0x0;if(_0x2d4920<=0x0)_0x2d4920=VisuMZ['BattleCore'][_0x490a42(0xc89)][_0x490a42(0xb4c)][_0x490a42(0x363)];return this['_cache'][_0x490a42(0x99f)]=_0x2d4920,this[_0x490a42(0x7bb)][_0x490a42(0x99f)];},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0xcd5)]=function(){const _0x39b7e7=_0x5e79d1;if(this[_0x39b7e7(0x7bb)][_0x39b7e7(0x7da)]!==undefined)return this[_0x39b7e7(0x7bb)][_0x39b7e7(0x7da)];let _0x5d44ca=VisuMZ['BattleCore'][_0x39b7e7(0xc89)][_0x39b7e7(0xb4c)][_0x39b7e7(0x860)];const _0x14cbd9=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0xf03640=this['traitObjects']()[_0x39b7e7(0x343)](_0x23bc57=>_0x23bc57&&_0x23bc57[_0x39b7e7(0x85e)][_0x39b7e7(0xcd4)](_0x14cbd9)?Number(RegExp['$1'])/0x64:0x0);return _0x5d44ca=_0xf03640[_0x39b7e7(0xc30)]((_0x46bca0,_0x2c17fe)=>_0x46bca0+_0x2c17fe,_0x5d44ca),this[_0x39b7e7(0x7bb)][_0x39b7e7(0x7da)]=_0x5d44ca,this[_0x39b7e7(0x7bb)][_0x39b7e7(0x7da)][_0x39b7e7(0x2a1)](0.01,0x1);},VisuMZ['BattleCore'][_0x5e79d1(0x7bf)]=Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0xc0c)],Game_BattlerBase[_0x5e79d1(0x3a9)]['die']=function(){const _0xcd275c=_0x5e79d1;VisuMZ[_0xcd275c(0x57e)][_0xcd275c(0x7bf)][_0xcd275c(0x695)](this),SceneManager[_0xcd275c(0x6a6)]()&&(this['requestMotion'](_0xcd275c(0x5cc)),this[_0xcd275c(0x99c)]=undefined);},Game_BattlerBase[_0x5e79d1(0x3a9)]['battler']=function(){const _0x1c14c1=_0x5e79d1;if(!SceneManager[_0x1c14c1(0x6a6)]())return null;if(!SceneManager[_0x1c14c1(0xc59)][_0x1c14c1(0x29c)])return null;return SceneManager[_0x1c14c1(0xc59)][_0x1c14c1(0x29c)][_0x1c14c1(0x334)](this);},Game_BattlerBase[_0x5e79d1(0x3a9)]['svBattlerAnchorX']=function(){const _0x461bcc=_0x5e79d1;return VisuMZ['BattleCore'][_0x461bcc(0xc89)][_0x461bcc(0x232)][_0x461bcc(0x227)];},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x278)]=function(){const _0x2620f1=_0x5e79d1;return VisuMZ[_0x2620f1(0x57e)][_0x2620f1(0xc89)]['Actor'][_0x2620f1(0x1ef)];},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x536)]=function(){const _0x3282f3=_0x5e79d1;return this[_0x3282f3(0x2ff)]&&this[_0x3282f3(0x2ff)]()?VisuMZ[_0x3282f3(0x57e)][_0x3282f3(0xc89)][_0x3282f3(0x232)]['Shadow']:VisuMZ[_0x3282f3(0x57e)][_0x3282f3(0xc89)]['Enemy'][_0x3282f3(0x460)];},Game_BattlerBase['prototype']['battlerSmoothImage']=function(){return!![];},Game_BattlerBase[_0x5e79d1(0x3a9)]['battleUIOffsetX']=function(){return 0x0;},Game_BattlerBase[_0x5e79d1(0x3a9)]['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x716)]=function(_0x328d92){const _0x3ee5b8=_0x5e79d1;if(!_0x328d92)return 0x0;let _0xe5be58=0x0;const _0x598b15=_0x328d92[_0x3ee5b8(0x85e)];return _0x598b15[_0x3ee5b8(0xcd4)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0xe5be58+=Number(RegExp['$1'])),_0x598b15['match'](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0xe5be58+=Number(RegExp['$1'])),_0xe5be58;},Game_BattlerBase['prototype'][_0x5e79d1(0x8bf)]=function(_0xc51b63){const _0x24e7cd=_0x5e79d1;if(!_0xc51b63)return 0x0;let _0x493221=0x0;const _0x1b64bf=_0xc51b63[_0x24e7cd(0x85e)];return _0x1b64bf[_0x24e7cd(0xcd4)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x493221+=Number(RegExp['$1'])),_0x1b64bf[_0x24e7cd(0xcd4)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x493221+=Number(RegExp['$2'])),_0x493221;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x65d)]=Game_BattlerBase['prototype'][_0x5e79d1(0x95b)],Game_BattlerBase['prototype'][_0x5e79d1(0x95b)]=function(_0x57bcae){const _0x16dba2=_0x5e79d1;if(_0x57bcae===this['deathStateId']()&&this[_0x16dba2(0x7c8)]())return!![];return VisuMZ['BattleCore'][_0x16dba2(0x65d)][_0x16dba2(0x695)](this,_0x57bcae);},Game_BattlerBase['prototype'][_0x5e79d1(0x7c8)]=function(){const _0x1a52b5=_0x5e79d1;return this[_0x1a52b5(0x8e9)];},Game_BattlerBase[_0x5e79d1(0x3a9)]['setImmortal']=function(_0x1b313e){const _0xb3cb9c=_0x5e79d1;_0x1b313e?this[_0xb3cb9c(0xc2c)]():this[_0xb3cb9c(0x45c)]();},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0xc2c)]=function(){const _0x57136d=_0x5e79d1;if(this[_0x57136d(0x5d8)]())return;this['_immortal']=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x45c)]=function(){const _0x51ee43=_0x5e79d1,_0x352de7=this['isAlive']();this[_0x51ee43(0x8e9)]=![],_0x352de7&&this[_0x51ee43(0x9ac)]&&this['die'](),this[_0x51ee43(0x9ac)]=![],this[_0x51ee43(0x562)](),this[_0x51ee43(0x5d8)]()&&_0x352de7&&(this[_0x51ee43(0x948)](),this['requestMotionRefresh']());},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x456)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xca4)],Game_Action[_0x5e79d1(0x3a9)]['numRepeats']=function(){const _0x42aac8=_0x5e79d1;return this[_0x42aac8(0x990)]()?VisuMZ[_0x42aac8(0x57e)][_0x42aac8(0x456)][_0x42aac8(0x695)](this):0x0;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x4b5)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0xbc1)],Game_Action['prototype'][_0x5e79d1(0xbc1)]=function(){const _0x293ae3=_0x5e79d1;this['subject']()&&this['subject']()['canAttack']()?VisuMZ[_0x293ae3(0x57e)][_0x293ae3(0x4b5)][_0x293ae3(0x695)](this):this[_0x293ae3(0x438)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x61f)]=Game_BattlerBase['prototype'][_0x5e79d1(0x49c)],Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x49c)]=function(){const _0x4eabe5=_0x5e79d1;if(!this[_0x4eabe5(0x3ca)]())return![];return VisuMZ[_0x4eabe5(0x57e)][_0x4eabe5(0x61f)][_0x4eabe5(0x695)](this);},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x3ca)]=function(){const _0x42ff07=_0x5e79d1;for(const _0x5dc0cd of this[_0x42ff07(0x3b6)]()){if(!_0x5dc0cd)continue;if(_0x5dc0cd[_0x42ff07(0x85e)][_0x42ff07(0xcd4)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x31e)]=Game_Action['prototype']['setGuard'],Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x85d)]=function(){const _0x3038e5=_0x5e79d1;this[_0x3038e5(0x9cd)]()[_0x3038e5(0xbf5)]()&&VisuMZ['BattleCore']['Game_Action_setGuard'][_0x3038e5(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x995)]=Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0xbf5)],Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0xbf5)]=function(){const _0x995a62=_0x5e79d1;if(!this[_0x995a62(0x93d)]())return![];return VisuMZ[_0x995a62(0x57e)]['Game_BattlerBase_canGuard'][_0x995a62(0x695)](this);},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x93d)]=function(){const _0x476d96=_0x5e79d1;for(const _0x2cd093 of this[_0x476d96(0x3b6)]()){if(!_0x2cd093)continue;if(_0x2cd093[_0x476d96(0x85e)][_0x476d96(0xcd4)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x1fd)]=function(){const _0x25b6a4=_0x5e79d1;for(const _0x150369 of this[_0x25b6a4(0x3b6)]()){if(!_0x150369)continue;if(_0x150369[_0x25b6a4(0x85e)][_0x25b6a4(0xcd4)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x5e79d1(0x57e)]['Game_BattlerBase_meetsUsableItemConditions']=Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0xaa6)],Game_BattlerBase[_0x5e79d1(0x3a9)]['meetsUsableItemConditions']=function(_0x561438){const _0x7c107e=_0x5e79d1;if(_0x561438&&_0x561438[_0x7c107e(0x85e)][_0x7c107e(0xcd4)](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x2a0bf5=this['friendsUnit']()[_0x7c107e(0x43a)]();if(_0x2a0bf5[_0x7c107e(0xc35)]===0x1&&_0x2a0bf5[0x0]===this)return![];}return VisuMZ[_0x7c107e(0x57e)][_0x7c107e(0x3b9)][_0x7c107e(0x695)](this,_0x561438);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xabd)]=function(){const _0x2e90b5=_0x5e79d1;return VisuMZ[_0x2e90b5(0x57e)][_0x2e90b5(0xc89)][_0x2e90b5(0x368)][_0x2e90b5(0xbf3)];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x822)]=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x3fa)],Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x3fa)]=function(){const _0x5b4d0f=_0x5e79d1;if(SceneManager['isSceneBattle']()){if(BattleManager[_0x5b4d0f(0xc70)]()){if(this['turnCount']()<=0x0)return;}else{if($gameTroop[_0x5b4d0f(0x647)]()<=0x0)return;}}if(SceneManager[_0x5b4d0f(0x6a6)]()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics['frameCount'])return;this[_0x5b4d0f(0xca6)]=Graphics[_0x5b4d0f(0x9b2)],SceneManager[_0x5b4d0f(0x6a6)]()&&this['processBattleCoreJS'](_0x5b4d0f(0x24c)),VisuMZ[_0x5b4d0f(0x57e)][_0x5b4d0f(0x822)]['call'](this),SceneManager[_0x5b4d0f(0x6a6)]()&&(this[_0x5b4d0f(0x44a)](),this[_0x5b4d0f(0x8c4)]('PostRegenerateJS'));},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x44a)]=function(){const _0x444c2b=_0x5e79d1;if(SceneManager[_0x444c2b(0x6a6)]())for(const _0x1a9f84 of this['traitObjects']()){if(!_0x1a9f84)continue;this[_0x444c2b(0x305)](_0x1a9f84);}},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x305)]=function(_0x489323){const _0x527232=_0x5e79d1;if(!Imported[_0x527232(0xaac)])return;if(!SceneManager[_0x527232(0x6a6)]())return;if(this['isDead']())return;if(this[_0x527232(0x317)]())return;if(_0x489323[_0x527232(0x85e)][_0x527232(0xcd4)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x38d280=Number(RegExp['$1']);$gameTemp[_0x527232(0x917)]([this],_0x38d280,![],![]);}},VisuMZ[_0x5e79d1(0x57e)]['Game_Battler_startTpbTurn']=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x3af)],Game_Battler['prototype'][_0x5e79d1(0x3af)]=function(){const _0x556bc7=_0x5e79d1;this[_0x556bc7(0x8c4)]('PreStartTurnJS'),VisuMZ[_0x556bc7(0x57e)]['Game_Battler_startTpbTurn'][_0x556bc7(0x695)](this),this['processBattleCoreJS'](_0x556bc7(0x8ed));},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x522)]=Game_Battler['prototype'][_0x5e79d1(0x369)],Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x369)]=function(){const _0x20f638=_0x5e79d1;this['processBattleCoreJS']('PreEndTurnJS'),VisuMZ[_0x20f638(0x57e)]['Game_Battler_onTurnEnd'][_0x20f638(0x695)](this),VisuMZ[_0x20f638(0x57e)][_0x20f638(0xc89)][_0x20f638(0x368)][_0x20f638(0x282)]&&this[_0x20f638(0x866)](),this[_0x20f638(0x8c4)](_0x20f638(0xa6a));},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x8c4)]=function(_0x3a254a){const _0x53adeb=_0x5e79d1;if(this[_0x53adeb(0x807)]||this[_0x53adeb(0xb1c)])return;const _0x8b79f4=VisuMZ['BattleCore'][_0x53adeb(0xc89)][_0x53adeb(0x368)];if(_0x8b79f4[_0x3a254a])_0x8b79f4[_0x3a254a][_0x53adeb(0x695)](this);for(const _0x430388 of this['traitObjects']()){if(!_0x430388)continue;key=VisuMZ[_0x53adeb(0x57e)][_0x53adeb(0x402)](_0x430388,_0x3a254a),VisuMZ[_0x53adeb(0x57e)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key][_0x53adeb(0x695)](this,this,this,_0x430388,0x0);}},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x2ca)]=function(){const _0x5517bc=_0x5e79d1;return VisuMZ['BattleCore'][_0x5517bc(0xc89)]['Actor'][_0x5517bc(0x6aa)]||![];},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x93a)]=function(){const _0x2ed516=_0x5e79d1;if(this[_0x2ed516(0xc95)]()){if(this['chantStyle']()){if(this[_0x2ed516(0xa99)][_0x2ed516(0xb7e)](_0x208c2a=>_0x208c2a[_0x2ed516(0x990)]()&&_0x208c2a['isMagical']()))return!![];}else{if(this['_actions'][_0x2ed516(0xb7e)](_0x11841b=>_0x11841b[_0x2ed516(0x990)]()&&_0x11841b[_0x2ed516(0x204)]()))return!![];}}if(BattleManager[_0x2ed516(0xc70)]()&&this[_0x2ed516(0x606)]==='casting')return this[_0x2ed516(0x2ca)]()?this[_0x2ed516(0xc09)]()&&this[_0x2ed516(0xc09)]()[_0x2ed516(0x990)]()&&this[_0x2ed516(0xc09)]()[_0x2ed516(0xad6)]():this[_0x2ed516(0xc09)]()&&this[_0x2ed516(0xc09)]()[_0x2ed516(0x990)]()&&this['currentAction']()[_0x2ed516(0x204)]();return![];},Game_Battler[_0x5e79d1(0x3a9)]['isCharging']=function(){const _0x2810dd=_0x5e79d1;if(BattleManager[_0x2810dd(0xc70)]()&&this[_0x2810dd(0x606)]===_0x2810dd(0x4df))return this[_0x2810dd(0x2ca)]()?this[_0x2810dd(0xc09)]()&&this[_0x2810dd(0xc09)]()[_0x2810dd(0x990)]()&&!this['currentAction']()[_0x2810dd(0xad6)]():this[_0x2810dd(0xc09)]()&&this[_0x2810dd(0xc09)]()[_0x2810dd(0x990)]()&&!this[_0x2810dd(0xc09)]()[_0x2810dd(0x204)]();return![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x8cf)]=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xb0f)],Game_Battler['prototype'][_0x5e79d1(0xb0f)]=function(){const _0xada9aa=_0x5e79d1;VisuMZ['BattleCore'][_0xada9aa(0x8cf)][_0xada9aa(0x695)](this),this[_0xada9aa(0x1d1)]=[];},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x4ad)]=function(){const _0x346c68=_0x5e79d1;if(!this[_0x346c68(0x1d1)])this[_0x346c68(0xb0f)]();return this[_0x346c68(0x1d1)][_0x346c68(0xc35)]>0x0;},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x46d)]=function(){const _0x4f4a6f=_0x5e79d1;if(!SceneManager[_0x4f4a6f(0x6a6)]())return;if(BattleManager[_0x4f4a6f(0x66c)]())return;if(!this[_0x4f4a6f(0x1d1)])this[_0x4f4a6f(0xb0f)]();this[_0x4f4a6f(0x962)]();const _0x4a4e37=this[_0x4f4a6f(0x949)]();if(_0x4a4e37)_0x4a4e37[_0x4f4a6f(0xb33)]();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x962)]=function(){const _0x3a2583=_0x5e79d1,_0x115764=this[_0x3a2583(0xbe0)]();if(_0x115764[_0x3a2583(0x7d1)]||_0x115764['evaded']){const _0x4123a4=JsonEx[_0x3a2583(0xbec)](_0x115764);_0x4123a4[_0x3a2583(0x7b1)]=![],_0x4123a4[_0x3a2583(0x9bb)]=0x0,this['_damagePopupArray'][_0x3a2583(0x68a)](_0x4123a4);if(!_0x115764['hpDamage']&&!_0x115764[_0x3a2583(0x9bb)])return;}if(_0x115764[_0x3a2583(0x7b1)]){const _0x13a93f=JsonEx[_0x3a2583(0xbec)](_0x115764);_0x13a93f[_0x3a2583(0x7d1)]=![],_0x13a93f['evaded']=![],_0x13a93f[_0x3a2583(0x9bb)]=0x0,this[_0x3a2583(0x1d1)]['push'](_0x13a93f);}if(_0x115764[_0x3a2583(0x9bb)]!==0x0){const _0x104342=JsonEx[_0x3a2583(0xbec)](_0x115764);_0x104342['missed']=![],_0x104342['evaded']=![],_0x104342[_0x3a2583(0x7b1)]=![],this[_0x3a2583(0x1d1)][_0x3a2583(0x68a)](_0x104342);}},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x937)]=function(){const _0x53a12f=_0x5e79d1;if(!this['_damagePopupArray'])this['clearDamagePopup']();return VisuMZ['BattleCore'][_0x53a12f(0xc89)]['Damage']['NewPopupBottom']?this[_0x53a12f(0x1d1)][_0x53a12f(0xa91)]():this[_0x53a12f(0x1d1)]['pop']();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x453)]=function(_0x2f3832,_0x487526){const _0x2aff16=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x2aff16(0x66c)]())return;if(!this[_0x2aff16(0x949)]())return;if(_0x2f3832[_0x2aff16(0xc35)]<=0x0)return;_0x487526=_0x487526||{},_0x487526[_0x2aff16(0x909)]=_0x487526[_0x2aff16(0x909)]||'#ffffff',_0x487526[_0x2aff16(0x393)]=_0x487526[_0x2aff16(0x393)]||[0x0,0x0,0x0,0x0],_0x487526['flashDuration']=_0x487526[_0x2aff16(0xa53)]||0x0,this[_0x2aff16(0x949)]()[_0x2aff16(0x453)](_0x2f3832,_0x487526);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xa1d)]=function(_0x16ada4,_0x1b5d6b,_0x4b8de8){const _0x592b81=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x592b81(0x949)]())return;if(_0x1b5d6b[_0x592b81(0xc35)]<=0x0)return;_0x4b8de8=_0x4b8de8||{},_0x4b8de8[_0x592b81(0x909)]=_0x4b8de8[_0x592b81(0x909)]||'#ffffff',_0x4b8de8['flashColor']=_0x4b8de8[_0x592b81(0x393)]||[0x0,0x0,0x0,0x0],_0x4b8de8['flashDuration']=_0x4b8de8['flashDuration']||0x0,this[_0x592b81(0x949)]()[_0x592b81(0xa1d)](_0x16ada4,_0x1b5d6b,_0x4b8de8);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x7df)]=function(){const _0x24bca8=_0x5e79d1;if(this[_0x24bca8(0x317)]())return![];if(this[_0x24bca8(0xc5e)]()&&this['isAppeared']())return!![];if(this[_0x24bca8(0x4cf)]()&&this[_0x24bca8(0x3ef)]()){if(this[_0x24bca8(0x5d8)]()&&this['allowCollapse']())return![];}else{if(this[_0x24bca8(0x5d8)]())return![];}return!![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xa29)]=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x1cd)],Game_Battler[_0x5e79d1(0x3a9)]['clearMotion']=function(){const _0x1ba8b2=_0x5e79d1;VisuMZ['BattleCore'][_0x1ba8b2(0xa29)]['call'](this),this[_0x1ba8b2(0x7c4)]();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xb6e)]=function(){return!![];},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x961)]=function(){return![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x555)]=Game_Battler['prototype'][_0x5e79d1(0xc91)],Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xc91)]=function(_0x6ff2b5){const _0x518e05=_0x5e79d1;VisuMZ['BattleCore'][_0x518e05(0x555)]['call'](this,_0x6ff2b5),this[_0x518e05(0xce1)](_0x6ff2b5),this[_0x518e05(0xb0f)]();},Game_Battler['prototype']['onBattleStartBattleCore']=function(_0x1300be){const _0x3c08ea=_0x5e79d1;this['setBattlerFlip'](![]),this[_0x3c08ea(0xa56)]=undefined,this[_0x3c08ea(0x62f)]=undefined;},VisuMZ['BattleCore']['Game_Battler_onBattleEnd']=Game_Battler[_0x5e79d1(0x3a9)]['onBattleEnd'],Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xb6a)]=function(){const _0x15da9d=_0x5e79d1;VisuMZ[_0x15da9d(0x57e)][_0x15da9d(0x63b)][_0x15da9d(0x695)](this),this[_0x15da9d(0x4d3)]();},Game_Battler[_0x5e79d1(0x3a9)]['onBattleEndBattleCore']=function(){const _0x5702c6=_0x5e79d1;this[_0x5702c6(0xa56)]=undefined,this[_0x5702c6(0x62f)]=undefined;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x644)]=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x77e)],Game_Battler['prototype'][_0x5e79d1(0x77e)]=function(_0x4afce4){const _0x35f423=_0x5e79d1;VisuMZ[_0x35f423(0x57e)][_0x35f423(0x644)][_0x35f423(0x695)](this,_0x4afce4);if(!_0x4afce4[_0x35f423(0x432)]()){const _0x597683=this[_0x35f423(0x949)]();_0x597683&&_0x597683[_0x35f423(0xb39)]();}this[_0x35f423(0x4b2)](![]);},Game_Battler[_0x5e79d1(0x3a9)]['performActionEndMembers']=function(){const _0x3c9d18=_0x5e79d1;this[_0x3c9d18(0x99c)]=undefined;const _0x360513=this['_flinched'];this['_flinched']=![];if(BattleManager[_0x3c9d18(0x216)]()&&this[_0x3c9d18(0x2ef)]()){const _0x4690c8=this[_0x3c9d18(0x949)]();if(_0x4690c8&&_0x360513)_0x4690c8['stepForward']();return;}const _0x4df044=this[_0x3c9d18(0x949)]();if(_0x4df044)_0x4df044[_0x3c9d18(0x323)]();this[_0x3c9d18(0x4b2)](![]),this['requestMotionRefresh']();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x8b1)]=function(_0x3ee944){const _0x4de7e7=_0x5e79d1;if(_0x3ee944['isAttack']())this['performAttack']();else{if(_0x3ee944['isGuard']())this[_0x4de7e7(0x792)](_0x4de7e7(0x725));else{if(_0x3ee944['isMagical']())this[_0x4de7e7(0x792)]('spell');else{if(_0x3ee944[_0x4de7e7(0x241)]())[0x1,0x2,0x5,0x6][_0x4de7e7(0x9fb)](_0x3ee944['item']()[_0x4de7e7(0x6e4)][_0x4de7e7(0x31c)])?this[_0x4de7e7(0x3f5)]():this['requestMotion'](_0x4de7e7(0x202));else _0x3ee944['isItem']()&&this[_0x4de7e7(0x792)](_0x4de7e7(0x990));}}}},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x366)]=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler['prototype'][_0x5e79d1(0xbb4)]=function(){const _0x4c8665=_0x5e79d1,_0x4f6e53=this[_0x4c8665(0x366)]();return _0x4f6e53?_0x4f6e53[_0x4c8665(0x313)]:0x0;},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x70b)]=function(_0x4c7b12){const _0x2c28f2=_0x5e79d1;if(!$gameSystem['isSideView']())return;const _0x42fdc7=this['battler'](),_0x1cda8b=_0x4c7b12['battler']();if(!_0x42fdc7||!_0x1cda8b)return;const _0x39008e=_0x1cda8b[_0x2c28f2(0x523)],_0x302650=_0x1cda8b[_0x2c28f2(0x415)];this['moveBattlerToPoint'](_0x39008e,_0x302650,0x0,![],_0x2c28f2(0xc80),-0x1),_0x42fdc7[_0x2c28f2(0xa69)]();const _0x2fdbf0=VisuMZ[_0x2c28f2(0x57e)][_0x2c28f2(0xc89)][_0x2c28f2(0x37e)];let _0x48ecb7=(_0x1cda8b[_0x2c28f2(0xa0f)]+_0x42fdc7[_0x2c28f2(0xa0f)])/0x2;_0x48ecb7*=this[_0x2c28f2(0x2ff)]()?0x1:-0x1;let _0x13c4c1=_0x2fdbf0[_0x2c28f2(0x26e)]*(this['isActor']()?0x1:-0x1);_0x4c7b12[_0x2c28f2(0x86c)](_0x48ecb7,_0x13c4c1,0x0,![],'Linear'),_0x1cda8b[_0x2c28f2(0xa69)]();},Game_Battler[_0x5e79d1(0x3a9)]['requestMotion']=function(_0x462286){const _0x1b61a7=_0x5e79d1;if(SceneManager[_0x1b61a7(0x6a6)]()){const _0x1eee0f=this[_0x1b61a7(0x949)]();_0x1eee0f&&(_0x1eee0f[_0x1b61a7(0x592)](_0x462286),[_0x1b61a7(0x80e),'thrust',_0x1b61a7(0x5e9)][_0x1b61a7(0x9fb)](_0x462286)&&this[_0x1b61a7(0x454)]());}this['clearFreezeMotion']();},Game_Battler[_0x5e79d1(0x3a9)]['performWeaponAnimation']=function(){},Game_Battler['prototype'][_0x5e79d1(0x5a9)]=function(_0x2c024c){const _0x5b393e=_0x5e79d1;if(SceneManager[_0x5b393e(0x6a6)]()){const _0x3eaede=this['battler']();if(_0x3eaede)_0x3eaede['forceWeaponAnimation'](_0x2c024c);}},Game_Battler['prototype']['startAttackWeaponAnimation']=function(){const _0x5dc36b=_0x5e79d1;if(SceneManager[_0x5dc36b(0x6a6)]()){const _0x598f9b=this[_0x5dc36b(0xbb4)]();this[_0x5dc36b(0x5a9)](_0x598f9b);}},Game_Battler[_0x5e79d1(0x3a9)]['performCastAnimation']=function(_0x3e1d9e,_0x25119a){const _0x315a1d=_0x5e79d1;if(!_0x3e1d9e)return;if(!_0x3e1d9e['item']())return;if(_0x3e1d9e[_0x315a1d(0xbeb)]())return;if(_0x3e1d9e[_0x315a1d(0x432)]())return;if(_0x3e1d9e[_0x315a1d(0x38f)]())return;if($gameTemp[_0x315a1d(0xc74)])return;let _0x3f369c=0x0;const _0x515c03=VisuMZ[_0x315a1d(0x57e)]['Settings'][_0x315a1d(0x37e)],_0x595ba6=_0x3e1d9e[_0x315a1d(0x990)]()[_0x315a1d(0x85e)];if(_0x595ba6[_0x315a1d(0xcd4)](/<CAST ANIMATION: (\d+)>/i))_0x3f369c=Number(RegExp['$1']);else{if(_0x595ba6[_0x315a1d(0xcd4)](/<NO CAST ANIMATION>/i))return;else{if(_0x3e1d9e[_0x315a1d(0xa7e)]())_0x3f369c=_0x515c03[_0x315a1d(0xc65)];else{if(_0x3e1d9e[_0x315a1d(0x8a8)]())_0x3f369c=_0x515c03[_0x315a1d(0x336)];else _0x3e1d9e[_0x315a1d(0xad6)]()&&(_0x3f369c=_0x515c03[_0x315a1d(0x40c)]);}}}_0x3f369c>0x0&&$gameTemp[_0x315a1d(0x301)]([this],_0x3f369c,!!_0x25119a);},Game_Battler[_0x5e79d1(0x3a9)]['performReflection']=function(){const _0x3fc13f=_0x5e79d1;SoundManager['playReflection']();let _0xa213af=VisuMZ[_0x3fc13f(0x57e)][_0x3fc13f(0xc89)][_0x3fc13f(0x37e)][_0x3fc13f(0xaa2)];_0xa213af>0x0&&(Imported[_0x3fc13f(0xaac)]?$gameTemp[_0x3fc13f(0x917)]([this],_0xa213af):$gameTemp[_0x3fc13f(0x301)]([this],_0xa213af));},Game_Battler['prototype'][_0x5e79d1(0x802)]=function(){const _0x559742=_0x5e79d1;if(!$gameSystem[_0x559742(0x9a5)]())return![];if(!BattleManager[_0x559742(0x216)]())return![];if(!this['isAlive']())return![];if(this[_0x559742(0x2ef)]())return!![];if(this['isTpbReady']())return!![];if(this[_0x559742(0x7fa)]>=0x1)return!![];return![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x7a7)]=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ce)],Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ce)]=function(){const _0x7eb2d=_0x5e79d1;this[_0x7eb2d(0x802)]()&&(this['_performDamageMotion']=!![]),VisuMZ['BattleCore']['Game_Battler_performDamage'][_0x7eb2d(0x695)](this),this[_0x7eb2d(0x5f3)](),this[_0x7eb2d(0xa1f)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x810)]=Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x2ab)],Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x2ab)]=function(){const _0x205182=_0x5e79d1;this['isActiveTpbReady']()&&(this[_0x205182(0x99c)]=!![]),VisuMZ[_0x205182(0x57e)][_0x205182(0x810)][_0x205182(0x695)](this),this[_0x205182(0x5f3)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x4f3)]=Game_Battler[_0x5e79d1(0x3a9)]['performEvasion'],Game_Battler[_0x5e79d1(0x3a9)]['performEvasion']=function(){const _0x5d0e7f=_0x5e79d1;this[_0x5d0e7f(0x802)]()&&(this[_0x5d0e7f(0x99c)]=!![]),VisuMZ[_0x5d0e7f(0x57e)][_0x5d0e7f(0x4f3)][_0x5d0e7f(0x695)](this),this[_0x5d0e7f(0x5f3)]();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x5f3)]=function(){const _0x52a3b9=_0x5e79d1;if(!$gameSystem[_0x52a3b9(0x9a5)]())return;if(this[_0x52a3b9(0x673)])return;this['_flinched']=!![];const _0x255929=this[_0x52a3b9(0x949)]();if(_0x255929)_0x255929['stepFlinch']();},Game_Battler[_0x5e79d1(0x3a9)]['performShakeFlinch']=function(){const _0x4264a8=_0x5e79d1;if(!this[_0x4264a8(0xb6e)]())return;const _0x544115=VisuMZ['BattleCore']['Settings'][_0x4264a8(0x232)];if(!(_0x544115[_0x4264a8(0x254)]??![]))return;if(this['_lastHpDamage']<=0x0)return;const _0x5c9291=this[_0x4264a8(0x949)]();if(_0x5c9291){const _0x2d1320=this[_0x4264a8(0xa43)],_0x3b02d7=(_0x2d1320/this[_0x4264a8(0x30f)])[_0x4264a8(0x2a1)](0.8,0x1),_0x1c657b=_0x544115[_0x4264a8(0x47e)]??0x30,_0x110079=_0x3b02d7*_0x1c657b;_0x5c9291[_0x4264a8(0x67c)](_0x110079,_0x3b02d7);}},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x4bd)]=function(){const _0x52a429=_0x5e79d1;if(this[_0x52a429(0x5d8)]()&&this[_0x52a429(0x851)]!==_0x52a429(0x5cc)){this[_0x52a429(0x792)](_0x52a429(0x5cc));return;}if(this[_0x52a429(0x5d8)]()&&this[_0x52a429(0x851)]===_0x52a429(0x5cc))return;if(!!this[_0x52a429(0x61c)])return;if(this[_0x52a429(0x4cf)]()){if(!this[_0x52a429(0x786)]()&&this!==BattleManager[_0x52a429(0x5c2)]){if(this[_0x52a429(0x949)]())this[_0x52a429(0x949)]()[_0x52a429(0xb5c)]();}this[_0x52a429(0x7c4)]();return;}if(this[_0x52a429(0x851)]==='victory')return;if(this['_motionType']===_0x52a429(0x586)&&!BattleManager[_0x52a429(0x2ef)]())return;if(this[_0x52a429(0x851)]==='guard'&&!BattleManager[_0x52a429(0x2ef)]())return;this[_0x52a429(0x1cd)]();if(BattleManager['isActiveTpb']()&&this===BattleManager[_0x52a429(0x5c2)])return;if(this[_0x52a429(0x949)]()&&BattleManager['isInputting']()){this['battler']()[_0x52a429(0xb5c)](),this[_0x52a429(0x7c4)]();return;}this['battler']()&&BattleManager[_0x52a429(0x216)]()&&this!==BattleManager[_0x52a429(0x5c2)]&&this[_0x52a429(0x949)]()[_0x52a429(0xb5c)]();},Game_Enemy['prototype'][_0x5e79d1(0x786)]=function(){const _0x434c97=_0x5e79d1;if(!this[_0x434c97(0x3ef)]())return![];const _0x2ba788=this[_0x434c97(0x949)]();if(!_0x2ba788)return![];const _0x4f1c0f=_0x2ba788[_0x434c97(0x4a4)];if(!_0x4f1c0f)return![];const _0xfabec0=_0x4f1c0f['_motion'];return _0xfabec0&&!_0xfabec0[_0x434c97(0x789)];},Game_Battler['prototype'][_0x5e79d1(0xb1b)]=function(){const _0x2083e6=_0x5e79d1;return this[_0x2083e6(0x569)];},Game_Battler['prototype'][_0x5e79d1(0x4b2)]=function(_0x39fd04){const _0xc660b5=_0x5e79d1;if(!$gameSystem[_0xc660b5(0x9a5)]())return;this[_0xc660b5(0x569)]=_0x39fd04;const _0x288dfd=this[_0xc660b5(0x949)]();if(_0x288dfd)_0x288dfd[_0xc660b5(0x941)]();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x9b9)]=function(_0x1fd00d,_0x508f70,_0x4b4c6f){const _0x533d3b=_0x5e79d1;if(!$gameSystem['isSideView']())return;const _0x47dbea=this[_0x533d3b(0x949)]();if(!_0x47dbea)return;if(_0x1fd00d===_0x47dbea[_0x533d3b(0x523)])return;let _0x2af537=![];if(this[_0x533d3b(0x2ff)]()){if(_0x1fd00d>_0x47dbea[_0x533d3b(0x523)])_0x2af537=!![];if(_0x1fd00d<_0x47dbea['_baseX'])_0x2af537=![];}else{if(this[_0x533d3b(0x4cf)]()){if(_0x1fd00d>_0x47dbea[_0x533d3b(0x523)])_0x2af537=![];if(_0x1fd00d<_0x47dbea['_baseX'])_0x2af537=!![];}};this[_0x533d3b(0x4b2)](_0x4b4c6f?!_0x2af537:_0x2af537),_0x47dbea[_0x533d3b(0x941)]();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x86c)]=function(_0x47ac45,_0x2adeee,_0x2638f5,_0x3eb8d4,_0x4c7977){const _0x5f491a=_0x5e79d1;if(!$gameSystem[_0x5f491a(0x9a5)]())return;const _0x2c1e45=this[_0x5f491a(0x949)]();if(!_0x2c1e45)return;if(_0x3eb8d4)this[_0x5f491a(0x9b9)](_0x47ac45+_0x2c1e45[_0x5f491a(0x523)],_0x2adeee+_0x2c1e45[_0x5f491a(0x415)],![]);_0x47ac45+=_0x2c1e45[_0x5f491a(0x523)]-_0x2c1e45[_0x5f491a(0x76c)],_0x2adeee+=_0x2c1e45[_0x5f491a(0x415)]-_0x2c1e45[_0x5f491a(0x39e)],_0x2c1e45[_0x5f491a(0xaef)](_0x47ac45,_0x2adeee,_0x2638f5);if(Imported[_0x5f491a(0xaac)])_0x2c1e45['setMoveEasingType'](_0x4c7977||'Linear');},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x72b)]=function(_0x520bfd,_0x3c2d8d,_0x44dfe6,_0x3f44fe,_0x3d5705,_0x13e3bc){const _0x4fbe9a=_0x5e79d1;if(!$gameSystem[_0x4fbe9a(0x9a5)]())return;const _0x2c38ee=this[_0x4fbe9a(0x949)]();if(!_0x2c38ee)return;if(_0x520bfd===Infinity||_0x3c2d8d===Infinity)return;if(isNaN(_0x520bfd)||isNaN(_0x3c2d8d))return;_0x13e3bc=_0x13e3bc||0x0;if(_0x13e3bc>0x0){if(_0x2c38ee[_0x4fbe9a(0x523)]>_0x520bfd)_0x520bfd+=_0x2c38ee[_0x4fbe9a(0xa0f)]/0x2+_0x13e3bc;if(_0x2c38ee[_0x4fbe9a(0x523)]<_0x520bfd)_0x520bfd-=_0x2c38ee[_0x4fbe9a(0xa0f)]/0x2+_0x13e3bc;}if(_0x3f44fe)this[_0x4fbe9a(0x9b9)](_0x520bfd,_0x3c2d8d,![]);_0x520bfd-=_0x2c38ee[_0x4fbe9a(0x76c)],_0x3c2d8d-=_0x2c38ee['_homeY'],_0x2c38ee['startMove'](_0x520bfd,_0x3c2d8d,_0x44dfe6);if(Imported[_0x4fbe9a(0xaac)])_0x2c38ee[_0x4fbe9a(0x3c0)](_0x3d5705||_0x4fbe9a(0xc80));},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x655)]=function(_0x116bf6,_0x2d192e,_0x2db56b,_0x458896,_0x150485){const _0x21c215=_0x5e79d1;if(!$gameSystem[_0x21c215(0x9a5)]())return;const _0x40b59d=this[_0x21c215(0x949)]();if(!_0x40b59d)return;if(_0x458896)this['setBattlerFacePoint'](_0x116bf6+_0x40b59d[_0x21c215(0x523)],_0x2d192e+_0x40b59d[_0x21c215(0x415)],![]);_0x116bf6+=_0x40b59d['_homeX'],_0x2d192e+=_0x40b59d['_homeY'],_0x40b59d['startHomeMove'](_0x116bf6,_0x2d192e,_0x2db56b,_0x150485),this[_0x21c215(0xa56)]=_0x116bf6,this[_0x21c215(0x62f)]=_0x2d192e;},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x97e)]=function(_0x375da3,_0x1041dd,_0x4ec8e1,_0xc89f7,_0xf405bf,_0x564b43){const _0x2503f2=_0x5e79d1;if(!$gameSystem['isSideView']())return;const _0x36df4d=this[_0x2503f2(0x949)]();if(!_0x36df4d)return;_0x564b43=_0x564b43||0x0;if(_0x564b43>0x0){if(_0x36df4d['_baseX']>_0x375da3)_0x375da3+=_0x36df4d[_0x2503f2(0xa0f)]/0x2+_0x564b43;if(_0x36df4d[_0x2503f2(0x523)]<_0x375da3)_0x375da3-=_0x36df4d[_0x2503f2(0xa0f)]/0x2+_0x564b43;}if(_0xc89f7)this['setBattlerFacePoint'](_0x375da3,_0x1041dd,![]);_0x36df4d[_0x2503f2(0x2e8)](_0x375da3,_0x1041dd,_0x4ec8e1,_0xf405bf),this[_0x2503f2(0xa56)]=_0x375da3,this[_0x2503f2(0x62f)]=_0x1041dd;},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x5f0)]=function(_0x2c0273,_0x51b34d,_0x21bdb4){const _0x3770d3=_0x5e79d1;if(!$gameSystem[_0x3770d3(0x9a5)]())return;const _0x436ae2=this[_0x3770d3(0x949)]();if(!_0x436ae2)return;_0x436ae2['startFloat'](_0x2c0273,_0x51b34d,_0x21bdb4);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x525)]=function(_0x125f0d,_0x2b6fd3){const _0x4369f7=_0x5e79d1;if(!$gameSystem['isSideView']())return;const _0x3e431e=this['battler']();if(!_0x3e431e)return;_0x3e431e[_0x4369f7(0x96b)](_0x125f0d,_0x2b6fd3);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x32d)]=function(_0x54b971,_0x2c6a3a,_0x32c155,_0x3d4326){const _0x1c7cc2=_0x5e79d1;if(!$gameSystem[_0x1c7cc2(0x9a5)]())return;const _0x23e522=this['battler']();if(!_0x23e522)return;_0x23e522[_0x1c7cc2(0x6d4)](_0x54b971,_0x2c6a3a,_0x32c155,_0x3d4326);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x5de)]=function(_0x52e4b5,_0x596194,_0x410fd7,_0x412242){const _0x476b2f=_0x5e79d1;if(!$gameSystem[_0x476b2f(0x9a5)]())return;const _0x2bf738=this[_0x476b2f(0x949)]();if(!_0x2bf738)return;this[_0x476b2f(0x2ff)]()&&(_0x52e4b5*=-0x1,_0x596194*=-0x1),_0x2bf738[_0x476b2f(0x2f5)](_0x52e4b5,_0x596194,_0x410fd7,_0x412242);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7a)]=function(_0x207b23,_0x2b9a6e,_0xa51046,_0x53359e){const _0x4aa0e1=_0x5e79d1;if(!$gameSystem[_0x4aa0e1(0x9a5)]())return;const _0x5c93b9=this['battler']();if(!_0x5c93b9)return;_0x5c93b9[_0x4aa0e1(0xa84)](_0x207b23,_0x2b9a6e,_0xa51046,_0x53359e);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x30e)]=function(_0x2f6c24,_0x255a41,_0x2aefdf){const _0xd24fc4=_0x5e79d1;if(!$gameSystem['isSideView']())return;const _0x3b4406=this[_0xd24fc4(0x949)]();if(!_0x3b4406)return;_0x3b4406[_0xd24fc4(0x70c)](_0x2f6c24,_0x255a41,_0x2aefdf);},Game_Battler['prototype'][_0x5e79d1(0x7c4)]=function(){const _0x36860c=_0x5e79d1,_0x53df2e=!!this['_freezeMotionData'];this[_0x36860c(0x61c)]=undefined,_0x53df2e&&(this[_0x36860c(0x4bd)](),this['clearFreezeMotionForWeapons']());},Game_Battler[_0x5e79d1(0x3a9)]['clearFreezeMotionForWeapons']=function(){const _0x2a9b96=_0x5e79d1;if(!SceneManager[_0x2a9b96(0x6a6)]())return;const _0x463177=this[_0x2a9b96(0x949)]();if(!_0x463177)return;let _0x1ccb55=this[_0x2a9b96(0x2ff)]()?_0x463177[_0x2a9b96(0x1e8)]:_0x463177[_0x2a9b96(0x4a4)][_0x2a9b96(0x1e8)];_0x1ccb55&&_0x1ccb55[_0x2a9b96(0x45d)](0x0);},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x8f8)]=function(_0x3634f3,_0x4def0c,_0x82c4e3){const _0x34e91d=_0x5e79d1;if(this[_0x34e91d(0x4cf)]()&&!this[_0x34e91d(0x3ef)]())return;let _0xb78a19=0x0,_0xcccc3c=0x0;_0x3634f3['match'](/ATTACK[ ](\d+)/i)&&(_0xcccc3c=Number(RegExp['$1']),_0xcccc3c--);if(this[_0x34e91d(0x2ff)]()){const _0x6d3ba0=this[_0x34e91d(0xc19)]();_0xb78a19=_0x6d3ba0[_0xcccc3c]?_0x6d3ba0[_0xcccc3c][_0x34e91d(0x54b)]:0x0;}else this[_0x34e91d(0x4cf)]()&&(_0xb78a19=this[_0x34e91d(0x60e)]()[_0x34e91d(0x54b)]||0x0);const _0x5473da=$dataSystem[_0x34e91d(0x6ed)][_0xb78a19];_0x3634f3['match'](/attack/i)&&(_0x3634f3=[_0x34e91d(0xa51),_0x34e91d(0x80e),_0x34e91d(0x5e9)][_0x5473da[_0x34e91d(0x31c)]]||_0x34e91d(0x80e)),this[_0x34e91d(0x61c)]={'motionType':_0x3634f3,'weaponImageId':_0x4def0c?_0x5473da[_0x34e91d(0x313)]:0x0,'pattern':_0x82c4e3};},Game_Battler[_0x5e79d1(0x3a9)]['isFriendly']=function(_0x53b966){const _0x20e7ea=_0x5e79d1;if(!_0x53b966)return![];return _0x53b966[_0x20e7ea(0xa93)]()===this['friendsUnit']();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xa11)]=function(_0x5abde6){const _0x283c3f=_0x5e79d1;if(!_0x5abde6)return![];return _0x5abde6[_0x283c3f(0x412)]()===this[_0x283c3f(0xa93)]();},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x413)]=function(){return![];},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x413)]=function(){const _0x1e3675=_0x5e79d1;return this[_0x1e3675(0x481)]()[_0x1e3675(0xcd4)](/\$/i);},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x413)]=function(){const _0x5b6fdb=_0x5e79d1;return this[_0x5b6fdb(0x3ef)]()&&this[_0x5b6fdb(0xbea)]()[_0x5b6fdb(0xcd4)](/\$/i);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xbc4)]=Game_Actor[_0x5e79d1(0x3a9)]['setup'],Game_Actor['prototype'][_0x5e79d1(0x45d)]=function(_0x201015){const _0xcd9060=_0x5e79d1;VisuMZ[_0xcd9060(0x57e)]['Game_Actor_setup']['call'](this,_0x201015),this[_0xcd9060(0x88d)]();},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x88d)]=function(){const _0x42ef08=_0x5e79d1;this[_0x42ef08(0xabc)]='',this[_0x42ef08(0x5a0)]()&&this[_0x42ef08(0x5a0)]()[_0x42ef08(0x85e)][_0x42ef08(0xcd4)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x42ef08(0xabc)]=String(RegExp['$1']));},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xc1f)]=function(){const _0x1c870a=_0x5e79d1;if(this[_0x1c870a(0x831)]()!=='')return this[_0x1c870a(0x831)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this[_0x1c870a(0x973)]()!=='')return this['getMenuImage']();}return'';},Game_Actor[_0x5e79d1(0x3a9)]['getBattlePortrait']=function(){const _0x228184=_0x5e79d1;if(this[_0x228184(0xabc)]===undefined)this[_0x228184(0x88d)]();return this[_0x228184(0xabc)];},Game_Actor[_0x5e79d1(0x3a9)]['setBattlePortrait']=function(_0x349d79){const _0x489cdd=_0x5e79d1;if(this['_battlePortrait']===undefined)this['initBattlePortrait']();this['_battlePortrait']=_0x349d79;if(SceneManager[_0x489cdd(0x6a6)]()&&$gameParty[_0x489cdd(0xb9d)]()[_0x489cdd(0x9fb)](this)){const _0x23e8ed=SceneManager[_0x489cdd(0xc59)]['_statusWindow'];_0x23e8ed&&_0x23e8ed[_0x489cdd(0xaaa)](this);}},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x93e)]=function(){return!![];},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x81d)]=function(){const _0x1eee3c=_0x5e79d1;if(!this['isConfused']()&&BattleManager[_0x1eee3c(0x8f7)])return!![];return Game_Battler[_0x1eee3c(0x3a9)]['isAutoBattle']['call'](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x45b)]=Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x93b)],Game_Actor['prototype'][_0x5e79d1(0x93b)]=function(){const _0x574d8a=_0x5e79d1;if(BattleManager[_0x574d8a(0x8f7)]&&!ConfigManager['autoBattleUseSkills'])return this[_0x574d8a(0xa48)]();else{return VisuMZ[_0x574d8a(0x57e)]['Game_Actor_makeActionList'][_0x574d8a(0x695)](this);;}},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xa48)]=function(){const _0x273148=_0x5e79d1,_0xf48726=[],_0x42a28a=new Game_Action(this);return _0x42a28a[_0x273148(0xbc1)](),_0xf48726[_0x273148(0x68a)](_0x42a28a),_0xf48726;},Game_Actor['prototype']['battleCommands']=function(){const _0xe1825f=_0x5e79d1;return this[_0xe1825f(0x64a)]()[_0xe1825f(0x85e)][_0xe1825f(0xcd4)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0xe1825f(0x60b)](/[\r\n]+/):VisuMZ[_0xe1825f(0x57e)][_0xe1825f(0xc89)][_0xe1825f(0xbfc)][_0xe1825f(0xc97)];},Game_Actor[_0x5e79d1(0x3a9)]['svBattlerAnchorX']=function(){const _0x4fd7b3=_0x5e79d1;if(this[_0x4fd7b3(0x7bb)][_0x4fd7b3(0xaba)]!==undefined)return this['_cache'][_0x4fd7b3(0xaba)];return this[_0x4fd7b3(0x5a0)]()[_0x4fd7b3(0x85e)][_0x4fd7b3(0xcd4)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x4fd7b3(0xaba)]=eval(RegExp['$1']),this[_0x4fd7b3(0x7bb)]['svAnchorY']=eval(RegExp['$2'])):this['_cache']['svAnchorX']=Game_Battler[_0x4fd7b3(0x3a9)]['svBattlerAnchorX'][_0x4fd7b3(0x695)](this),this[_0x4fd7b3(0x7bb)][_0x4fd7b3(0xaba)];},Game_Actor['prototype'][_0x5e79d1(0x278)]=function(){const _0x3c75db=_0x5e79d1;if(this[_0x3c75db(0x7bb)][_0x3c75db(0x6cb)]!==undefined)return this[_0x3c75db(0x7bb)]['svAnchorY'];return this[_0x3c75db(0x5a0)]()[_0x3c75db(0x85e)][_0x3c75db(0xcd4)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x3c75db(0xaba)]=eval(RegExp['$1']),this['_cache'][_0x3c75db(0x6cb)]=eval(RegExp['$2'])):this[_0x3c75db(0x7bb)]['svAnchorY']=Game_Battler['prototype'][_0x3c75db(0x278)][_0x3c75db(0x695)](this),this['_cache'][_0x3c75db(0x6cb)];},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x536)]=function(){const _0x1d2410=_0x5e79d1;if(this[_0x1d2410(0x7bb)][_0x1d2410(0x9ef)]!==undefined)return this[_0x1d2410(0x7bb)][_0x1d2410(0x9ef)];if(this[_0x1d2410(0x5a0)]()[_0x1d2410(0x85e)]['match'](/<SIDEVIEW SHOW SHADOW>/i))this[_0x1d2410(0x7bb)][_0x1d2410(0x9ef)]=!![];else this[_0x1d2410(0x5a0)]()[_0x1d2410(0x85e)][_0x1d2410(0xcd4)](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x1d2410(0x7bb)]['svShadow']=![]:this[_0x1d2410(0x7bb)][_0x1d2410(0x9ef)]=Game_Battler['prototype'][_0x1d2410(0x536)][_0x1d2410(0x695)](this);return this['_cache'][_0x1d2410(0x9ef)];},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xb36)]=function(){const _0x24cf6b=_0x5e79d1;return VisuMZ[_0x24cf6b(0x57e)][_0x24cf6b(0xc89)][_0x24cf6b(0x232)][_0x24cf6b(0xa30)];},Game_Actor['prototype'][_0x5e79d1(0x454)]=function(){const _0x3309c0=_0x5e79d1,_0x3bf889=this['weapons'](),_0xa1d2f6=_0x3bf889[0x0]?_0x3bf889[0x0][_0x3309c0(0x54b)]:0x0,_0x49cd97=$dataSystem[_0x3309c0(0x6ed)][_0xa1d2f6];_0x49cd97&&this[_0x3309c0(0x5a9)](_0x49cd97[_0x3309c0(0x313)]);},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x537)]=function(_0x115ac1){const _0x3d94db=_0x5e79d1;Game_Battler[_0x3d94db(0x3a9)][_0x3d94db(0x537)]['call'](this,_0x115ac1),this[_0x3d94db(0x8b1)](_0x115ac1);},Game_Actor['prototype'][_0x5e79d1(0x366)]=function(){const _0x825ed2=_0x5e79d1,_0x3ab298=this[_0x825ed2(0xc19)](),_0x26a503=_0x3ab298[0x0]?_0x3ab298[0x0][_0x825ed2(0x54b)]:0x0;return $dataSystem[_0x825ed2(0x6ed)][_0x26a503];},Game_Actor[_0x5e79d1(0x3a9)]['attackAnimationIdSlot']=function(_0x58cae9){const _0x3bebe3=_0x5e79d1;_0x58cae9=_0x58cae9||0x1,_0x58cae9--;const _0x16ee5c=this[_0x3bebe3(0xc19)]();return _0x16ee5c[_0x58cae9]?_0x16ee5c[_0x58cae9][_0x3bebe3(0x90e)]:0x0;},Game_Actor[_0x5e79d1(0x3a9)]['getAttackMotionSlot']=function(_0x21ba0e){const _0x595e7f=_0x5e79d1;_0x21ba0e=_0x21ba0e||0x1,_0x21ba0e--;const _0x231356=this[_0x595e7f(0xc19)](),_0x45af74=_0x231356[_0x21ba0e]?_0x231356[_0x21ba0e][_0x595e7f(0x54b)]:0x0;return $dataSystem[_0x595e7f(0x6ed)][_0x45af74];},Game_Actor['prototype'][_0x5e79d1(0x501)]=function(_0x415147){const _0x176eb4=_0x5e79d1;_0x415147=_0x415147||0x1,_0x415147--;const _0x163c52=this['weapons'](),_0x4ec08a=_0x163c52[_0x415147]?_0x163c52[_0x415147]['wtypeId']:0x0,_0x2da1fd=$dataSystem[_0x176eb4(0x6ed)][_0x4ec08a];if(_0x2da1fd){if(_0x2da1fd[_0x176eb4(0x31c)]===0x0)this[_0x176eb4(0x792)](_0x176eb4(0xa51));else{if(_0x2da1fd[_0x176eb4(0x31c)]===0x1)this[_0x176eb4(0x792)]('swing');else _0x2da1fd[_0x176eb4(0x31c)]===0x2&&this[_0x176eb4(0x792)](_0x176eb4(0x5e9));}this[_0x176eb4(0x5a9)](_0x2da1fd[_0x176eb4(0x313)]);}},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x5d7)]=function(_0x3da112){const _0x211741=_0x5e79d1;if(this[_0x211741(0x2ff)]()){const _0x24f183=this['weapons']();if(_0x24f183[_0x211741(0xc35)]>0x0){const _0x3ac64f=_0x24f183[_0x3da112];if(_0x3ac64f)_0x3da112=this[_0x211741(0xafe)]()[_0x211741(0x985)](_0x3ac64f);}}this[_0x211741(0x4dc)]=_0x3da112||0x0,this[_0x211741(0x7bb)]={};},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xc78)]=function(){const _0x3730b7=_0x5e79d1;this[_0x3730b7(0x4dc)]=this[_0x3730b7(0x4dc)]||0x0,this['_activeWeaponSlot']++,this[_0x3730b7(0x7bb)]={};},Game_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x8f0)]=function(){const _0x37c198=_0x5e79d1;this['_activeWeaponSlot']=undefined,this[_0x37c198(0x7bb)]={};},VisuMZ[_0x5e79d1(0x57e)]['Game_Actor_equips']=Game_Actor['prototype'][_0x5e79d1(0xafe)],Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xafe)]=function(){const _0x557e8a=_0x5e79d1;let _0x3db2a0=VisuMZ[_0x557e8a(0x57e)][_0x557e8a(0x856)][_0x557e8a(0x695)](this);if(this[_0x557e8a(0x5a4)])return _0x3db2a0;if(this[_0x557e8a(0x4dc)]!==undefined){this['_tempEquipCheck']=!![];const _0x282f4e=this[_0x557e8a(0x974)]();for(let _0x4cf7f5=0x0;_0x4cf7f5<_0x282f4e[_0x557e8a(0xc35)];_0x4cf7f5++){_0x282f4e[_0x4cf7f5]===0x1&&this[_0x557e8a(0x4dc)]!==_0x4cf7f5&&(_0x3db2a0[_0x4cf7f5]=null);}this[_0x557e8a(0x5a4)]=undefined;}return _0x3db2a0;},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xb29)]=function(_0x41d148){const _0x2ea81f=_0x5e79d1;return _0x41d148[_0x2ea81f(0x2ff)]()?_0x41d148[_0x2ea81f(0xc19)]()[_0x2ea81f(0xc35)]||0x1:0x1;},Window_BattleLog['prototype'][_0x5e79d1(0x4dd)]=function(_0x1d1eeb,_0x2d3bfa){const _0x48fbd2=_0x5e79d1;_0x1d1eeb&&_0x1d1eeb[_0x48fbd2(0x2ff)]()&&_0x1d1eeb[_0x48fbd2(0x5d7)](_0x2d3bfa),this[_0x48fbd2(0x451)]();},Window_BattleLog[_0x5e79d1(0x3a9)]['clearActiveWeaponSet']=function(_0xfc64a0){const _0x116c32=_0x5e79d1;_0xfc64a0&&_0xfc64a0[_0x116c32(0x2ff)]()&&_0xfc64a0['clearActiveWeaponSlot'](),this[_0x116c32(0x451)]();},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x553)]=function(){const _0x4dfdb8=_0x5e79d1;let _0x3b774f=_0x4dfdb8(0x553);if(this['checkCacheKey'](_0x3b774f))return this[_0x4dfdb8(0x7bb)][_0x3b774f];return this[_0x4dfdb8(0x7bb)][_0x3b774f]=this[_0x4dfdb8(0x716)](this['actor']()),this[_0x4dfdb8(0x7bb)][_0x3b774f];},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x82a)]=function(){const _0x42b0be=_0x5e79d1;let _0x91884b=_0x42b0be(0x82a);if(this['checkCacheKey'](_0x91884b))return this[_0x42b0be(0x7bb)][_0x91884b];return this[_0x42b0be(0x7bb)][_0x91884b]=this['createBattleUIOffsetY'](this[_0x42b0be(0x5a0)]()),this[_0x42b0be(0x7bb)][_0x91884b];},VisuMZ['BattleCore'][_0x5e79d1(0x2fc)]=Game_Enemy['prototype'][_0x5e79d1(0x45d)],Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x45d)]=function(_0x1737f3,_0x3a7450,_0x27188c){const _0x5ea0bd=_0x5e79d1;_0x1737f3=DataManager[_0x5ea0bd(0x68d)](_0x1737f3),VisuMZ[_0x5ea0bd(0x57e)][_0x5ea0bd(0x2fc)][_0x5ea0bd(0x695)](this,_0x1737f3,_0x3a7450,_0x27188c),Imported[_0x5ea0bd(0xb12)]&&this[_0x5ea0bd(0x4f4)](),this['clearBattleCoreData'](),this['setupBattleCoreData'](),this[_0x5ea0bd(0x354)](),Imported[_0x5ea0bd(0xb12)]&&this[_0x5ea0bd(0x764)]();},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x35b)]=function(){const _0x45defa=_0x5e79d1,_0x3a7e8d=VisuMZ[_0x45defa(0x57e)][_0x45defa(0xc89)]['Enemy'];this[_0x45defa(0x9eb)]=_0x3a7e8d[_0x45defa(0x44c)],this[_0x45defa(0x64f)]={},this[_0x45defa(0xa60)]();},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x239)]=function(){const _0x27caa8=_0x5e79d1,_0x5d1a69=VisuMZ[_0x27caa8(0x57e)]['Settings']['Enemy'],_0x29bcde=this[_0x27caa8(0xbd5)]()[_0x27caa8(0x85e)];this[_0x27caa8(0x64f)]={'name':'','wtypeId':_0x5d1a69[_0x27caa8(0x4c3)],'collapse':_0x5d1a69[_0x27caa8(0x7e9)],'motionIdle':_0x5d1a69[_0x27caa8(0x5af)],'width':_0x5d1a69[_0x27caa8(0x218)]||0x40,'height':_0x5d1a69['Height']||0x40,'anchorX':_0x5d1a69['AnchorX']||0x0,'anchorY':_0x5d1a69[_0x27caa8(0x1ef)]||0x0,'shadow':_0x5d1a69[_0x27caa8(0x460)]};_0x29bcde['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x3c3167=this[_0x27caa8(0x64f)];if(_0x29bcde[_0x27caa8(0xcd4)](/<SIDEVIEW BATTLER: (.*)>/i))_0x3c3167[_0x27caa8(0x66e)]=String(RegExp['$1']);else{if(_0x29bcde['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x4d9eaa=String(RegExp['$1'])[_0x27caa8(0x60b)](/[\r\n]+/)[_0x27caa8(0x9b8)]('');_0x3c3167[_0x27caa8(0x66e)]=DataManager['processRandomizedData'](_0x4d9eaa);}}_0x29bcde['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x3c3167['anchorX']=eval(RegExp['$1']),_0x3c3167[_0x27caa8(0xa9d)]=eval(RegExp['$2']));if(_0x29bcde[_0x27caa8(0xcd4)](/<SIDEVIEW COLLAPSE>/i))_0x3c3167[_0x27caa8(0x3d5)]=!![];else _0x29bcde[_0x27caa8(0xcd4)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x3c3167['collapse']=![]);if(_0x29bcde[_0x27caa8(0xcd4)](/<SIDEVIEW SHOW SHADOW>/i))_0x3c3167['shadow']=!![];else _0x29bcde['match'](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x3c3167[_0x27caa8(0xb58)]=![]);if(_0x29bcde[_0x27caa8(0xcd4)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x3c3167['motionIdle']=String(RegExp['$1'])[_0x27caa8(0xbee)]()[_0x27caa8(0xacc)]();else{if(_0x29bcde[_0x27caa8(0xcd4)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x1af25c=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x27caa8(0x9b8)]('');_0x3c3167[_0x27caa8(0x5ea)]=DataManager['processRandomizedData'](_0x1af25c);}}_0x29bcde['match'](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x3c3167[_0x27caa8(0xa0f)]=Number(RegExp['$1']),_0x3c3167[_0x27caa8(0x912)]=Number(RegExp['$2']));if(_0x29bcde['match'](/<SIDEVIEW WEAPON: (.*)>/i))_0x3c3167[_0x27caa8(0x54b)]=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0x29bcde[_0x27caa8(0xcd4)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x60c7d3=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x27caa8(0x9b8)](''),_0x2a6605=DataManager[_0x27caa8(0xaff)](_0x60c7d3);_0x3c3167['wtypeId']=DataManager[_0x27caa8(0x462)](_0x2a6605);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x55db3e=this[_0x27caa8(0xa1c)]();for(const _0x2d1736 of _0x55db3e){const _0x42c4d9=this[_0x27caa8(0x81f)](_0x2d1736)[_0x27caa8(0x330)][_0x27caa8(0xcde)]()[_0x27caa8(0xacc)](),_0x44df1d=_0x2d1736[_0x27caa8(0xcde)]()[_0x27caa8(0xacc)]();if(_0x29bcde['match'](VisuMZ[_0x27caa8(0xb3a)][_0x27caa8(0x9fe)]['SvBattlerSolo-%1-%2'[_0x27caa8(0x2a0)](_0x44df1d,_0x42c4d9)]))_0x3c3167[_0x27caa8(0x66e)]=String(RegExp['$1']);else{if(_0x29bcde[_0x27caa8(0xcd4)](VisuMZ[_0x27caa8(0xb3a)]['RegExp']['SvBattlerMass-%1-%2'['format'](_0x44df1d,_0x42c4d9)])){const _0xbeaccf=String(RegExp['$1'])[_0x27caa8(0x60b)](/[\r\n]+/)[_0x27caa8(0x9b8)]('');_0x3c3167[_0x27caa8(0x66e)]=DataManager['processRandomizedData'](_0xbeaccf);}}if(_0x29bcde[_0x27caa8(0xcd4)](VisuMZ['ElementStatusCore'][_0x27caa8(0x9fe)]['SvWeaponSolo-%1-%2'[_0x27caa8(0x2a0)](_0x44df1d,_0x42c4d9)]))_0x3c3167['wtypeId']=DataManager[_0x27caa8(0x462)](RegExp['$1']);else{if(_0x29bcde[_0x27caa8(0xcd4)](VisuMZ[_0x27caa8(0xb3a)][_0x27caa8(0x9fe)][_0x27caa8(0x418)[_0x27caa8(0x2a0)](_0x44df1d,_0x42c4d9)])){const _0xaef945=String(RegExp['$1'])[_0x27caa8(0x60b)](/[\r\n]+/)[_0x27caa8(0x9b8)](''),_0x2f7b6e=DataManager[_0x27caa8(0xaff)](_0xaef945);_0x3c3167['wtypeId']=DataManager[_0x27caa8(0x462)](_0x2f7b6e);}}if(_0x29bcde[_0x27caa8(0xcd4)](VisuMZ[_0x27caa8(0xb3a)][_0x27caa8(0x9fe)][_0x27caa8(0x8ff)[_0x27caa8(0x2a0)](_0x44df1d,_0x42c4d9)]))_0x3c3167['motionIdle']=String(RegExp['$1'])[_0x27caa8(0xbee)]()[_0x27caa8(0xacc)]();else{if(_0x29bcde[_0x27caa8(0xcd4)](VisuMZ[_0x27caa8(0xb3a)]['RegExp'][_0x27caa8(0x836)[_0x27caa8(0x2a0)](_0x44df1d,_0x42c4d9)])){const _0x157565=String(RegExp['$1'])[_0x27caa8(0x60b)](/[\r\n]+/)[_0x27caa8(0x9b8)]('');_0x3c3167['motionIdle']=DataManager[_0x27caa8(0xaff)](_0x157565);}}}}},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x4e6)]=function(){const _0x1bbc94=_0x5e79d1;return this[_0x1bbc94(0x9eb)]||0x0;},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x774)]=function(){const _0x1e1267=_0x5e79d1;return this[_0x1e1267(0x4e6)]();},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x993)]=function(_0x5c1038){const _0x3983b5=_0x5e79d1;return this[_0x3983b5(0x4e6)]();},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb6e)]=function(){const _0x529cf4=_0x5e79d1;if(this['enemy']()[_0x529cf4(0x85e)]['match'](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x529cf4(0x3a9)][_0x529cf4(0xb6e)][_0x529cf4(0x695)](this);},Game_Enemy[_0x5e79d1(0x3a9)]['isBattlerGrounded']=function(){const _0x30a3e7=_0x5e79d1;if(this[_0x30a3e7(0xbd5)]()[_0x30a3e7(0x85e)][_0x30a3e7(0xcd4)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x60a)]=function(){const _0x912c49=_0x5e79d1,_0x8c3b3d=[];for(const _0x2b0f98 of this[_0x912c49(0xbd5)]()['actions']){const _0x2312bd=$dataSkills[_0x2b0f98[_0x912c49(0xa4b)]];if(_0x2312bd&&!_0x8c3b3d[_0x912c49(0x9fb)](_0x2312bd))_0x8c3b3d['push'](_0x2312bd);}return _0x8c3b3d;},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x553)]=function(){const _0x46cc3b=_0x5e79d1;let _0x3200e8=_0x46cc3b(0x553);if(this[_0x46cc3b(0x7ac)](_0x3200e8))return this[_0x46cc3b(0x7bb)][_0x3200e8];return this['_cache'][_0x3200e8]=this['createBattleUIOffsetX'](this[_0x46cc3b(0xbd5)]()),this[_0x46cc3b(0x7bb)][_0x3200e8];},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x82a)]=function(){const _0xa6c5b2=_0x5e79d1;let _0x1138a5=_0xa6c5b2(0x82a);if(this[_0xa6c5b2(0x7ac)](_0x1138a5))return this[_0xa6c5b2(0x7bb)][_0x1138a5];return this[_0xa6c5b2(0x7bb)][_0x1138a5]=this['createBattleUIOffsetY'](this[_0xa6c5b2(0xbd5)]()),this[_0xa6c5b2(0x7bb)][_0x1138a5];},Game_Enemy[_0x5e79d1(0x3a9)]['svBattlerData']=function(){const _0x252005=_0x5e79d1;if(this[_0x252005(0x64f)]!==undefined)return this[_0x252005(0x64f)];return this[_0x252005(0x239)](),this[_0x252005(0x64f)];},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x3ef)]=function(){const _0x4231b4=_0x5e79d1;return this[_0x4231b4(0x60e)]()['name']!=='';},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xbea)]=function(){const _0x28cb0d=_0x5e79d1;return this[_0x28cb0d(0x60e)]()[_0x28cb0d(0x66e)];},Game_Enemy[_0x5e79d1(0x3a9)]['battlerSmoothImage']=function(){const _0x4186f9=_0x5e79d1;return this[_0x4186f9(0x3ef)]()?VisuMZ[_0x4186f9(0x57e)][_0x4186f9(0xc89)]['Actor'][_0x4186f9(0xa30)]:VisuMZ[_0x4186f9(0x57e)][_0x4186f9(0xc89)][_0x4186f9(0xb2e)][_0x4186f9(0xa30)];},Game_Enemy['prototype'][_0x5e79d1(0x537)]=function(_0x2c6993){const _0x162594=_0x5e79d1;Game_Battler[_0x162594(0x3a9)][_0x162594(0x537)]['call'](this,_0x2c6993);if(this[_0x162594(0x3ef)]())this[_0x162594(0x8b1)](_0x2c6993);},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f5)]=function(){const _0x3ff849=_0x5e79d1,_0x159ee0=this[_0x3ff849(0x60e)]()[_0x3ff849(0x54b)]||0x0,_0x455737=$dataSystem[_0x3ff849(0x6ed)][_0x159ee0];if(_0x455737){if(_0x455737[_0x3ff849(0x31c)]===0x0)this[_0x3ff849(0x792)](_0x3ff849(0xa51));else{if(_0x455737[_0x3ff849(0x31c)]===0x1)this[_0x3ff849(0x792)](_0x3ff849(0x80e));else _0x455737['type']===0x2&&this[_0x3ff849(0x792)](_0x3ff849(0x5e9));}}},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x454)]=function(){const _0x26a1dc=_0x5e79d1,_0x39d745=this['svBattlerData']()[_0x26a1dc(0x54b)]||0x0,_0x25d486=$dataSystem[_0x26a1dc(0x6ed)][_0x39d745];_0x25d486&&this['startWeaponAnimation'](_0x25d486[_0x26a1dc(0x313)]);},Game_Enemy['prototype'][_0x5e79d1(0x366)]=function(){const _0x375a27=_0x5e79d1,_0x59ce35=this[_0x375a27(0x60e)]()['wtypeId']||0x0;return $dataSystem[_0x375a27(0x6ed)][_0x59ce35];},Game_Enemy['prototype'][_0x5e79d1(0xaca)]=function(_0x3d4a0e){const _0x2e097a=_0x5e79d1;return this[_0x2e097a(0x366)]();},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ce)]=function(){const _0x1804dc=_0x5e79d1;Game_Battler[_0x1804dc(0x3a9)]['performDamage'][_0x1804dc(0x695)](this),this[_0x1804dc(0x93e)]()&&this['hasSvBattler']()&&this['requestMotion'](_0x1804dc(0x6e4)),SoundManager[_0x1804dc(0x7a5)]();},Game_Enemy['prototype'][_0x5e79d1(0x3c3)]=function(){const _0x4b345b=_0x5e79d1;Game_Battler[_0x4b345b(0x3a9)][_0x4b345b(0x3c3)][_0x4b345b(0x695)](this),this[_0x4b345b(0x792)]('evade');},Game_Enemy['prototype'][_0x5e79d1(0x7ab)]=function(){const _0x238a9d=_0x5e79d1;Game_Battler['prototype'][_0x238a9d(0x7ab)]['call'](this),this[_0x238a9d(0x792)](_0x238a9d(0x7d8));},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x94d)]=function(){const _0x1a669d=_0x5e79d1;Game_Battler[_0x1a669d(0x3a9)][_0x1a669d(0x94d)][_0x1a669d(0x695)](this),this[_0x1a669d(0x3f5)]();},Game_Enemy[_0x5e79d1(0x3a9)]['allowCollapse']=function(){const _0xddd88c=_0x5e79d1;if(this[_0xddd88c(0x3ef)]()){if(this['collapseType']()>=0x1)return!![];return this['svBattlerData']()[_0xddd88c(0x3d5)];}else return!![];},Game_Enemy[_0x5e79d1(0x3a9)]['svBattlerAnchorX']=function(){const _0x48a8c6=_0x5e79d1;return this[_0x48a8c6(0x60e)]()[_0x48a8c6(0x327)];},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x278)]=function(){const _0x3a1738=_0x5e79d1;return this[_0x3a1738(0x60e)]()['anchorY'];},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x536)]=function(){const _0x2591c5=_0x5e79d1;return this['svBattlerData']()[_0x2591c5(0xb58)];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x258)]=Game_Enemy['prototype']['transform'],Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x1ca)]=function(_0x4c3f9d){const _0x3b3849=_0x5e79d1;VisuMZ['BattleCore'][_0x3b3849(0x258)][_0x3b3849(0x695)](this,_0x4c3f9d),this[_0x3b3849(0x35b)](),this[_0x3b3849(0x239)]();const _0x389bd5=this['battler']();_0x389bd5&&(_0x389bd5[_0x3b3849(0x2d7)]=undefined,_0x389bd5['setBattler'](this));},Game_Enemy[_0x5e79d1(0x3a9)]['resetNameTempVisibility']=function(){const _0x1e0f6f=_0x5e79d1,_0x235ea2=VisuMZ[_0x1e0f6f(0x57e)][_0x1e0f6f(0xc89)][_0x1e0f6f(0xb2e)];this[_0x1e0f6f(0x333)]=_0x235ea2[_0x1e0f6f(0x817)]??0x0;},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xce9)]=function(){const _0xec4d78=_0x5e79d1;return this[_0xec4d78(0x333)]&&this[_0xec4d78(0x333)]>0x0;},Game_Enemy[_0x5e79d1(0x3a9)]['updateNameTempVisibility']=function(){this['_nameTempVisibleDuration']&&this['_nameTempVisibleDuration']>0x0&&this['_nameTempVisibleDuration']--;},Game_Enemy[_0x5e79d1(0x3a9)]['clearNameTempVisibility']=function(){const _0x6feec5=_0x5e79d1;this[_0x6feec5(0x333)]=0x0;},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x354)]=function(){const _0x4a1391=_0x5e79d1;this[_0x4a1391(0x706)]();const _0x4217f3=this[_0x4a1391(0xbd5)]()['note']||'';if(_0x4217f3[_0x4a1391(0xcd4)](/<ASPECT NAME:[ ](.*)>/i)){const _0x45fced=String(RegExp['$1']);this[_0x4a1391(0xa18)]()[_0x4a1391(0x66e)]=_0x45fced[_0x4a1391(0x2a0)](this[_0x4a1391(0x812)]());}_0x4217f3[_0x4a1391(0xcd4)](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x4a1391(0xa18)]()[_0x4a1391(0xae7)]=Number(RegExp['$1'])),_0x4217f3[_0x4a1391(0xcd4)](/<ASPECT COLOR:[ ](.*)>/i)&&(this['getAspectData']()['nameColor']=String(RegExp['$1'])),_0x4217f3[_0x4a1391(0xcd4)](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x4a1391(0xa18)]()[_0x4a1391(0x24b)]=String(RegExp['$1']));},Game_Enemy['prototype'][_0x5e79d1(0x706)]=function(){const _0x374527=_0x5e79d1,_0x250df6=VisuMZ[_0x374527(0x57e)][_0x374527(0xc89)][_0x374527(0xb2e)]['AspectNameFmt']??'%1\x20Aspect';this[_0x374527(0x804)]={'name':_0x250df6[_0x374527(0x2a0)](this[_0x374527(0x812)]()),'iconIndex':VisuMZ[_0x374527(0x57e)][_0x374527(0xc89)]['Enemy'][_0x374527(0xc60)]??0x1a,'nameColor':VisuMZ[_0x374527(0x57e)][_0x374527(0xc89)][_0x374527(0xb2e)]['AspectColor']??'2','description':''};},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xa18)]=function(){const _0x5a4095=_0x5e79d1;if(this[_0x5a4095(0x804)]===undefined)this[_0x5a4095(0x354)]();return this[_0x5a4095(0x804)];},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x7f8)]=function(){const _0x50b816=_0x5e79d1;return(this[_0x50b816(0xa18)]()['description']||'')[_0x50b816(0xc35)]>0x0;},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x5a6)]=function(){const _0x371dda=_0x5e79d1;return VisuMZ[_0x371dda(0x57e)]['Settings'][_0x371dda(0xb4c)][_0x371dda(0x287)];},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x5a6)]=function(){const _0xf60f83=_0x5e79d1,_0x45bb98=this[_0xf60f83(0xbd5)]()?this['enemy']()[_0xf60f83(0x85e)]||'':'';if(_0x45bb98[_0xf60f83(0xcd4)](/<POPUP POSITION: HEAD>/i))return _0xf60f83(0xc7b);else{if(_0x45bb98[_0xf60f83(0xcd4)](/<POPUP POSITION: CENTER>/i))return _0xf60f83(0x2ad);else{if(_0x45bb98[_0xf60f83(0xcd4)](/<POPUP POSITION: BASE>/i))return _0xf60f83(0x867);}}return Game_BattlerBase['prototype']['damagePopupPosition']['call'](this);},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x9a8)]=function(){return 0x0;},Game_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x9a8)]=function(){const _0x485cda=_0x5e79d1,_0x45f5a1=this['enemy']()?this['enemy']()[_0x485cda(0x85e)]||'':'';if(_0x45f5a1[_0x485cda(0xcd4)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x485cda(0x9a8)][_0x485cda(0x695)](this);},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x619)]=function(){return 0x0;},Game_Enemy['prototype'][_0x5e79d1(0x619)]=function(){const _0x40b070=_0x5e79d1,_0x406ff9=this[_0x40b070(0xbd5)]()?this[_0x40b070(0xbd5)]()[_0x40b070(0x85e)]||'':'';if(_0x406ff9[_0x40b070(0xcd4)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase['prototype'][_0x40b070(0x619)]['call'](this);},Game_Unit[_0x5e79d1(0x3a9)]['processBattleCoreJS']=function(_0x4843f5){const _0x546d04=_0x5e79d1;for(const _0x170099 of this[_0x546d04(0x6fd)]()){if(_0x170099)_0x170099[_0x546d04(0x8c4)](_0x4843f5);}},Game_Unit[_0x5e79d1(0x3a9)]['trueRandomTarget']=function(){const _0x3fb285=_0x5e79d1,_0x3e4521=this[_0x3fb285(0x43a)]();return _0x3e4521[Math['randomInt'](_0x3e4521['length'])];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x22a)]=Game_Party[_0x5e79d1(0x3a9)][_0x5e79d1(0x328)],Game_Party[_0x5e79d1(0x3a9)][_0x5e79d1(0x328)]=function(_0x338e2c){const _0x5ab1c0=_0x5e79d1;VisuMZ['BattleCore'][_0x5ab1c0(0x22a)]['call'](this,_0x338e2c),BattleManager[_0x5ab1c0(0x654)]();},VisuMZ['BattleCore'][_0x5e79d1(0x8c7)]=Game_Party[_0x5e79d1(0x3a9)][_0x5e79d1(0x901)],Game_Party[_0x5e79d1(0x3a9)][_0x5e79d1(0x901)]=function(_0x572921){const _0x315546=_0x5e79d1;VisuMZ['BattleCore']['Game_Party_removeActor'][_0x315546(0x695)](this,_0x572921),BattleManager[_0x315546(0x654)]();},VisuMZ['BattleCore'][_0x5e79d1(0x88c)]=Game_Troop['prototype'][_0x5e79d1(0x45d)],Game_Troop[_0x5e79d1(0x3a9)]['setup']=function(_0xb20c04){const _0x5343e1=_0x5e79d1;$gameTemp[_0x5343e1(0x480)](),$gameTemp[_0x5343e1(0x342)](_0xb20c04),VisuMZ[_0x5343e1(0x57e)]['Game_Troop_setup']['call'](this,_0xb20c04),this[_0x5343e1(0x485)]();},VisuMZ['BattleCore'][_0x5e79d1(0x738)]=Game_Troop[_0x5e79d1(0x3a9)]['expTotal'],Game_Troop[_0x5e79d1(0x3a9)]['expTotal']=function(){const _0x2f0bc6=_0x5e79d1;let _0x2668e0=VisuMZ['BattleCore'][_0x2f0bc6(0x738)][_0x2f0bc6(0x695)](this);return this[_0x2f0bc6(0x74e)]&&(_0x2668e0*=this[_0x2f0bc6(0x74e)]()),Math['ceil'](_0x2668e0);},Game_Troop[_0x5e79d1(0x3a9)][_0x5e79d1(0x74e)]=function(){return 0x1;},Game_Troop['prototype'][_0x5e79d1(0x485)]=function(){const _0x750c3e=_0x5e79d1,_0x3d4884=DataManager['createTroopNote'](this[_0x750c3e(0x4e3)]()['id']);if(_0x3d4884['match'](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x43d1c3=RegExp['$1'][_0x750c3e(0x60b)](',')[_0x750c3e(0x343)](_0x1e3646=>Number(_0x1e3646));this[_0x750c3e(0x235)](),this['processExtendTroopMembers'](_0x43d1c3);}},Game_Troop[_0x5e79d1(0x3a9)]['checkExtendTroopCompatibility']=function(){const _0x2f2a1f=_0x5e79d1;let _0x417b02=_0x2f2a1f(0x496)+'\x0a';_0x417b02+=_0x2f2a1f(0x940),Imported[_0x2f2a1f(0x616)]&&(VisuMZ[_0x2f2a1f(0x583)][_0x2f2a1f(0xae5)]<1.11&&(alert(_0x417b02['format'](_0x2f2a1f(0xa66))),SceneManager[_0x2f2a1f(0x9e8)]())),Imported[_0x2f2a1f(0xa62)]&&(VisuMZ['BattleSystemCTB'][_0x2f2a1f(0xae5)]<1.19&&(alert(_0x417b02[_0x2f2a1f(0x2a0)](_0x2f2a1f(0x394))),SceneManager[_0x2f2a1f(0x9e8)]())),Imported[_0x2f2a1f(0x858)]&&(VisuMZ[_0x2f2a1f(0x359)][_0x2f2a1f(0xae5)]<1.15&&(alert(_0x417b02[_0x2f2a1f(0x2a0)](_0x2f2a1f(0x534))),SceneManager['exit']()));},Game_Troop[_0x5e79d1(0x3a9)][_0x5e79d1(0xc29)]=function(_0x5d9a08){const _0x16968d=_0x5e79d1;this[_0x16968d(0x96f)]={};for(const _0x174339 of this[_0x16968d(0x6fd)]()){if(!_0x174339)continue;_0x174339[_0x16968d(0xbc8)]('');}for(const _0x38a3c5 of _0x5d9a08){const _0x1fe2ec=$dataTroops[_0x38a3c5];if(_0x1fe2ec)this[_0x16968d(0x484)](_0x1fe2ec);}this[_0x16968d(0x5ac)]();},Game_Troop['prototype']['addExtendedTroopMembers']=function(_0x3b0dca){const _0x53e79e=_0x5e79d1;for(const _0x155cc5 of _0x3b0dca['members']){if($dataEnemies[_0x155cc5[_0x53e79e(0x6d7)]]){const _0xe8dbf7=_0x155cc5[_0x53e79e(0x6d7)],_0x2fe399=_0x155cc5['x'],_0x492709=_0x155cc5['y'],_0x246854=new Game_Enemy(_0xe8dbf7,_0x2fe399,_0x492709);_0x155cc5[_0x53e79e(0x2d3)]&&_0x246854['hide'](),this[_0x53e79e(0x275)][_0x53e79e(0x68a)](_0x246854);}}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc4f)]=Game_Map['prototype'][_0x5e79d1(0xc5d)],Game_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0xc5d)]=function(){const _0x182cce=_0x5e79d1;VisuMZ['BattleCore'][_0x182cce(0xc4f)][_0x182cce(0x695)](this),this[_0x182cce(0xabe)]();},Game_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0xabe)]=function(){const _0x5d69bf=_0x5e79d1;this['_regionBattleback1']={},this[_0x5d69bf(0x434)]={};if(!$dataMap)return;const _0x337d87=$dataMap[_0x5d69bf(0x85e)];if(!_0x337d87)return;const _0x3e7b36=_0x337d87['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x3e7b36)for(const _0x40b2be of _0x3e7b36){_0x40b2be[_0x5d69bf(0xcd4)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x9c88fa=Number(RegExp['$1']),_0x1ee2e3=Number(RegExp['$2']),_0xa1c563=_0x1ee2e3===0x1?this['_regionBattleback1']:this[_0x5d69bf(0x434)],_0x347ab7=String(RegExp['$3']);_0xa1c563[_0x9c88fa]=_0x347ab7;}},VisuMZ[_0x5e79d1(0x57e)]['Game_Map_battleback1Name']=Game_Map['prototype'][_0x5e79d1(0x233)],Game_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0x233)]=function(){const _0x2a2560=_0x5e79d1;if(!BattleManager['isBattleTest']()){const _0x4be1df=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x2a2560(0x5f1)][_0x4be1df])return this['_regionBattleback1'][_0x4be1df];}return VisuMZ[_0x2a2560(0x57e)][_0x2a2560(0x6b5)][_0x2a2560(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x7dc)]=Game_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0x944)],Game_Map[_0x5e79d1(0x3a9)]['battleback2Name']=function(){const _0x48ff4f=_0x5e79d1;if(!BattleManager[_0x48ff4f(0xcb8)]()){const _0x428f6f=$gamePlayer[_0x48ff4f(0x607)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x48ff4f(0x5f1)]&&this[_0x48ff4f(0x434)][_0x428f6f])return this['_regionBattleback2'][_0x428f6f];}return VisuMZ[_0x48ff4f(0x57e)]['Game_Map_battleback2Name'][_0x48ff4f(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)]['Game_Map_encounterList']=Game_Map['prototype']['encounterList'],Game_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0x2b6)]=function(){const _0x291616=_0x5e79d1;let _0x57a039=JsonEx[_0x291616(0xbec)](VisuMZ[_0x291616(0x57e)][_0x291616(0x76a)]['call'](this));return VisuMZ['BattleCore'][_0x291616(0x3c6)](_0x57a039);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x3c6)]=function(_0x1b3d59){const _0x2515b7=_0x5e79d1;var _0x593cfb,_0x288e8a,_0x5d5da1;for(_0x5d5da1=_0x1b3d59['length']-0x1;_0x5d5da1>0x0;_0x5d5da1--){_0x593cfb=Math[_0x2515b7(0x48d)](Math[_0x2515b7(0xc61)]()*(_0x5d5da1+0x1)),_0x288e8a=_0x1b3d59[_0x5d5da1],_0x1b3d59[_0x5d5da1]=_0x1b3d59[_0x593cfb],_0x1b3d59[_0x593cfb]=_0x288e8a;}return _0x1b3d59;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x5a1)]=Game_Interpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x9d9)],Game_Interpreter[_0x5e79d1(0x3a9)]['command357']=function(_0x136788){const _0x5a8aaf=_0x5e79d1;return $gameTemp[_0x5a8aaf(0x3c2)](this),VisuMZ[_0x5a8aaf(0x57e)][_0x5a8aaf(0x5a1)][_0x5a8aaf(0x695)](this,_0x136788);},VisuMZ[_0x5e79d1(0x57e)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x5e79d1(0x3a9)]['updateWaitMode'],Game_Interpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x34a)]=function(){const _0x1fe0ac=_0x5e79d1;if(SceneManager[_0x1fe0ac(0x6a6)]())switch(this[_0x1fe0ac(0x350)]){case _0x1fe0ac(0x76b):if(Imported[_0x1fe0ac(0x857)]){if($gameScreen[_0x1fe0ac(0xb83)]()[_0x1fe0ac(0x8ad)]>0x0)return!![];this[_0x1fe0ac(0x350)]='';}break;case _0x1fe0ac(0x79a):if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x5c6)]())return!![];this['_waitMode']='';break;case'battleBalloon':if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x6a8)]())return!![];this[_0x1fe0ac(0x350)]='';break;case _0x1fe0ac(0x28c):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x1fe0ac(0xb83)]()[_0x1fe0ac(0x3bf)]>0x0)return!![];if($gameScreen['battleCameraData']()[_0x1fe0ac(0x2c0)]>0x0)return!![];this[_0x1fe0ac(0x350)]='';}break;case _0x1fe0ac(0x383):if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0xcb5)]())return!![];this[_0x1fe0ac(0x350)]='';break;case _0x1fe0ac(0x24f):if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x9d6)]())return!![];this[_0x1fe0ac(0x350)]='';break;case _0x1fe0ac(0x9f0):if(BattleManager[_0x1fe0ac(0x29c)]['isAnyoneJumping']())return!![];this[_0x1fe0ac(0x350)]='';break;case _0x1fe0ac(0x625):if(BattleManager[_0x1fe0ac(0x556)][_0x1fe0ac(0x635)]())return!![];this['_waitMode']='';break;case _0x1fe0ac(0x946):if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x2bd)]())return!![];this[_0x1fe0ac(0x350)]='';break;case'battleOpacity':if(BattleManager['_spriteset'][_0x1fe0ac(0x574)]())return!![];this[_0x1fe0ac(0x350)]='';break;case'battleGrow':if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x662)]())return!![];this[_0x1fe0ac(0x350)]='';break;case _0x1fe0ac(0x4fb):if(BattleManager['_spriteset']['isAnyoneSkewing']())return!![];this[_0x1fe0ac(0x350)]='';break;case _0x1fe0ac(0x81c):if(Imported[_0x1fe0ac(0x479)]){if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x8c2)]())return!![];this['_waitMode']='';}break;case _0x1fe0ac(0x1fa):if(Imported[_0x1fe0ac(0x857)]){if($gameScreen['battleCameraData']()[_0x1fe0ac(0x399)]>0x0)return!![];this[_0x1fe0ac(0x350)]='';}break;case _0x1fe0ac(0x502):if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x5b9)]())return!![];this[_0x1fe0ac(0x350)]='';break;case _0x1fe0ac(0xce6):if(Imported[_0x1fe0ac(0x857)]){if($gameScreen[_0x1fe0ac(0xb83)]()[_0x1fe0ac(0x7db)]>0x0)return!![];this[_0x1fe0ac(0x350)]='';}break;case'battleInjectPrep':if(Imported[_0x1fe0ac(0x800)]){if(BattleManager['_spriteset'][_0x1fe0ac(0x7a0)]){if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x7a0)]())return!![];this[_0x1fe0ac(0x350)]=_0x1fe0ac(0xae4);}else this[_0x1fe0ac(0x350)]='';break;}break;case _0x1fe0ac(0xae4):if(Imported[_0x1fe0ac(0x800)]){if(BattleManager[_0x1fe0ac(0x29c)][_0x1fe0ac(0x947)]())return!![];this[_0x1fe0ac(0x350)]='';}break;}return VisuMZ[_0x1fe0ac(0x57e)][_0x1fe0ac(0xa7f)][_0x1fe0ac(0x695)](this);},VisuMZ['BattleCore'][_0x5e79d1(0x92f)]=Game_Interpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x49f)],Game_Interpreter['prototype'][_0x5e79d1(0x49f)]=function(_0x2d267a){const _0x52b0d1=_0x5e79d1;return!$gameParty['inBattle']()?this[_0x52b0d1(0x64e)](_0x2d267a):VisuMZ[_0x52b0d1(0x57e)]['Game_Interpreter_command301']['call'](this,_0x2d267a);},Game_Interpreter[_0x5e79d1(0x3a9)]['command3011']=function(_0x125bbb){const _0x48fbe1=_0x5e79d1;return VisuMZ[_0x48fbe1(0x57e)][_0x48fbe1(0x92f)][_0x48fbe1(0x695)](this,_0x125bbb),BattleManager['setEventCallback'](_0x32fcb1=>{const _0x1f93ae=_0x48fbe1;this['_branch'][this[_0x1f93ae(0x778)]]=_0x32fcb1;}),!![];},VisuMZ['BattleCore']['CheckMapBattleEventValid']=function(_0x2f842a){const _0x44f60c=_0x5e79d1,_0x39749b=$dataCommonEvents[_0x2f842a];if(!_0x39749b)return![];if(_0x39749b[_0x44f60c(0x69f)][_0x44f60c(0xc35)]<=0x1)return![];return!![];},Game_Interpreter['prototype'][_0x5e79d1(0x64e)]=function(_0x274ea5){const _0x283d62=_0x5e79d1,_0x37a964=VisuMZ['BattleCore'][_0x283d62(0xc89)][_0x283d62(0x368)],_0x3d8f22=_0x37a964[_0x283d62(0x67f)],_0x30dce8=$dataCommonEvents[_0x3d8f22];if(_0x30dce8&&VisuMZ[_0x283d62(0x57e)][_0x283d62(0xb57)](_0x3d8f22)){const _0x481695=this[_0x283d62(0xb93)]()?this['_eventId']:0x0,_0x4d740b=_0x30dce8['list'];this[_0x283d62(0x322)](_0x4d740b,_0x481695),this[_0x283d62(0xa1a)]=JsonEx[_0x283d62(0xbec)](this[_0x283d62(0xa1a)]);const _0x5042e1={'code':0xbc3,'indent':this[_0x283d62(0x778)],'parameters':JsonEx[_0x283d62(0xbec)](_0x274ea5)};return this['_list'][_0x283d62(0x387)](this[_0x283d62(0xb98)]+0x1,0x0,_0x5042e1),!![];}else return VisuMZ['BattleCore']['Game_Interpreter_command301'][_0x283d62(0x695)](this,_0x274ea5);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x5b0)]=BattleManager[_0x5e79d1(0xc7e)],BattleManager['onEncounter']=function(){const _0x48f70a=_0x5e79d1;VisuMZ[_0x48f70a(0x57e)]['BattleManager_onEncounter']['call'](this),this[_0x48f70a(0x7ea)]();},BattleManager[_0x5e79d1(0x7ea)]=function(){const _0x58f38d=_0x5e79d1,_0x1fb06d=VisuMZ['BattleCore'][_0x58f38d(0xc89)][_0x58f38d(0x368)],_0x2e0658=_0x1fb06d['BattleStartEvent'];_0x2e0658&&VisuMZ[_0x58f38d(0x57e)][_0x58f38d(0xb57)](_0x2e0658)&&(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x58f38d(0x92c)](_0x1fb06d[_0x58f38d(0x67f)]),$gameMap[_0x58f38d(0x459)](),$gameMap[_0x58f38d(0x9b7)][_0x58f38d(0x798)]=!![]),_0x1fb06d[_0x58f38d(0x1da)]>0x0&&(this[_0x58f38d(0x30c)]=!![]);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x47c)]=Scene_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0x604)],Scene_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0x604)]=function(){const _0x260f7b=_0x5e79d1;if(BattleManager[_0x260f7b(0x4c8)])return;VisuMZ[_0x260f7b(0x57e)]['Scene_Map_updateCallMenu'][_0x260f7b(0x695)](this);},VisuMZ['BattleCore']['Scene_Map_launchBattle']=Scene_Map[_0x5e79d1(0x3a9)]['launchBattle'],Scene_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0x6c1)]=function(){const _0xc733e4=_0x5e79d1;BattleManager[_0xc733e4(0x4c8)]?this[_0xc733e4(0x4a0)]():VisuMZ[_0xc733e4(0x57e)][_0xc733e4(0xbcb)][_0xc733e4(0x695)](this);},Scene_Map[_0x5e79d1(0x3a9)]['battleCorePreBattleCommonEvent']=function(){this['_active']=!![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x268)]=SceneManager[_0x5e79d1(0x361)],SceneManager['isSceneChanging']=function(){const _0x4bf6f4=_0x5e79d1;if(BattleManager[_0x4bf6f4(0x4c8)])return![];return VisuMZ[_0x4bf6f4(0x57e)][_0x4bf6f4(0x268)]['call'](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x33d)]=Game_Interpreter[_0x5e79d1(0x3a9)]['terminate'],Game_Interpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x83d)]=function(){const _0x3cb4c4=_0x5e79d1;VisuMZ[_0x3cb4c4(0x57e)][_0x3cb4c4(0x33d)][_0x3cb4c4(0x695)](this),this['_preBattleCommonEvent']&&(this[_0x3cb4c4(0x798)]=undefined,SceneManager['_scene'][_0x3cb4c4(0xcac)]());},Scene_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0xcac)]=function(){const _0x2f5f84=_0x5e79d1;BattleManager[_0x2f5f84(0x4c8)]=undefined,BattleManager[_0x2f5f84(0xa92)]=!![],this[_0x2f5f84(0xb19)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc8e)]=Scene_Map['prototype'][_0x5e79d1(0xb75)],Scene_Map['prototype'][_0x5e79d1(0xb75)]=function(){const _0x41b6db=_0x5e79d1;VisuMZ['BattleCore']['Scene_Map_initializeAfter'][_0x41b6db(0x695)](this),BattleManager[_0x41b6db(0xa92)]&&(this[_0x41b6db(0xbb6)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x8cb)]=Scene_Map['prototype']['initialize'],Scene_Map[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(){const _0x29446e=_0x5e79d1;VisuMZ['BattleCore']['Scene_Map_initialize'][_0x29446e(0x695)](this),$gameTemp[_0x29446e(0x480)]();},VisuMZ['BattleCore']['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x466)],Scene_ItemBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x466)]=function(){const _0x1d57e6=_0x5e79d1;VisuMZ[_0x1d57e6(0x57e)][_0x1d57e6(0x4cd)]['call'](this);if(this['item']()['note'][_0x1d57e6(0xcd4)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x1d57e6(0x990)]()[_0x1d57e6(0x85e)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x1d57e6(0xcb9)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x1d57e6(0x990)]())&&($gameTemp[_0x1d57e6(0xcb9)]=[]);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x8e6)]=Scene_Options[_0x5e79d1(0x3a9)]['maxCommands'],Scene_Options[_0x5e79d1(0x3a9)][_0x5e79d1(0x6e3)]=function(){const _0x25d3f0=_0x5e79d1;let _0x151d8b=VisuMZ['BattleCore'][_0x25d3f0(0x8e6)][_0x25d3f0(0x695)](this);const _0x14e9cb=VisuMZ[_0x25d3f0(0x57e)]['Settings'];if(_0x14e9cb[_0x25d3f0(0xa79)][_0x25d3f0(0x87b)]&&_0x14e9cb[_0x25d3f0(0xa79)][_0x25d3f0(0x728)])_0x151d8b+=0x2;if(_0x14e9cb[_0x25d3f0(0xc24)]['AddOption']&&_0x14e9cb[_0x25d3f0(0xc24)][_0x25d3f0(0x728)])_0x151d8b+=0x1;return _0x151d8b;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xa3e)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(){const _0xdad475=_0x5e79d1;VisuMZ['BattleCore'][_0xdad475(0xa3e)][_0xdad475(0x695)](this),this[_0xdad475(0x7d5)]();},VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_start']=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x9a2)],Scene_Battle[_0x5e79d1(0x3a9)]['start']=function(){const _0x3cd220=_0x5e79d1;SceneManager['isPreviousSceneBattleTransitionable']()?(Scene_Message[_0x3cd220(0x3a9)]['start'][_0x3cd220(0x695)](this),this[_0x3cd220(0x29c)]&&this[_0x3cd220(0x29c)]['update'](),BattleManager[_0x3cd220(0x814)]&&BattleManager[_0x3cd220(0xa3a)]()):(VisuMZ[_0x3cd220(0x57e)][_0x3cd220(0x8d1)][_0x3cd220(0x695)](this),$gameTroop[_0x3cd220(0x6b6)]());},VisuMZ['BattleCore']['Scene_Battle_stop']=Scene_Battle['prototype'][_0x5e79d1(0xb19)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb19)]=function(){const _0x179b3a=_0x5e79d1;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message[_0x179b3a(0x3a9)][_0x179b3a(0xb19)]['call'](this):VisuMZ['BattleCore'][_0x179b3a(0x9d1)][_0x179b3a(0x695)](this);},VisuMZ['BattleCore'][_0x5e79d1(0x7b4)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x83d)],Scene_Battle['prototype'][_0x5e79d1(0x83d)]=function(){const _0x4e3a87=_0x5e79d1;SceneManager[_0x4e3a87(0x6fe)]()?Scene_Message['prototype'][_0x4e3a87(0x83d)]['call'](this):VisuMZ[_0x4e3a87(0x57e)][_0x4e3a87(0x7b4)][_0x4e3a87(0x695)](this),$gameTemp['clearBattleBalloons'](),this[_0x4e3a87(0x7d5)]();},Scene_Battle[_0x5e79d1(0x3a9)]['isRightInputMode']=function(){const _0x47dcbd=_0x5e79d1;if(ConfigManager[_0x47dcbd(0x711)]&&ConfigManager[_0x47dcbd(0x76e)]!==undefined)return ConfigManager[_0x47dcbd(0x76e)];else{if(this[_0x47dcbd(0xca9)]()==='border')return![];else{return Scene_Message[_0x47dcbd(0x3a9)][_0x47dcbd(0xb2c)]['call'](this);;}}},VisuMZ['BattleCore'][_0x5e79d1(0xa1b)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x229)],Scene_Battle['prototype'][_0x5e79d1(0x229)]=function(){const _0x26f441=_0x5e79d1;VisuMZ[_0x26f441(0x57e)]['Scene_Battle_createCancelButton'][_0x26f441(0x695)](this),this[_0x26f441(0xca9)]()===_0x26f441(0x758)&&this[_0x26f441(0xc0b)]();},Scene_Battle[_0x5e79d1(0x3a9)]['setVisibleUI']=function(_0x294403){const _0x6f5583=_0x5e79d1;_0x294403?(this[_0x6f5583(0xaab)]['x']=(Graphics[_0x6f5583(0xa0f)]-Graphics[_0x6f5583(0x486)])/0x2,this[_0x6f5583(0xaab)]['y']=(Graphics[_0x6f5583(0x912)]-Graphics[_0x6f5583(0x6e6)])/0x2):(this[_0x6f5583(0xaab)]['x']=Graphics[_0x6f5583(0xa0f)]*0xa,this[_0x6f5583(0xaab)]['y']=Graphics[_0x6f5583(0x912)]*0xa);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x898)]=Scene_Battle[_0x5e79d1(0x3a9)]['selectNextCommand'],Scene_Battle['prototype']['selectNextCommand']=function(){const _0x5b2795=_0x5e79d1,_0x2f7af2=BattleManager[_0x5b2795(0x5a0)]();VisuMZ[_0x5b2795(0x57e)][_0x5b2795(0x898)][_0x5b2795(0x695)](this);if(_0x2f7af2){if(_0x2f7af2===BattleManager['actor']())return;if(_0x2f7af2===BattleManager[_0x5b2795(0x5c2)])return;if(_0x2f7af2[_0x5b2795(0x949)]())_0x2f7af2[_0x5b2795(0x949)]()[_0x5b2795(0x323)]();}},VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_selectPreviousCommand']=Scene_Battle['prototype'][_0x5e79d1(0x87f)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x87f)]=function(){const _0x49437f=_0x5e79d1,_0x2ea24f=BattleManager['actor']();if(_0x2ea24f&&_0x2ea24f[_0x49437f(0x949)])_0x2ea24f[_0x49437f(0x949)]()['stepBack']();VisuMZ[_0x49437f(0x57e)][_0x49437f(0x22b)][_0x49437f(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2bc)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x808)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x808)]=function(){const _0x40f411=_0x5e79d1;this[_0x40f411(0x8a7)](),VisuMZ[_0x40f411(0x57e)][_0x40f411(0x2bc)][_0x40f411(0x695)](this),this[_0x40f411(0xc57)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xce7)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb0b)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb0b)]=function(){const _0x167e37=_0x5e79d1;if(VisuMZ[_0x167e37(0x57e)]['Settings']['BattleLog']['BattleLogRectJS'])return VisuMZ[_0x167e37(0x57e)][_0x167e37(0xc89)][_0x167e37(0x97d)][_0x167e37(0x7ef)][_0x167e37(0x695)](this);return VisuMZ[_0x167e37(0x57e)][_0x167e37(0xce7)][_0x167e37(0x695)](this);},VisuMZ['BattleCore'][_0x5e79d1(0x98f)]=Scene_Battle['prototype'][_0x5e79d1(0x285)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x285)]=function(){const _0x1e4788=_0x5e79d1;VisuMZ['BattleCore'][_0x1e4788(0x98f)]['call'](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle['prototype']['createPartyCommandWindowBattleCore']=function(){const _0x3a7d52=_0x5e79d1,_0x3f247e=this[_0x3a7d52(0x475)];_0x3f247e['setHandler']('autoBattle',this[_0x3a7d52(0x68b)][_0x3a7d52(0x95a)](this)),_0x3f247e[_0x3a7d52(0x8a2)](_0x3a7d52(0x1d6),this[_0x3a7d52(0x6eb)][_0x3a7d52(0x95a)](this));const _0xc367fb=this['battleLayoutStyle']();switch(_0xc367fb){case'xp':case _0x3a7d52(0x2af):return this[_0x3a7d52(0x475)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x5e79d1(0x3a9)]['commandAutoBattle']=function(){const _0x5bdef2=_0x5e79d1;BattleManager[_0x5bdef2(0x8f7)]=!![],$gameParty[_0x5bdef2(0x7be)](),this[_0x5bdef2(0x4d1)](),BattleManager[_0x5bdef2(0xc70)]()&&(BattleManager[_0x5bdef2(0xbe1)]=![]);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x6eb)]=function(){const _0x2e6232=_0x5e79d1;this[_0x2e6232(0x80a)]()?(this[_0x2e6232(0x4ac)]=!![],this[_0x2e6232(0x556)][_0x2e6232(0x68a)](_0x2e6232(0x979),VisuMZ[_0x2e6232(0x57e)][_0x2e6232(0xc89)]['PartyCmd'][_0x2e6232(0x58c)])):this[_0x2e6232(0x2d4)]();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x80a)]=function(){const _0x57ab40=_0x5e79d1;return BattleManager[_0x57ab40(0x216)]();},Scene_Battle[_0x5e79d1(0x3a9)]['callOptions']=function(){const _0x16bf94=_0x5e79d1;this[_0x16bf94(0x4ac)]=![],this[_0x16bf94(0x29c)][_0x16bf94(0x3f1)](),this[_0x16bf94(0xaab)][_0x16bf94(0xcc4)]=![];if(BattleManager[_0x16bf94(0xcb8)]())($dataSystem[_0x16bf94(0x233)]||$dataSystem['battleback2Name'])&&SceneManager[_0x16bf94(0x5a2)]();else($gameMap[_0x16bf94(0x233)]()||$gameMap[_0x16bf94(0x944)]())&&SceneManager[_0x16bf94(0x5a2)]();SceneManager['push'](Scene_Options),BattleManager[_0x16bf94(0xc70)]()&&(BattleManager[_0x16bf94(0x814)]=BattleManager[_0x16bf94(0x5a0)]());},VisuMZ['BattleCore'][_0x5e79d1(0x2c9)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x2ac)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x2ac)]=function(){const _0x575600=_0x5e79d1;VisuMZ[_0x575600(0x57e)][_0x575600(0x2c9)][_0x575600(0x695)](this);if(this[_0x575600(0x4ac)]&&!BattleManager['_subject'])this['callOptions']();},VisuMZ['BattleCore']['Scene_Battle_update']=Scene_Battle['prototype'][_0x5e79d1(0x3f1)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x409954=_0x5e79d1;VisuMZ[_0x409954(0x57e)][_0x409954(0x4d6)]['call'](this),this['updateOnceParallelInterpreters']();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc57)]=function(){const _0x22fe07=_0x5e79d1,_0x515617=this['autoBattleWindowRect']();this[_0x22fe07(0xc75)]=new Window_AutoBattleCancel(_0x515617),this[_0x22fe07(0xc75)][_0x22fe07(0xb7b)](),this[_0x22fe07(0x593)](this['_autoBattleWindow']);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xa82)]=function(){const _0x3d7ba9=_0x5e79d1;return VisuMZ['BattleCore'][_0x3d7ba9(0xc89)][_0x3d7ba9(0xa79)][_0x3d7ba9(0xb42)][_0x3d7ba9(0x695)](this);},Scene_Battle['prototype'][_0x5e79d1(0x7d5)]=function(){const _0x261216=_0x5e79d1;this[_0x261216(0x349)]=[];},Scene_Battle['prototype'][_0x5e79d1(0x9d5)]=function(){const _0x2800b7=_0x5e79d1;if(!this['_onceParallelInterpreters'])return;for(const _0x17568c of this['_onceParallelInterpreters']){_0x17568c&&_0x17568c[_0x2800b7(0x3f1)]();}},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x8e8)]=function(_0x14f654){const _0x21bf40=_0x5e79d1,_0x457003=$dataCommonEvents[_0x14f654];if(!_0x457003)return;const _0x3bbdf1=new Game_BattleOnceParallelInterpreter();this[_0x21bf40(0x5bc)](_0x3bbdf1),_0x3bbdf1[_0x21bf40(0x90b)](_0x14f654);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x5bc)]=function(_0x2bafd8){const _0x1d914f=_0x5e79d1;this[_0x1d914f(0x349)]=this[_0x1d914f(0x349)]||[],this[_0x1d914f(0x349)][_0x1d914f(0x68a)](_0x2bafd8);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x667)]=function(_0x289921){const _0x3cf98e=_0x5e79d1;this[_0x3cf98e(0x349)]=this[_0x3cf98e(0x349)]||[],this[_0x3cf98e(0x349)][_0x3cf98e(0x9b8)](_0x289921);},Game_Troop[_0x5e79d1(0x3a9)][_0x5e79d1(0x6b6)]=function(){const _0x17a840=_0x5e79d1;for(const _0x52d1ec of this[_0x17a840(0x4e3)]()['pages']){if(!this[_0x17a840(0x9e0)](_0x52d1ec))continue;SceneManager[_0x17a840(0xc59)][_0x17a840(0x610)](_0x52d1ec);}},Game_Troop[_0x5e79d1(0x3a9)][_0x5e79d1(0x9e0)]=function(_0x1d10eb){const _0x5bc04f=_0x5e79d1;if(!_0x1d10eb)return;for(const _0x3efb21 of _0x1d10eb[_0x5bc04f(0x69f)]){if([0x6c,0x198][_0x5bc04f(0x9fb)](_0x3efb21[_0x5bc04f(0xbe2)])){const _0x4c18bb=_0x3efb21['parameters'][0x0];if(_0x4c18bb['match'](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x610)]=function(_0x313718){const _0x200b60=_0x5e79d1;if(!_0x313718)return;const _0x3100ad=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x3100ad),_0x3100ad[_0x200b60(0x512)](_0x313718);};function Game_BattleOnceParallelInterpreter(){const _0x37f659=_0x5e79d1;this[_0x37f659(0xb75)](...arguments);}Game_BattleOnceParallelInterpreter[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Game_Interpreter[_0x5e79d1(0x3a9)]),Game_BattleOnceParallelInterpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x54e)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x90b)]=function(_0x363deb){const _0x4ae55a=_0x5e79d1,_0x592df3=$dataCommonEvents[_0x363deb];_0x592df3?this[_0x4ae55a(0x45d)](_0x592df3[_0x4ae55a(0x69f)],0x0):this[_0x4ae55a(0x83d)]();},Game_BattleOnceParallelInterpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x83d)]=function(){const _0x46d7a4=_0x5e79d1;if(!SceneManager[_0x46d7a4(0x6a6)]())return;SceneManager[_0x46d7a4(0xc59)][_0x46d7a4(0x667)](this),Game_Interpreter[_0x46d7a4(0x3a9)][_0x46d7a4(0x83d)][_0x46d7a4(0x695)](this);},Game_BattleOnceParallelInterpreter['prototype'][_0x5e79d1(0x512)]=function(_0x541ab8){const _0x15651e=_0x5e79d1;_0x541ab8?this[_0x15651e(0x45d)](_0x541ab8[_0x15651e(0x69f)],0x0):this['terminate']();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x439)]=function(){const _0x40639d=_0x5e79d1;return VisuMZ[_0x40639d(0x57e)]['Settings'][_0x40639d(0xb54)][_0x40639d(0x3ac)];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x3bd)]=Scene_Battle['prototype'][_0x5e79d1(0x8bb)],Scene_Battle[_0x5e79d1(0x3a9)]['startPartyCommandSelection']=function(){const _0x9f0465=_0x5e79d1;this[_0x9f0465(0x439)]()?this[_0x9f0465(0x4ce)]():VisuMZ[_0x9f0465(0x57e)][_0x9f0465(0x3bd)]['call'](this);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x4ce)]=function(){const _0x246747=_0x5e79d1;if(BattleManager[_0x246747(0xaf9)]())this['selectNextCommand']();else BattleManager[_0x246747(0xc70)]()&&VisuMZ[_0x246747(0x57e)][_0x246747(0x3bd)][_0x246747(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x8c9)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x7f6)],Scene_Battle['prototype'][_0x5e79d1(0x7f6)]=function(){const _0x57bf48=_0x5e79d1;BattleManager[_0x57bf48(0xc70)]()?(this[_0x57bf48(0xc68)](),this[_0x57bf48(0xba6)]()):VisuMZ[_0x57bf48(0x57e)][_0x57bf48(0x8c9)][_0x57bf48(0x695)](this);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc68)]=function(){const _0xb9a9c8=_0x5e79d1;if(!VisuMZ[_0xb9a9c8(0x57e)]['TpbActiveChangeEnabled'])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0xb9a9c8(0x762)]())return;const _0x33ca85=$gameParty[_0xb9a9c8(0x43a)]()['filter'](_0x405fea=>_0x405fea[_0xb9a9c8(0x2e3)]()&&_0x405fea[_0xb9a9c8(0x378)]());BattleManager['_currentActor']=_0x33ca85[0x0]||null,BattleManager[_0xb9a9c8(0x83c)]&&BattleManager['_currentActor'][_0xb9a9c8(0xa8e)]('inputting');},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x587)]=Scene_Battle[_0x5e79d1(0x3a9)]['commandEscape'],Scene_Battle['prototype']['commandEscape']=function(){const _0x126a0c=_0x5e79d1;VisuMZ[_0x126a0c(0x57e)]['Scene_Battle_commandEscape'][_0x126a0c(0x695)](this);if(!BattleManager[_0x126a0c(0xc70)]())BattleManager[_0x126a0c(0x83c)]=null;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x47a)]=Scene_Battle['prototype']['createActorCommandWindow'],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xa28)]=function(){const _0x3aeaf9=_0x5e79d1;VisuMZ[_0x3aeaf9(0x57e)][_0x3aeaf9(0x47a)][_0x3aeaf9(0x695)](this),this[_0x3aeaf9(0x52a)]();},Scene_Battle['prototype'][_0x5e79d1(0x52a)]=function(){const _0x1e606e=_0x5e79d1,_0x431949=this[_0x1e606e(0x92b)];_0x431949[_0x1e606e(0x8a2)]('escape',this[_0x1e606e(0x9f9)][_0x1e606e(0x95a)](this)),_0x431949[_0x1e606e(0x8a2)](_0x1e606e(0xc27),this[_0x1e606e(0x6bb)][_0x1e606e(0x95a)](this)),_0x431949[_0x1e606e(0x8a2)](_0x1e606e(0x2dc),this[_0x1e606e(0x9cc)]['bind'](this)),BattleManager['isTpb']()&&(this[_0x1e606e(0x439)]()?delete _0x431949[_0x1e606e(0x7ff)][_0x1e606e(0x60f)]:_0x431949[_0x1e606e(0x8a2)]('cancel',this['actorCommandCancelTPB']['bind'](this)));},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x9f9)]=function(){const _0x4566ed=_0x5e79d1;this[_0x4566ed(0x64d)]();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x6bb)]=function(){const _0x3e42b9=_0x5e79d1;BattleManager[_0x3e42b9(0x5a0)]()[_0x3e42b9(0x73f)](),BattleManager[_0x3e42b9(0xcdf)](),BattleManager[_0x3e42b9(0x8d9)](),this[_0x3e42b9(0xb50)]();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x9cc)]=function(){const _0x249447=_0x5e79d1,_0x1b2886=BattleManager[_0x249447(0x7a3)](),_0x45367c=this[_0x249447(0x92b)][_0x249447(0xc67)]();_0x1b2886['setSkill'](_0x45367c),BattleManager[_0x249447(0x5a0)]()[_0x249447(0xba0)]($dataSkills[_0x45367c]),this[_0x249447(0xbc7)]();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x862)]=function(){const _0x407ffc=_0x5e79d1;this[_0x407ffc(0x3e3)]()?this[_0x407ffc(0x6bf)]():this[_0x407ffc(0x7a9)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xaa9)]=![],Scene_Battle['prototype']['tpbActorSwitchConditionsMet']=function(){const _0x3d9001=_0x5e79d1;if(Imported[_0x3d9001(0xa62)]&&BattleManager[_0x3d9001(0x762)]())return![];else{if(!VisuMZ[_0x3d9001(0x57e)][_0x3d9001(0xaa9)])return![];const _0xa6433a=$gameParty[_0x3d9001(0x43a)]()[_0x3d9001(0x984)](_0x19dc9e=>_0x19dc9e[_0x3d9001(0x2e3)]()&&_0x19dc9e[_0x3d9001(0x378)]());return _0xa6433a[_0x3d9001(0xc35)]>0x0&&BattleManager[_0x3d9001(0x5a0)]()!==_0xa6433a[_0xa6433a[_0x3d9001(0xc35)]-0x1];}},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x6bf)]=function(){const _0x4a084b=_0x5e79d1,_0x438192=BattleManager[_0x4a084b(0x5a0)](),_0x5c09fd=_0x438192[_0x4a084b(0x949)]();if(_0x5c09fd)_0x5c09fd[_0x4a084b(0x323)]();const _0x5d0fd7=$gameParty[_0x4a084b(0x43a)]()[_0x4a084b(0x984)](_0x48b60e=>_0x48b60e['isTpbCharged']()&&_0x48b60e[_0x4a084b(0x378)]()),_0x3f57ee=_0x5d0fd7[_0x4a084b(0x985)](_0x438192),_0x4aaecf=_0x5d0fd7[_0x3f57ee+0x1];BattleManager[_0x4a084b(0x83c)]=_0x4aaecf||null;if(_0x4aaecf)_0x4aaecf[_0x4a084b(0xa8e)](_0x4a084b(0x423));_0x438192[_0x4a084b(0xa8e)]('undecided'),this['changeInputWindow']();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x7a9)]=function(){const _0x38880d=_0x5e79d1;this['_partyCommandWindow'][_0x38880d(0x45d)](),this[_0x38880d(0x92b)]['close']();if(!VisuMZ[_0x38880d(0x57e)][_0x38880d(0xaa9)])return;if(Imported[_0x38880d(0xa62)]&&BattleManager[_0x38880d(0x762)]())return;if(BattleManager[_0x38880d(0x83c)]){BattleManager[_0x38880d(0x83c)][_0x38880d(0xa8e)](_0x38880d(0xccf));const _0x481c0c=BattleManager[_0x38880d(0x83c)][_0x38880d(0x949)]();if(_0x481c0c)_0x481c0c[_0x38880d(0x323)]();}BattleManager[_0x38880d(0x83c)]=null;},VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_createHelpWindow']=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x200)],Scene_Battle[_0x5e79d1(0x3a9)]['createHelpWindow']=function(){const _0x353b8c=_0x5e79d1;VisuMZ[_0x353b8c(0x57e)][_0x353b8c(0x51c)]['call'](this),this['createHelpWindowBattleCore']();},Scene_Battle[_0x5e79d1(0x3a9)]['createHelpWindowBattleCore']=function(){const _0x1d5948=_0x5e79d1;this[_0x1d5948(0x92b)][_0x1d5948(0x312)](this['_helpWindow']),this[_0x1d5948(0x475)][_0x1d5948(0x312)](this['_helpWindow']);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x8a7)]=function(){const _0x4fdf10=_0x5e79d1;if(!VisuMZ[_0x4fdf10(0x57e)][_0x4fdf10(0xc89)][_0x4fdf10(0xb2e)][_0x4fdf10(0x44f)])return;this['_enemyNameContainer']=new Sprite(),this[_0x4fdf10(0x4a9)]['x']=this[_0x4fdf10(0xaab)]['x'],this['_enemyNameContainer']['y']=this[_0x4fdf10(0xaab)]['y'];const _0x3c0de6=this[_0x4fdf10(0x458)][_0x4fdf10(0x985)](this[_0x4fdf10(0xaab)]);this[_0x4fdf10(0x7e4)](this['_enemyNameContainer'],_0x3c0de6);for(let _0x39eae7=0x0;_0x39eae7<0x8;_0x39eae7++){const _0x3ff84e=new Window_EnemyName(_0x39eae7);this[_0x4fdf10(0x4a9)][_0x4fdf10(0x593)](_0x3ff84e);}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x382)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x684)],Scene_Battle[_0x5e79d1(0x3a9)]['createEnemyWindow']=function(){const _0x3818e1=_0x5e79d1;VisuMZ[_0x3818e1(0x57e)][_0x3818e1(0x382)][_0x3818e1(0x695)](this),this[_0x3818e1(0x976)]();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x976)]=function(){const _0x51b129=_0x5e79d1;this[_0x51b129(0xb41)](!![]),this['createMultiTargetWindow'](![]);},Scene_Battle['prototype'][_0x5e79d1(0xa44)]=function(_0x268b65){const _0x7ec316=_0x5e79d1,_0x1e9c3b=Window_BattleMultiTarget[_0x7ec316(0x36c)],_0x6fb184=this[_0x7ec316(0xabf)](0x1,!![]);let _0x405745=_0x268b65?Graphics[_0x7ec316(0x486)]-_0x1e9c3b:0x0;_0x405745+=_0x268b65?Window_BattleMultiTarget[_0x7ec316(0xa68)]:Window_BattleMultiTarget[_0x7ec316(0xbdc)];const _0x33ea79=[_0x7ec316(0xc86)][_0x7ec316(0x9fb)](this[_0x7ec316(0xca9)]())?0x0:this[_0x7ec316(0x2cf)]['height'];let _0x30174f=Graphics[_0x7ec316(0x6e6)]-_0x33ea79-_0x6fb184;return _0x30174f+=_0x268b65?Window_BattleMultiTarget['ACTOR_OFFSET_Y']:Window_BattleMultiTarget[_0x7ec316(0xb2a)],new Rectangle(_0x405745,_0x30174f,_0x1e9c3b,_0x6fb184);},Scene_Battle[_0x5e79d1(0x3a9)]['createMultiTargetWindow']=function(_0x506265){const _0x62cf2f=_0x5e79d1,_0x19297f=this[_0x62cf2f(0xa44)](_0x506265),_0x5ba021=new Window_BattleMultiTarget(_0x19297f,_0x506265);this['addWindow'](_0x5ba021),_0x506265?this[_0x62cf2f(0xa13)]=_0x5ba021:this[_0x62cf2f(0x544)]=_0x5ba021;},VisuMZ['BattleCore'][_0x5e79d1(0xa5d)]=Scene_Battle['prototype'][_0x5e79d1(0x32e)],Scene_Battle[_0x5e79d1(0x3a9)]['needsInputWindowChange']=function(){const _0xedbd3c=_0x5e79d1;if(this['_inBattleStatusMode'])return![];return VisuMZ[_0xedbd3c(0x57e)][_0xedbd3c(0xa5d)][_0xedbd3c(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xcef)]=Scene_Battle['prototype']['updateCancelButton'],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x645)]=function(){const _0x23170a=_0x5e79d1;if(this['_cancelButton']&&this[_0x23170a(0xbe7)]){this[_0x23170a(0x372)]['visible']=!![];return;}VisuMZ[_0x23170a(0x57e)][_0x23170a(0xcef)][_0x23170a(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc53)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x696)],Scene_Battle['prototype'][_0x5e79d1(0x696)]=function(){const _0x522db0=_0x5e79d1;if(this[_0x522db0(0xbe7)])return![];return VisuMZ['BattleCore'][_0x522db0(0xc53)][_0x522db0(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x510)]=Scene_Battle['prototype'][_0x5e79d1(0x808)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x808)]=function(){const _0xb39fe6=_0x5e79d1;VisuMZ[_0xb39fe6(0x57e)][_0xb39fe6(0x510)]['call'](this),this[_0xb39fe6(0x7c1)]();},VisuMZ['BattleCore'][_0x5e79d1(0x4ee)]=Scene_Battle[_0x5e79d1(0x3a9)]['createPartyCommandWindow'],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x285)]=function(){const _0x29d2b3=_0x5e79d1;VisuMZ['BattleCore'][_0x29d2b3(0x4ee)][_0x29d2b3(0x695)](this);const _0x2d0fa3=this[_0x29d2b3(0x475)];_0x2d0fa3[_0x29d2b3(0x8a2)](_0x29d2b3(0x40a),this[_0x29d2b3(0x293)][_0x29d2b3(0x95a)](this,_0x2d0fa3));},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x548)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xa28)],Scene_Battle[_0x5e79d1(0x3a9)]['createActorCommandWindow']=function(){const _0x1ced13=_0x5e79d1;VisuMZ[_0x1ced13(0x57e)]['Scene_Battle_createActorCommandWindowIBS'][_0x1ced13(0x695)](this);const _0x82060e=this[_0x1ced13(0x92b)];_0x82060e[_0x1ced13(0x8a2)](_0x1ced13(0x40a),this['startInBattleStatus']['bind'](this,_0x82060e));},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x7c1)]=function(){const _0x25b92e=_0x5e79d1,_0x15821e=this[_0x25b92e(0x43f)](),_0x5b59c6=new Window_InBattleStatus(_0x15821e);this[_0x25b92e(0xa6d)](_0x5b59c6),_0x5b59c6[_0x25b92e(0xb7b)](),_0x5b59c6['close'](),this[_0x25b92e(0x49a)]=_0x5b59c6;},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x43f)]=function(){const _0x151f20=_0x5e79d1;if(VisuMZ[_0x151f20(0x57e)]['Settings'][_0x151f20(0x681)][_0x151f20(0x474)])return VisuMZ[_0x151f20(0x57e)][_0x151f20(0xc89)][_0x151f20(0x681)]['StatusWindow_RectJS'][_0x151f20(0x695)](this);const _0x4b3302=Graphics[_0x151f20(0x486)]>0x3e8?0x78:0x0,_0x47fadd=this[_0x151f20(0x66b)]['y']+this['_helpWindow']['height'],_0x3d69af=Graphics['boxWidth']-_0x4b3302*0x2,_0x1033c3=Graphics[_0x151f20(0x6e6)]-_0x47fadd-this[_0x151f20(0x570)]();return new Rectangle(_0x4b3302,_0x47fadd,_0x3d69af,_0x1033c3);},Scene_Battle['prototype']['startInBattleStatus']=function(_0x273cf4){const _0x367301=_0x5e79d1;this['addWindow'](this['_inBattleStatusWindow']),this['_inBattleStatusMode']=!![],this[_0x367301(0x66b)][_0x367301(0xbb5)]();const _0x299d37=['xp','portrait',_0x367301(0x758),_0x367301(0x6cd),'frontview_ui'];let _0x19158c=_0x299d37[_0x367301(0x9fb)](this[_0x367301(0xca9)]());_0x19158c&&(_0x273cf4['hide'](),_0x273cf4[_0x367301(0xc12)]()),this[_0x367301(0x49a)]['setBattler'](BattleManager['actor']()||$gameParty[_0x367301(0xb9d)]()[0x0]),this['_inBattleStatusWindow']['setReturnWindow'](_0x273cf4),this[_0x367301(0x49a)][_0x367301(0xbb5)](),this['_inBattleStatusWindow'][_0x367301(0x3d7)]();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x581)]=function(){const _0x262a8f=_0x5e79d1;this['_inBattleStatusMode']=![],this[_0x262a8f(0x66b)][_0x262a8f(0xb7b)]();const _0x19ca5b=this['_inBattleStatusWindow'][_0x262a8f(0x2e0)]();_0x19ca5b['show'](),_0x19ca5b['open'](),_0x19ca5b['activate'](),this[_0x262a8f(0x49a)]['hide'](),this['_inBattleStatusWindow']['close']();},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xca9)]=function(){const _0x117768=_0x5e79d1;if($gameTemp[_0x117768(0x221)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x117768(0x747)])return this['_battleLayoutStyle'];return this['_battleLayoutStyle']=VisuMZ[_0x117768(0x57e)][_0x117768(0xc89)][_0x117768(0x39d)][_0x117768(0x77a)][_0x117768(0xbee)]()[_0x117768(0xacc)](),this[_0x117768(0x747)]===_0x117768(0x6cd)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this[_0x117768(0x747)]=_0x117768(0x5ab)),this[_0x117768(0x747)]==='frontview_ui'&&!Imported['VisuMZ_3_FrontviewBattleUI']&&(this[_0x117768(0x747)]=_0x117768(0x5ab)),this[_0x117768(0x747)];},VisuMZ['BattleCore'][_0x5e79d1(0xb9c)]=Scene_Battle[_0x5e79d1(0x3a9)]['windowAreaHeight'],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x570)]=function(){const _0x1040cf=_0x5e79d1,_0x2b0c69=this[_0x1040cf(0xca9)]();switch(_0x2b0c69){case _0x1040cf(0x69f):return this[_0x1040cf(0xabf)](Math[_0x1040cf(0x9db)](0x1,$gameParty[_0x1040cf(0x563)]()),!![]);break;case _0x1040cf(0x758):return this[_0x1040cf(0xabf)](0x4,!![]);break;default:return VisuMZ[_0x1040cf(0x57e)][_0x1040cf(0xb9c)][_0x1040cf(0x695)](this);break;}},VisuMZ['BattleCore'][_0x5e79d1(0xc5c)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x916)],Scene_Battle['prototype']['helpWindowRect']=function(){const _0xb69010=_0x5e79d1,_0x5cdee0=this[_0xb69010(0xca9)]();switch(_0x5cdee0){case _0xb69010(0x758):return this[_0xb69010(0x1cf)]();break;case _0xb69010(0x5ab):case _0xb69010(0x69f):case'xp':case _0xb69010(0x2af):default:return VisuMZ[_0xb69010(0x57e)][_0xb69010(0xc5c)][_0xb69010(0x695)](this);break;}},Scene_Battle['prototype'][_0x5e79d1(0x67d)]=function(){const _0x298367=_0x5e79d1,_0x4ebdfa=this[_0x298367(0xca9)]();switch(_0x4ebdfa){case'xp':case'portrait':return this[_0x298367(0xa23)]();break;case'border':return this[_0x298367(0xad4)]();break;case _0x298367(0x5ab):case _0x298367(0x69f):default:return this[_0x298367(0x678)]();break;}},VisuMZ['BattleCore']['Scene_Battle_partyCommandWindowRect']=Scene_Battle['prototype']['partyCommandWindowRect'],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x90a)]=function(){const _0x1f3334=_0x5e79d1,_0x531e28=this[_0x1f3334(0xca9)]();switch(_0x531e28){case'xp':case _0x1f3334(0x2af):return this[_0x1f3334(0x7e3)]();break;case _0x1f3334(0x758):return this[_0x1f3334(0x84e)]();case _0x1f3334(0x5ab):case _0x1f3334(0x69f):default:return this[_0x1f3334(0x6a3)]();break;}},Scene_Battle['prototype'][_0x5e79d1(0x6a3)]=function(){const _0x4fe749=_0x5e79d1,_0x2eb47a=VisuMZ[_0x4fe749(0x57e)]['Settings']['BattleLayout'],_0x5c8077=_0x2eb47a[_0x4fe749(0x5f2)]||0xc0,_0xebe43e=this[_0x4fe749(0x570)](),_0x6709c5=this['isRightInputMode']()?Graphics['boxWidth']-_0x5c8077:0x0,_0x11db04=Graphics[_0x4fe749(0x6e6)]-_0xebe43e;return new Rectangle(_0x6709c5,_0x11db04,_0x5c8077,_0xebe43e);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x54a)]=function(){const _0x1945ca=_0x5e79d1;return this[_0x1945ca(0x90a)]();},VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc55)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc55)]=function(){const _0x1d9eb4=_0x5e79d1;if(this[_0x1d9eb4(0xbe7)])return;const _0x392d9=this[_0x1d9eb4(0xca9)]();switch(_0x392d9){case'xp':case'portrait':case _0x1d9eb4(0x758):break;case _0x1d9eb4(0x5ab):case _0x1d9eb4(0x69f):default:VisuMZ[_0x1d9eb4(0x57e)][_0x1d9eb4(0x928)][_0x1d9eb4(0x695)](this);break;}},Scene_Battle['prototype'][_0x5e79d1(0x678)]=function(){const _0x23386c=_0x5e79d1,_0xfd6c5a=VisuMZ[_0x23386c(0x57e)][_0x23386c(0xc89)][_0x23386c(0x39d)],_0x2b99a7=Window_BattleStatus[_0x23386c(0x3a9)][_0x23386c(0x1d7)](),_0x3b55a4=Graphics[_0x23386c(0x486)]-(_0xfd6c5a[_0x23386c(0x5f2)]||0xc0),_0x25023d=this[_0x23386c(0x570)]()+_0x2b99a7,_0x4e61a8=this[_0x23386c(0xb2c)]()?0x0:Graphics[_0x23386c(0x486)]-_0x3b55a4,_0x15715f=Graphics[_0x23386c(0x6e6)]-_0x25023d+_0x2b99a7;return new Rectangle(_0x4e61a8,_0x15715f,_0x3b55a4,_0x25023d);},Scene_Battle['prototype']['statusWindowRectXPStyle']=function(){const _0x1c217c=_0x5e79d1,_0x36b3da=Window_BattleStatus[_0x1c217c(0x3a9)][_0x1c217c(0x1d7)](),_0x255478=Graphics[_0x1c217c(0x486)],_0x145052=this[_0x1c217c(0x570)]()+_0x36b3da,_0x52fea1=0x0,_0x3c2d10=Graphics[_0x1c217c(0x6e6)]-_0x145052+_0x36b3da;return new Rectangle(_0x52fea1,_0x3c2d10,_0x255478,_0x145052);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x7e3)]=function(){const _0x619551=_0x5e79d1,_0x435d85=Graphics[_0x619551(0x486)]/0x2,_0x34d21f=this[_0x619551(0xabf)](VisuMZ[_0x619551(0x57e)][_0x619551(0xc89)][_0x619551(0x39d)][_0x619551(0x404)],!![]),_0x4f0a54=Math[_0x619551(0xa7d)]((Graphics[_0x619551(0x486)]-_0x435d85)/0x2),_0x209b3d=Graphics[_0x619551(0x6e6)]-_0x34d21f-this['statusWindowRectXPStyle']()['height'];return new Rectangle(_0x4f0a54,_0x209b3d,_0x435d85,_0x34d21f);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x1cf)]=function(){const _0x2776bb=_0x5e79d1,_0x37f8f1=Graphics[_0x2776bb(0xa0f)],_0x146e18=Math['round']((Graphics[_0x2776bb(0x486)]-_0x37f8f1)/0x2),_0x5d3c5c=this['helpAreaHeight'](),_0x31ce51=(Graphics[_0x2776bb(0x912)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x146e18,_0x31ce51,_0x37f8f1,_0x5d3c5c);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xad4)]=function(){const _0x2f4854=_0x5e79d1,_0xa4a1aa=Graphics['width'],_0x3748c6=Math[_0x2f4854(0xa7d)]((Graphics['boxWidth']-_0xa4a1aa)/0x2),_0x397b5e=this[_0x2f4854(0xabf)](0x4,!![]),_0x985c2e=Graphics[_0x2f4854(0x6e6)]-_0x397b5e+(Graphics['height']-Graphics[_0x2f4854(0x6e6)])/0x2;return new Rectangle(_0x3748c6,_0x985c2e,_0xa4a1aa,_0x397b5e);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x84e)]=function(){const _0x1f9cbe=_0x5e79d1,_0x1b7a5d=Math[_0x1f9cbe(0x48d)](Graphics[_0x1f9cbe(0xa0f)]/0x3),_0x4c0433=this[_0x1f9cbe(0xb2c)]()?(Graphics[_0x1f9cbe(0xa0f)]+Graphics['boxWidth'])/0x2-_0x1b7a5d:(Graphics[_0x1f9cbe(0xa0f)]-Graphics['boxWidth'])/-0x2,_0x59def8=this[_0x1f9cbe(0x1cf)](),_0x3d3ca1=_0x59def8['y']+_0x59def8[_0x1f9cbe(0x912)],_0x360917=this[_0x1f9cbe(0xad4)](),_0x59be3d=_0x360917['y']-_0x3d3ca1;return new Rectangle(_0x4c0433,_0x3d3ca1,_0x1b7a5d,_0x59be3d);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x6bc)]=function(){const _0x3e07b0=_0x5e79d1,_0x214ef2=Math['ceil'](Graphics[_0x3e07b0(0xa0f)]/0x3),_0x5ed4ba=Math['round']((Graphics[_0x3e07b0(0x486)]-_0x214ef2)/0x2),_0xe4874b=this['partyCommandWindowRectBorderStyle'](),_0x3c1a06=_0xe4874b['y'],_0x5da752=_0xe4874b[_0x3e07b0(0x912)];return new Rectangle(_0x5ed4ba,_0x3c1a06,_0x214ef2,_0x5da752);},Scene_Battle['prototype'][_0x5e79d1(0xc0b)]=function(){const _0x2e2be3=_0x5e79d1;this['_cancelButton']['y']=this[_0x2e2be3(0x66b)]['y']+this[_0x2e2be3(0x66b)][_0x2e2be3(0x912)],this[_0x2e2be3(0xb2c)]()?this[_0x2e2be3(0xca9)]()===_0x2e2be3(0x758)?this['_cancelButton']['x']=0x8:this[_0x2e2be3(0x372)]['x']=-this[_0x2e2be3(0x372)]['width']-0x4:this['_cancelButton']['x']=Graphics[_0x2e2be3(0xa0f)]-(Graphics[_0x2e2be3(0xa0f)]-Graphics[_0x2e2be3(0x486)])/0x2-this['_cancelButton'][_0x2e2be3(0xa0f)]-0x4;},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle['prototype'][_0x5e79d1(0x6f5)],Scene_Battle['prototype'][_0x5e79d1(0x6f5)]=function(){const _0x600135=_0x5e79d1;if(this['battleLayoutStyle']()==='border')return this['skillItemWindowRectBorderStyle']();else return this[_0x600135(0xbf2)]()?this[_0x600135(0x892)]():VisuMZ[_0x600135(0x57e)][_0x600135(0x715)]['call'](this);},VisuMZ['BattleCore']['Scene_Battle_itemWindowRect']=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x5d9)],Scene_Battle['prototype'][_0x5e79d1(0x5d9)]=function(){const _0x3c2ef5=_0x5e79d1;if(this[_0x3c2ef5(0xca9)]()==='border')return this[_0x3c2ef5(0x6bc)]();else return this[_0x3c2ef5(0xbf2)]()?this[_0x3c2ef5(0x892)]():VisuMZ[_0x3c2ef5(0x57e)]['Scene_Battle_itemWindowRect'][_0x3c2ef5(0x695)](this);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xbf2)]=function(){const _0x19941f=_0x5e79d1;return VisuMZ[_0x19941f(0x57e)][_0x19941f(0xc89)][_0x19941f(0x39d)][_0x19941f(0xc84)];},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x892)]=function(){const _0x56a264=_0x5e79d1,_0xcaec00=Sprite_Button['prototype']['blockWidth']()*0x2+0x4;let _0x1698d5=Graphics['boxWidth']-_0xcaec00;Imported[_0x56a264(0xaac)]&&SceneManager['isSideButtonLayout']()&&(_0x1698d5+=_0xcaec00);const _0x196d13=this[_0x56a264(0xa4e)](),_0x633f62=Graphics['boxHeight']-_0x196d13-this[_0x56a264(0x67d)]()[_0x56a264(0x912)]+Window_BattleStatus[_0x56a264(0x3a9)][_0x56a264(0x1d7)](),_0x4b8fe7=0x0;return new Rectangle(_0x4b8fe7,_0x196d13,_0x1698d5,_0x633f62);},VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_startActorSelection']=Scene_Battle['prototype'][_0x5e79d1(0xaee)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xaee)]=function(){const _0x4a0783=_0x5e79d1;VisuMZ[_0x4a0783(0x57e)][_0x4a0783(0x51d)][_0x4a0783(0x695)](this),this[_0x4a0783(0x358)]();},VisuMZ['BattleCore'][_0x5e79d1(0x8b4)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb78)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb78)]=function(){const _0x1646da=_0x5e79d1;VisuMZ[_0x1646da(0x57e)][_0x1646da(0x8b4)][_0x1646da(0x695)](this),this['_enemyWindow'][_0x1646da(0x286)](),this[_0x1646da(0x358)]();},Scene_Battle[_0x5e79d1(0x3a9)]['makeTargetSelectionMoreVisible']=function(){const _0x11afe5=_0x5e79d1,_0x5057bc=this[_0x11afe5(0xca9)]();['xp',_0x11afe5(0x2af),'border'][_0x11afe5(0x9fb)](_0x5057bc)&&this[_0x11afe5(0x92b)][_0x11afe5(0xc12)](),(_0x5057bc===_0x11afe5(0x758)||this[_0x11afe5(0xbf2)]())&&(this['_skillWindow'][_0x11afe5(0xc12)](),this[_0x11afe5(0x56b)][_0x11afe5(0xc12)]());},VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_onActorOk']=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc81)],Scene_Battle['prototype'][_0x5e79d1(0xc81)]=function(){const _0x11e328=_0x5e79d1;VisuMZ[_0x11e328(0x57e)][_0x11e328(0xc6d)]['call'](this),this[_0x11e328(0x86d)]();},Scene_Battle['prototype']['isNonSubmenuCancel']=function(){const _0x45c5c5=_0x5e79d1;return[_0x45c5c5(0x5e0),_0x45c5c5(0x725),_0x45c5c5(0x2dc)][_0x45c5c5(0x9fb)](this['_actorCommandWindow'][_0x45c5c5(0x956)]());},VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_onActorCancel']=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x2b5)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x2b5)]=function(){const _0x26d05b=_0x5e79d1;this['isNonSubmenuCancel']()?(this['_statusWindow'][_0x26d05b(0xbb5)](),this['_actorWindow'][_0x26d05b(0xb7b)](),this[_0x26d05b(0x92b)][_0x26d05b(0x838)]()):VisuMZ[_0x26d05b(0x57e)]['Scene_Battle_onActorCancel'][_0x26d05b(0x695)](this),this[_0x26d05b(0x6f6)]();},VisuMZ['BattleCore'][_0x5e79d1(0x73c)]=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x31a)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x31a)]=function(){const _0x33dcdc=_0x5e79d1;if(!this[_0x33dcdc(0x315)][_0x33dcdc(0xbd5)]()){this[_0x33dcdc(0x315)][_0x33dcdc(0x838)]();return;}const _0x2cd628=BattleManager[_0x33dcdc(0x7a3)]();_0x2cd628['setTargetBattlerKey'](this['_enemyWindow']['enemy']()),this[_0x33dcdc(0x315)][_0x33dcdc(0xcdb)](),VisuMZ[_0x33dcdc(0x57e)]['Scene_Battle_onEnemyOk']['call'](this),this['okTargetSelectionVisibility']();},VisuMZ['BattleCore']['Scene_Battle_onEnemyCancel']=Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x96d)],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x96d)]=function(){const _0x4238c1=_0x5e79d1;this[_0x4238c1(0xacb)]()?(this[_0x4238c1(0x2cf)][_0x4238c1(0xbb5)](),this[_0x4238c1(0x315)][_0x4238c1(0xb7b)](),this[_0x4238c1(0x92b)][_0x4238c1(0x838)]()):VisuMZ[_0x4238c1(0x57e)][_0x4238c1(0x533)]['call'](this),this[_0x4238c1(0x6f6)](),this['_enemyWindow']['closeBattleActorWindow']();},Scene_Battle['prototype'][_0x5e79d1(0x86d)]=function(){const _0x224040=_0x5e79d1,_0x16f9bf=this[_0x224040(0xca9)]();(_0x16f9bf===_0x224040(0x758)||this[_0x224040(0xbf2)]())&&(this[_0x224040(0x48b)][_0x224040(0x3d7)](),this['_skillWindow']['active']&&this[_0x224040(0x48b)]['show'](),this[_0x224040(0x56b)][_0x224040(0x3d7)](),this[_0x224040(0x56b)][_0x224040(0x5dc)]&&this['_itemWindow'][_0x224040(0xbb5)]());},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x6f6)]=function(){const _0x8c928c=_0x5e79d1,_0x26ddb6=this['battleLayoutStyle']();['xp',_0x8c928c(0x2af),_0x8c928c(0x758)]['includes'](_0x26ddb6)&&this[_0x8c928c(0x92b)]['open'](),this[_0x8c928c(0x86d)]();},Sprite_Battler['_motionSpeed']=VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x232)][_0x5e79d1(0x32a)],VisuMZ['BattleCore'][_0x5e79d1(0x7af)]=Sprite_Battler['prototype'][_0x5e79d1(0x70d)],Sprite_Battler[_0x5e79d1(0x3a9)]['initMembers']=function(){const _0x374b44=_0x5e79d1;VisuMZ[_0x374b44(0x57e)][_0x374b44(0x7af)][_0x374b44(0x695)](this),this[_0x374b44(0x424)]();if(this[_0x374b44(0x54e)]===Sprite_Enemy)this[_0x374b44(0xa57)]();this[_0x374b44(0x84d)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x424)]=function(){const _0x291c91=_0x5e79d1;this[_0x291c91(0x523)]=0x0,this[_0x291c91(0x415)]=0x0,this[_0x291c91(0xb16)]=0x0,this[_0x291c91(0x722)]=0x0,this[_0x291c91(0x840)]=0x0,this[_0x291c91(0x7fc)]=0x0,this[_0x291c91(0x841)]=_0x291c91(0xc80),this['_jumpHeight']=0x0,this[_0x291c91(0xbaa)]=0x0,this[_0x291c91(0x6ae)]=0x0,this[_0x291c91(0xaa4)]=0x0,this[_0x291c91(0x776)]=0xff,this[_0x291c91(0xa9a)]=0x0,this[_0x291c91(0x760)]=0x0,this[_0x291c91(0x63e)]=_0x291c91(0xc80),this['_currentAngle']=0x0,this[_0x291c91(0xb85)]=0x0,this[_0x291c91(0xb92)]=0x0,this[_0x291c91(0x710)]=0x0,this[_0x291c91(0x1f1)]='Linear',this[_0x291c91(0x374)]=!![],this['_skewX']=0x0,this[_0x291c91(0x8f9)]=0x0,this[_0x291c91(0xc50)]=0x0,this[_0x291c91(0x97f)]=0x0,this['_skewDuration']=0x0,this[_0x291c91(0x2ec)]=0x0,this[_0x291c91(0xb23)]=_0x291c91(0xc80),this[_0x291c91(0xb5d)]=0x1,this[_0x291c91(0xcad)]=0x1,this['_targetGrowX']=0x1,this['_targetGrowY']=0x1,this[_0x291c91(0xad7)]=0x0,this[_0x291c91(0x932)]=0x0,this[_0x291c91(0x783)]=_0x291c91(0xc80),this['_flipScaleX']=0x1,this[_0x291c91(0xb94)]=0x0,this[_0x291c91(0xb35)]=0x0,this[_0x291c91(0x86e)]=0x0,this[_0x291c91(0xc13)]=0x0,this['_homeEasing']='Linear',this[_0x291c91(0x2b3)]=0x0,this['_shakeFlinchPower']=0x0;},Sprite_Battler['prototype'][_0x5e79d1(0xa57)]=function(){const _0x4e355f=_0x5e79d1;this[_0x4e355f(0x699)]=new Sprite(),this[_0x4e355f(0x699)]['bitmap']=ImageManager['loadSystem']('Shadow2'),this[_0x4e355f(0x699)][_0x4e355f(0xc11)][_0x4e355f(0xce3)]=VisuMZ['BattleCore'][_0x4e355f(0xc89)][_0x4e355f(0x232)][_0x4e355f(0xa30)],this[_0x4e355f(0x699)]['anchor']['x']=0.5,this[_0x4e355f(0x699)]['anchor']['y']=0.5,this[_0x4e355f(0x699)]['y']=-0x2,this[_0x4e355f(0x699)]['visible']=![],this['addChild'](this[_0x4e355f(0x699)]);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x84d)]=function(){const _0x125c7b=_0x5e79d1;this[_0x125c7b(0x6b8)]=new Sprite(),this[_0x125c7b(0x6b8)][_0x125c7b(0x64c)]['x']=0.5,this[_0x125c7b(0x6b8)][_0x125c7b(0x64c)]['y']=0.5,this[_0x125c7b(0x593)](this[_0x125c7b(0x6b8)]);},Sprite_Battler['prototype'][_0x5e79d1(0x71a)]=function(){const _0x3a6763=_0x5e79d1;if(this['getDragonbones']&&this[_0x3a6763(0x5ef)]()){Sprite[_0x3a6763(0x3a9)]['_updateColorFilter'][_0x3a6763(0x695)](this);return;}const _0x17c511=this['_distortionSprite'];if(!_0x17c511)return;!_0x17c511[_0x3a6763(0x238)]&&_0x17c511[_0x3a6763(0x646)](),_0x17c511[_0x3a6763(0x238)]['setHue'](this[_0x3a6763(0x446)]),_0x17c511['_colorFilter']['setBlendColor'](this['_blendColor']),_0x17c511['_colorFilter']['setColorTone'](this[_0x3a6763(0xa94)]);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x2e1)]=function(){const _0x5030e8=_0x5e79d1;if(!this[_0x5030e8(0x6b8)])return;if(this[_0x5030e8(0x699)]){const _0x3b979d=this['getChildIndex'](this[_0x5030e8(0x6b8)]);this[_0x5030e8(0x7e4)](this['_shadowSprite'],_0x3b979d),this['updateShadowVisibility']();}this['_svBattlerSprite']&&this[_0x5030e8(0x6b8)][_0x5030e8(0x593)](this['_svBattlerSprite']),this[_0x5030e8(0x1e8)]&&this[_0x5030e8(0x6b8)][_0x5030e8(0x593)](this[_0x5030e8(0x1e8)]),this[_0x5030e8(0xb76)]&&this[_0x5030e8(0x6b8)][_0x5030e8(0x593)](this[_0x5030e8(0xb76)]),this['_injectAnimationSprite']&&this[_0x5030e8(0x6b8)]['addChild'](this['_injectAnimationSprite']),this[_0x5030e8(0xaa5)]&&this[_0x5030e8(0x6b8)][_0x5030e8(0x593)](this[_0x5030e8(0xaa5)]);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x910)]=function(){const _0x32d82e=_0x5e79d1;if(!this[_0x32d82e(0x699)])return;if(this[_0x32d82e(0xab5)]&&this['_battler'][_0x32d82e(0x536)]()){const _0x50d871=this[_0x32d82e(0x699)][_0x32d82e(0xc11)];this[_0x32d82e(0x699)]['setFrame'](0x0,0x0,_0x50d871[_0x32d82e(0xa0f)],_0x50d871[_0x32d82e(0x912)]);}else this['_shadowSprite'][_0x32d82e(0xbfb)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x5e79d1(0x6e1)]=function(){const _0x42c055=_0x5e79d1;return SceneManager['isSceneBattle']()?SceneManager[_0x42c055(0xc59)]['_spriteset']['_damageContainer']:this[_0x42c055(0xb2f)];},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x453)]=function(_0x439296,_0x25e1ac){const _0x57d2c2=_0x5e79d1;if(!this[_0x57d2c2(0xab5)][_0x57d2c2(0x93e)]())return;if(BattleManager[_0x57d2c2(0x66c)]())return;const _0x9ccc3e=VisuMZ[_0x57d2c2(0x57e)][_0x57d2c2(0xc89)][_0x57d2c2(0xb4c)],_0x2d4596=new Sprite_Damage();_0x2d4596[_0x57d2c2(0xbfe)]=_0x9ccc3e[_0x57d2c2(0xcd6)],this['sortDamageSprites'](_0x2d4596),_0x2d4596['setupTextPopup'](_0x439296,_0x25e1ac),this[_0x57d2c2(0xcd2)](_0x2d4596);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xa1d)]=function(_0x37b84a,_0x382c7d,_0x3153a6){const _0x5d2626=_0x5e79d1;if(!this[_0x5d2626(0xab5)]['isSpriteVisible']())return;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x30539b=VisuMZ[_0x5d2626(0x57e)][_0x5d2626(0xc89)][_0x5d2626(0xb4c)],_0x87718a=new Sprite_Damage();_0x87718a['_duration']=_0x30539b['PopupDuration'],this['sortDamageSprites'](_0x87718a),_0x87718a[_0x5d2626(0xa1d)](_0x37b84a,_0x382c7d,_0x3153a6),this['addDamageSprite'](_0x87718a);},Sprite_Battler[_0x5e79d1(0x3a9)]['setupDamagePopup']=function(){const _0x3bd682=_0x5e79d1;if(!this[_0x3bd682(0xab5)]['isDamagePopupRequested']())return;while(this[_0x3bd682(0xab5)][_0x3bd682(0x4ad)]()){this[_0x3bd682(0xab5)]['isSpriteVisible']()&&this['createDamageSprite']();}this[_0x3bd682(0xab5)]['clearDamagePopup'](),this['_battler']['clearResult']();},Sprite_Battler['prototype'][_0x5e79d1(0x945)]=function(){const _0x489211=_0x5e79d1;if(BattleManager['shouldHideBattleEndPopups']())return;const _0x31ecff=VisuMZ[_0x489211(0x57e)]['Settings']['Damage'],_0x44bf9e=new Sprite_Damage();_0x44bf9e[_0x489211(0xbfe)]=_0x31ecff[_0x489211(0xcd6)],this[_0x489211(0x9f8)](_0x44bf9e),_0x44bf9e[_0x489211(0x45d)](this[_0x489211(0xab5)]),_0x44bf9e[_0x489211(0x352)](this['_battler']),this[_0x489211(0xcd2)](_0x44bf9e);},Sprite_Battler['prototype'][_0x5e79d1(0xcd2)]=function(_0x48336){const _0x57c1d1=_0x5e79d1;this[_0x57c1d1(0x46a)][_0x57c1d1(0x68a)](_0x48336);if(this[_0x57c1d1(0xa81)]()){const _0x20a20e=SceneManager['_scene']['_statusWindow'];if(_0x20a20e)_0x20a20e[_0x57c1d1(0xcd2)](_0x48336,this[_0x57c1d1(0xab5)]);}else{this[_0x57c1d1(0x6e1)]()['addChild'](_0x48336);if(SceneManager[_0x57c1d1(0x44d)]())_0x48336[_0x57c1d1(0x6a2)]['x']=-0x1;}},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xa81)]=function(){const _0x34b2e6=_0x5e79d1;return!$gameSystem['isSideView']()&&this[_0x34b2e6(0xab5)]&&this[_0x34b2e6(0xab5)][_0x34b2e6(0x2ff)]();return!$gameSystem[_0x34b2e6(0x9a5)]()&&this[_0x34b2e6(0xab5)]&&this[_0x34b2e6(0xab5)]['isActor']()&&Window_BattleStatus[_0x34b2e6(0x3a9)][_0x34b2e6(0xca9)]()===_0x34b2e6(0x2af);},Sprite_Battler[_0x5e79d1(0x3a9)]['sortDamageSprites']=function(_0x48a3fb){const _0xe74a78=_0x5e79d1;this['alignBattleCoreDamageSprite'](_0x48a3fb,!![]);const _0x28bd92=VisuMZ[_0xe74a78(0x57e)]['Settings']['Damage'],_0x4148af=SceneManager[_0xe74a78(0x44d)]()?-0x1:0x1;if(_0x28bd92[_0xe74a78(0x20c)])for(const _0x527a1d of this[_0xe74a78(0x46a)]){_0x527a1d['x']+=_0x28bd92['PopupShiftX']*_0x4148af,_0x527a1d['y']+=_0x28bd92[_0xe74a78(0xc00)];}else{const _0x320330=this[_0xe74a78(0x46a)][this[_0xe74a78(0x46a)][_0xe74a78(0xc35)]-0x1];_0x320330&&(_0x48a3fb['x']=_0x320330['x']+_0x28bd92[_0xe74a78(0x52e)]*_0x4148af,_0x48a3fb['y']=_0x320330['y']+_0x28bd92['PopupShiftY']);}},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x392)]=function(_0x2114eb,_0x41219f){const _0x5bb977=_0x5e79d1,_0x161a8b=SceneManager['isBattleFlipped']()?-0x1:0x1;let _0x5be951=this[_0x5bb977(0x523)];_0x5be951+=this['extraPositionX']();let _0x23ae4d=this[_0x5bb977(0x415)];const _0x1aa907=this['_distortionSprite'][_0x5bb977(0x6a2)]['y'];_0x23ae4d+=this[_0x5bb977(0x79c)]();const _0x49d484=SceneManager[_0x5bb977(0xc59)]['_statusWindow'];if(_0x49d484&&this['parent']===_0x49d484){_0x5be951+=_0x49d484['x']-this[_0x5bb977(0xafc)]();const _0xa7ac30=_0x49d484[_0x5bb977(0x649)]()*0x3/0x4;_0x23ae4d=_0x49d484['y']+_0xa7ac30,_0x23ae4d=Math[_0x5bb977(0x52b)](_0x23ae4d,_0x49d484['y']+this['y']-this[_0x5bb977(0x912)]+_0xa7ac30);}_0x2114eb['x']=Math['round'](_0x5be951+this[_0x5bb977(0xafc)]()*_0x161a8b),_0x2114eb['y']=Math[_0x5bb977(0xa7d)](_0x23ae4d+this[_0x5bb977(0xb9a)]());},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x491)]=Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xafc)],Sprite_Battler[_0x5e79d1(0x3a9)]['damageOffsetX']=function(){const _0x1732d1=_0x5e79d1;let _0x12be8a=VisuMZ[_0x1732d1(0x57e)][_0x1732d1(0x491)][_0x1732d1(0x695)](this),_0x4b977a=VisuMZ[_0x1732d1(0x57e)]['Settings'][_0x1732d1(0xb4c)][_0x1732d1(0x99b)]||0x0;return _0x4b977a+=this[_0x1732d1(0xab5)][_0x1732d1(0x9a8)](),Math[_0x1732d1(0xa7d)](_0x12be8a+_0x4b977a);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x494)]=Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xb9a)],Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xb9a)]=function(){const _0x43ff9d=_0x5e79d1;let _0xa81463=VisuMZ[_0x43ff9d(0x57e)][_0x43ff9d(0x494)][_0x43ff9d(0x695)](this);switch(this[_0x43ff9d(0xab5)][_0x43ff9d(0x5a6)]()){case _0x43ff9d(0xc7b):_0xa81463-=this['height']*this[_0x43ff9d(0x6a2)]['y'];break;case _0x43ff9d(0x2ad):_0xa81463-=this[_0x43ff9d(0x912)]*this[_0x43ff9d(0x6a2)]['y']*0.5;break;}let _0x5bcc1c=VisuMZ[_0x43ff9d(0x57e)][_0x43ff9d(0xc89)][_0x43ff9d(0xb4c)]['PopupOffsetY']||0x0;return _0x5bcc1c+=this[_0x43ff9d(0xab5)][_0x43ff9d(0x619)](),Math[_0x43ff9d(0xa7d)](_0xa81463+_0x5bcc1c);},Sprite_Actor['prototype'][_0x5e79d1(0xafc)]=function(){const _0x34be8c=_0x5e79d1;return Sprite_Battler[_0x34be8c(0x3a9)][_0x34be8c(0xafc)][_0x34be8c(0x695)](this);},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xb9a)]=function(){const _0x4e5f38=_0x5e79d1;return Sprite_Battler['prototype'][_0x4e5f38(0xb9a)][_0x4e5f38(0x695)](this);},Sprite_Battler['prototype'][_0x5e79d1(0x7c0)]=function(_0x592c10){const _0x81df21=_0x5e79d1;this[_0x81df21(0xa81)]()?SceneManager[_0x81df21(0xc59)][_0x81df21(0x2cf)]['removeDamageSprite'](_0x592c10):(this[_0x81df21(0x6e1)]()[_0x81df21(0x7a6)](_0x592c10),this['_damages'][_0x81df21(0x9b8)](_0x592c10),_0x592c10[_0x81df21(0x8b9)]());},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x500)]=Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x977)],Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x977)]=function(_0x5e783b,_0x767cf){const _0x1861f3=_0x5e79d1,_0x3a7bc7=VisuMZ[_0x1861f3(0x57e)][_0x1861f3(0xc89)];if(this['constructor']===Sprite_Actor)_0x5e783b+=_0x3a7bc7[_0x1861f3(0x232)][_0x1861f3(0x75b)]||0x0,_0x767cf+=_0x3a7bc7['Actor'][_0x1861f3(0x8fb)]||0x0;else this[_0x1861f3(0x54e)]===Sprite_Enemy&&(_0x5e783b+=_0x3a7bc7[_0x1861f3(0xb2e)][_0x1861f3(0x75b)]||0x0,_0x767cf+=_0x3a7bc7['Enemy'][_0x1861f3(0x8fb)]||0x0);this[_0x1861f3(0xab5)]&&(_0x5e783b=this[_0x1861f3(0xab5)][_0x1861f3(0xa56)]??_0x5e783b,_0x767cf=this['_battler']['_forcedHomeY']??_0x767cf),VisuMZ[_0x1861f3(0x57e)][_0x1861f3(0x500)][_0x1861f3(0x695)](this,_0x5e783b,_0x767cf),this[_0x1861f3(0xb94)]=this[_0x1861f3(0x76c)],this['_targetHomeY']=this['_homeY'],this['_homeDuration']=0x0,this['_homeWholeDuration']=0x0,this['_homeEasing']=_0x1861f3(0xc80);},VisuMZ['BattleCore'][_0x5e79d1(0x261)]=Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)],Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x2e6315=_0x5e79d1;VisuMZ['BattleCore'][_0x2e6315(0x261)][_0x2e6315(0x695)](this),!this[_0x2e6315(0xab5)]&&this[_0x2e6315(0x772)]&&(this[_0x2e6315(0x772)][_0x2e6315(0xcc4)]=![]);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x806)]=Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x963)],Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x963)]=function(){const _0x2c80b0=_0x5e79d1;this[_0x2c80b0(0x21e)](),this[_0x2c80b0(0x1f8)](),this[_0x2c80b0(0xbd3)](),this[_0x2c80b0(0x941)](),VisuMZ['BattleCore'][_0x2c80b0(0x806)]['call'](this),this[_0x2c80b0(0x7aa)](),this[_0x2c80b0(0x67b)]();if(this['constructor']===Sprite_Enemy)this[_0x2c80b0(0xc5f)]();},VisuMZ['BattleCore'][_0x5e79d1(0xcab)]=Sprite_Battler['prototype'][_0x5e79d1(0xa69)],Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xa69)]=function(){const _0x3e8c16=_0x5e79d1;this[_0x3e8c16(0xb10)](),VisuMZ[_0x3e8c16(0x57e)][_0x3e8c16(0xcab)][_0x3e8c16(0x695)](this),this['updatePositionBattleCore'](),this['updateOpacity']();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xcd7)]=function(){const _0x349f31=_0x5e79d1,_0x2789ef=this[_0x349f31(0xc94)]();if(this[_0x349f31(0xab5)]['isSelected']())this['_selectionEffectCount']++,Graphics['frameCount']%0x1e<0xf?_0x2789ef['setBlendColor']([0xff,0xff,0xff,0x40]):_0x2789ef[_0x349f31(0x329)]([0x0,0x0,0x0,0x0]);else this[_0x349f31(0xc32)]>0x0&&(this[_0x349f31(0xc32)]=0x0,_0x2789ef[_0x349f31(0x329)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x6f7)]=function(_0x25f7a7,_0x2fa8a6){const _0x1b565c=_0x5e79d1,_0x49065d=VisuMZ[_0x1b565c(0x57e)]['Settings'];if(this['constructor']===Sprite_Actor)_0x25f7a7+=_0x49065d[_0x1b565c(0x232)][_0x1b565c(0x75b)]||0x0,_0x2fa8a6+=_0x49065d[_0x1b565c(0x232)][_0x1b565c(0x8fb)]||0x0;else this[_0x1b565c(0x54e)]===Sprite_Enemy&&(_0x25f7a7+=_0x49065d[_0x1b565c(0xb2e)][_0x1b565c(0x75b)]||0x0,_0x2fa8a6+=_0x49065d[_0x1b565c(0xb2e)][_0x1b565c(0x8fb)]||0x0);const _0x2f756f=_0x25f7a7-this[_0x1b565c(0x76c)],_0x564e73=_0x2fa8a6-this[_0x1b565c(0x39e)];this['_homeX']=_0x25f7a7,this[_0x1b565c(0x39e)]=_0x2fa8a6,this[_0x1b565c(0x77f)]-=_0x2f756f,this[_0x1b565c(0xb44)]-=_0x564e73,this['_targetOffsetX']-=_0x2f756f,this[_0x1b565c(0x6e7)]-=_0x564e73,this[_0x1b565c(0xa69)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x2e8)]=function(_0x17a998,_0x571995,_0x23ade0,_0x4670da){const _0xec3607=_0x5e79d1,_0xd205eb=VisuMZ[_0xec3607(0x57e)][_0xec3607(0xc89)];if(this[_0xec3607(0x54e)]===Sprite_Actor)_0x17a998+=_0xd205eb[_0xec3607(0x232)]['OffsetX']||0x0,_0x571995+=_0xd205eb['Actor'][_0xec3607(0x8fb)]||0x0;else this[_0xec3607(0x54e)]===Sprite_Enemy&&(_0x17a998+=_0xd205eb[_0xec3607(0xb2e)]['OffsetX']||0x0,_0x571995+=_0xd205eb[_0xec3607(0xb2e)]['OffsetY']||0x0);(this[_0xec3607(0xb94)]!==_0x17a998||this[_0xec3607(0xb35)]!==_0x571995)&&(this[_0xec3607(0xb94)]=_0x17a998,this[_0xec3607(0xb35)]=_0x571995,this[_0xec3607(0x86e)]=_0x23ade0,this[_0xec3607(0xc13)]=_0x23ade0,this[_0xec3607(0xacf)]=_0x4670da,_0x23ade0<=0x0&&this[_0xec3607(0x68f)]());},Sprite_Battler[_0x5e79d1(0x3a9)]['updateHomeMove']=function(){const _0x5f2e69=_0x5e79d1;if(this['_homeDuration']<=0x0)return;const _0x34d41d=this['_homeDuration'],_0x80ee6d=this[_0x5f2e69(0xc13)],_0x5458df=this['_homeEasing'];Imported['VisuMZ_0_CoreEngine']?(this['_homeX']=this[_0x5f2e69(0x611)](this[_0x5f2e69(0x76c)],this[_0x5f2e69(0xb94)],_0x34d41d,_0x80ee6d,_0x5458df),this['_homeY']=this[_0x5f2e69(0x611)](this[_0x5f2e69(0x39e)],this['_targetHomeY'],_0x34d41d,_0x80ee6d,_0x5458df)):(this['_homeX']=(this[_0x5f2e69(0x76c)]*(_0x34d41d-0x1)+this[_0x5f2e69(0xb94)])/_0x34d41d,this[_0x5f2e69(0x39e)]=(this[_0x5f2e69(0x39e)]*(_0x34d41d-0x1)+this[_0x5f2e69(0xb35)])/_0x34d41d);this[_0x5f2e69(0x86e)]--;if(this['_homeDuration']<=0x0)this[_0x5f2e69(0x68f)]();},Sprite_Battler['prototype'][_0x5e79d1(0x68f)]=function(){const _0x3a1f9c=_0x5e79d1;this[_0x3a1f9c(0x76c)]=this[_0x3a1f9c(0xb94)],this[_0x3a1f9c(0x39e)]=this['_targetHomeY'];},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x773)]=function(){const _0x448624=_0x5e79d1;this[_0x448624(0x523)]=this['x'],this[_0x448624(0x415)]=this['y'],this['updateFloat'](),this[_0x448624(0x26c)](),this['x']+=this[_0x448624(0x876)](),this['y']+=this[_0x448624(0x79c)](),this['y']+=this[_0x448624(0x9a4)](),this['x']=Math[_0x448624(0x48d)](this['x']),this['y']=Math[_0x448624(0x48d)](this['y']);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x876)]=function(){let _0x5dafbe=0x0;return _0x5dafbe;},Sprite_Battler[_0x5e79d1(0x3a9)]['extraPositionY']=function(){const _0x452eff=_0x5e79d1;let _0x3ad51d=0x0;return this['_battler']&&!this[_0x452eff(0xab5)][_0x452eff(0x961)]()&&(_0x3ad51d-=this[_0x452eff(0xb16)],_0x3ad51d-=this['_jumpHeight']),_0x3ad51d;},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x9a4)]=function(){const _0x44cdd7=_0x5e79d1;let _0x5dbc11=0x0;if(this[_0x44cdd7(0x6b8)]&&this['constructor']!==Sprite_SvEnemy){const _0x58c971=this[_0x44cdd7(0x6b8)][_0x44cdd7(0x6a2)]['y'];_0x5dbc11-=(_0x58c971-0x1)*this[_0x44cdd7(0x912)];}return _0x5dbc11;},Sprite_Battler[_0x5e79d1(0x3a9)]['updateFlip']=function(){const _0xe09aee=_0x5e79d1,_0x39f769=this[_0xe09aee(0xab5)]&&this[_0xe09aee(0xab5)][_0xe09aee(0xb1b)]();this[_0xe09aee(0x832)]=(_0x39f769?-0x1:0x1)*Math['abs'](this['scale']['x']);},Sprite_Battler['prototype'][_0x5e79d1(0xa36)]=function(_0x37d42d,_0x19433f,_0x4eb3c3){const _0x435e4f=_0x5e79d1;if(!this[_0x435e4f(0x91a)]())return;if(this[_0x435e4f(0x722)]===_0x37d42d)return;this[_0x435e4f(0x722)]=_0x37d42d,this[_0x435e4f(0x840)]=_0x19433f,this[_0x435e4f(0x7fc)]=_0x19433f,this['_floatEasing']=_0x4eb3c3||_0x435e4f(0xc80);if(_0x19433f<=0x0)this[_0x435e4f(0xb16)]=_0x37d42d;},Sprite_Battler['prototype']['updateFloat']=function(){const _0x4ecd66=_0x5e79d1;if(this['_floatDuration']<=0x0)return;const _0x574301=this[_0x4ecd66(0x840)],_0x10d72b=this[_0x4ecd66(0x7fc)],_0x84be6=this['_floatEasing'];Imported[_0x4ecd66(0xaac)]?this[_0x4ecd66(0xb16)]=this[_0x4ecd66(0x611)](this['_floatHeight'],this[_0x4ecd66(0x722)],_0x574301,_0x10d72b,_0x84be6):this[_0x4ecd66(0xb16)]=(this[_0x4ecd66(0xb16)]*(_0x574301-0x1)+this[_0x4ecd66(0x722)])/_0x574301;this['_floatDuration']--;if(this[_0x4ecd66(0x840)]<=0x0)this[_0x4ecd66(0x38b)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x38b)]=function(){const _0xad6ed0=_0x5e79d1;this[_0xad6ed0(0xb16)]=this[_0xad6ed0(0x722)];},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x433)]=function(){const _0x3e4197=_0x5e79d1;return this[_0x3e4197(0x840)]>0x0;},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x96b)]=function(_0x2251e2,_0x507ced){const _0x257fd5=_0x5e79d1;if(!this[_0x257fd5(0x91a)]())return;if(_0x507ced<=0x0)return;this[_0x257fd5(0xbaa)]=_0x2251e2,this[_0x257fd5(0x6ae)]=_0x507ced,this[_0x257fd5(0xaa4)]=_0x507ced;},Sprite_Battler['prototype'][_0x5e79d1(0x26c)]=function(){const _0x16f054=_0x5e79d1;if(this['_jumpDuration']<=0x0)return;const _0x50870c=this[_0x16f054(0xaa4)]-this[_0x16f054(0x6ae)],_0x373020=this[_0x16f054(0xaa4)]/0x2,_0x18ee39=this[_0x16f054(0xbaa)],_0x355eed=-_0x18ee39/Math[_0x16f054(0xa55)](_0x373020,0x2);this['_jumpHeight']=_0x355eed*Math['pow'](_0x50870c-_0x373020,0x2)+_0x18ee39,this[_0x16f054(0x6ae)]--;if(this[_0x16f054(0x6ae)]<=0x0)return this[_0x16f054(0x676)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x676)]=function(){this['_jumpHeight']=0x0;},Sprite_Battler[_0x5e79d1(0x3a9)]['isJumping']=function(){const _0x1bf490=_0x5e79d1;return this[_0x1bf490(0x6ae)]>0x0;},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x70c)]=function(_0x141c6a,_0x18a84e,_0x5b5389){const _0x2ce33b=_0x5e79d1;if(this[_0x2ce33b(0x776)]===_0x141c6a)return;this[_0x2ce33b(0x776)]=_0x141c6a,this[_0x2ce33b(0xa9a)]=_0x18a84e,this[_0x2ce33b(0x760)]=_0x18a84e,this[_0x2ce33b(0x63e)]=_0x5b5389||_0x2ce33b(0xc80);if(_0x18a84e<=0x0)this['opacity']=_0x141c6a;},Sprite_Battler['prototype'][_0x5e79d1(0x2aa)]=function(){const _0x17aab2=_0x5e79d1;if(this['constructor'][_0x17aab2(0x66e)]===_0x17aab2(0x1f6))return;if(this['_opacityDuration']<=0x0)return;const _0x176636=this[_0x17aab2(0xa9a)],_0x261323=this[_0x17aab2(0x760)],_0x3ad5af=this[_0x17aab2(0x63e)];Imported[_0x17aab2(0xaac)]?this[_0x17aab2(0x3f9)]=this[_0x17aab2(0x611)](this['opacity'],this[_0x17aab2(0x776)],_0x176636,_0x261323,_0x3ad5af):this[_0x17aab2(0x3f9)]=(this[_0x17aab2(0x3f9)]*(_0x176636-0x1)+this[_0x17aab2(0x776)])/_0x176636;this[_0x17aab2(0xa9a)]--;if(this[_0x17aab2(0xa9a)]<=0x0)this[_0x17aab2(0xc5b)]();},Sprite_Battler['prototype']['onOpacityEnd']=function(){const _0x40139b=_0x5e79d1;this['opacity']=this[_0x40139b(0x776)];},Sprite_Battler[_0x5e79d1(0x3a9)]['isChangingOpacity']=function(){const _0x4f43e3=_0x5e79d1;return this[_0x4f43e3(0xa9a)]>0x0;},Sprite_Battler[_0x5e79d1(0x3a9)]['updateShadow']=function(){const _0x7983b=_0x5e79d1;this[_0x7983b(0x699)][_0x7983b(0xcc4)]=this[_0x7983b(0xab5)][_0x7983b(0x3ef)](),this[_0x7983b(0xcdc)]();},Sprite_Battler[_0x5e79d1(0x3a9)]['updateShadowPosition']=function(){const _0x2d8a2f=_0x5e79d1;if(!this[_0x2d8a2f(0x699)])return;this[_0x2d8a2f(0x699)]['y']=this[_0x2d8a2f(0x415)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x5e79d1(0x751)]=function(){const _0x425bd9=_0x5e79d1;if(!this['_battler'])return;this['_shadowScaleX']=this[_0x425bd9(0xab5)][_0x425bd9(0x3a6)](),this[_0x425bd9(0x405)]=this['_battler'][_0x425bd9(0x903)]();},Game_BattlerBase['prototype'][_0x5e79d1(0x3a6)]=function(){const _0x31551b=_0x5e79d1,_0x255697=this[_0x31551b(0x2ff)]()?this[_0x31551b(0x5a0)]():this['enemy']();if(_0x255697){const _0x224c03=_0x255697[_0x31551b(0x85e)];if(_0x224c03['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x224c03[_0x31551b(0xcd4)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x903)]=function(){const _0x5ee6b0=_0x5e79d1,_0x5dfd04=this[_0x5ee6b0(0x2ff)]()?this[_0x5ee6b0(0x5a0)]():this['enemy']();if(_0x5dfd04){const _0x24bb16=_0x5dfd04['note'];if(_0x24bb16[_0x5ee6b0(0xcd4)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x24bb16['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x21e)]=function(){const _0x2cf2a5=_0x5e79d1;if(this[_0x2cf2a5(0x54e)]===Sprite_SvEnemy)return;this[_0x2cf2a5(0xba1)](),this[_0x2cf2a5(0x85c)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x85c)]=function(){const _0x579758=_0x5e79d1,_0x386b2b=this[_0x579758(0x6b8)];_0x386b2b&&(_0x386b2b[_0x579758(0x6a2)]['x']=this[_0x579758(0x2e5)](),_0x386b2b[_0x579758(0x6a2)]['y']=this[_0x579758(0xbaf)]());},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x2e5)]=function(){const _0x33b344=_0x5e79d1;let _0x18f4ad=0x1;return _0x18f4ad*=this['_flipScaleX'],_0x18f4ad*=this[_0x33b344(0xb5d)],_0x18f4ad;},Sprite_Battler['prototype'][_0x5e79d1(0xbaf)]=function(){const _0x2ee3f5=_0x5e79d1;return 0x1*this[_0x2ee3f5(0xcad)];},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x872)]=function(){const _0x4af3e2=_0x5e79d1;return this[_0x4af3e2(0xa0f)]*this[_0x4af3e2(0x2e5)]();},Sprite_Battler['prototype'][_0x5e79d1(0x58a)]=function(){const _0xd49588=_0x5e79d1;return this[_0xd49588(0x912)]*this[_0xd49588(0xbaf)]();},Sprite_Battler[_0x5e79d1(0x3a9)]['startGrow']=function(_0x5a8569,_0x4c32d6,_0x427bbb,_0x2129be){const _0x236f60=_0x5e79d1;if(!this[_0x236f60(0x91a)]())return;if(!this['_distortionSprite'])return;if(this[_0x236f60(0x289)]===_0x5a8569&&this[_0x236f60(0x92d)]===_0x4c32d6)return;this[_0x236f60(0x289)]=_0x5a8569,this['_targetGrowY']=_0x4c32d6,this['_growDuration']=_0x427bbb,this[_0x236f60(0x932)]=_0x427bbb,this['_growEasing']=_0x2129be||_0x236f60(0xc80),_0x427bbb<=0x0&&(this[_0x236f60(0xb5d)]=this['_targetGrowX'],this[_0x236f60(0xcad)]=this[_0x236f60(0x92d)]);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xba1)]=function(){const _0x5b074b=_0x5e79d1;if(this[_0x5b074b(0xad7)]<=0x0)return;if(!this[_0x5b074b(0x6b8)])return;const _0x194a01=this[_0x5b074b(0xad7)],_0x1c35ca=this['_growWholeDuration'],_0x21f7bc=this[_0x5b074b(0x783)];Imported[_0x5b074b(0xaac)]?(this[_0x5b074b(0xb5d)]=this[_0x5b074b(0x611)](this['_growX'],this[_0x5b074b(0x289)],_0x194a01,_0x1c35ca,_0x21f7bc),this[_0x5b074b(0xcad)]=this[_0x5b074b(0x611)](this[_0x5b074b(0xcad)],this[_0x5b074b(0x92d)],_0x194a01,_0x1c35ca,_0x21f7bc)):(this['_growX']=(this['_growX']*(_0x194a01-0x1)+this['_targetGrowX'])/_0x194a01,this[_0x5b074b(0xcad)]=(this[_0x5b074b(0xcad)]*(_0x194a01-0x1)+this['_targetGrowY'])/_0x194a01);this[_0x5b074b(0xad7)]--;if(this[_0x5b074b(0xad7)]<=0x0)this[_0x5b074b(0x842)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x842)]=function(){const _0x1bd0b7=_0x5e79d1;this[_0x1bd0b7(0xb5d)]=this['_targetGrowX'],this[_0x1bd0b7(0xcad)]=this[_0x1bd0b7(0x92d)];},Sprite_Battler[_0x5e79d1(0x3a9)]['isGrowing']=function(){const _0x468f2e=_0x5e79d1;return this[_0x468f2e(0xad7)]>0x0;},Sprite_Battler['prototype'][_0x5e79d1(0x2f5)]=function(_0x582ad7,_0x2211b4,_0x199c69,_0x2b008b){const _0x31b235=_0x5e79d1;if(!this[_0x31b235(0x91a)]())return;if(!this[_0x31b235(0x6b8)])return;if(this[_0x31b235(0xc50)]===_0x582ad7&&this[_0x31b235(0x97f)]===_0x2211b4)return;this[_0x31b235(0xc50)]=_0x582ad7,this[_0x31b235(0x97f)]=_0x2211b4,this['_skewDuration']=_0x199c69,this['_skewWholeDuration']=_0x199c69,this['_skewEasing']=_0x2b008b||_0x31b235(0xc80),_0x199c69<=0x0&&(this[_0x31b235(0x6b8)][_0x31b235(0x20d)]['x']=this[_0x31b235(0xc50)],this['_distortionSprite'][_0x31b235(0x20d)]['y']=this['_targetSkewY']);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x1f8)]=function(){const _0x3303b0=_0x5e79d1;if(this[_0x3303b0(0x388)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x149fea=this[_0x3303b0(0x388)],_0x42ac56=this[_0x3303b0(0x2ec)],_0xaadc92=this[_0x3303b0(0xb23)],_0x4c60de=this[_0x3303b0(0x6b8)];Imported['VisuMZ_0_CoreEngine']?(_0x4c60de[_0x3303b0(0x20d)]['x']=this[_0x3303b0(0x611)](_0x4c60de[_0x3303b0(0x20d)]['x'],this['_targetSkewX'],_0x149fea,_0x42ac56,_0xaadc92),_0x4c60de[_0x3303b0(0x20d)]['y']=this['applyEasing'](_0x4c60de['skew']['y'],this['_targetSkewY'],_0x149fea,_0x42ac56,_0xaadc92)):(_0x4c60de['skew']['x']=(_0x4c60de[_0x3303b0(0x20d)]['x']*(_0x149fea-0x1)+this[_0x3303b0(0xc50)])/_0x149fea,_0x4c60de['skew']['y']=(_0x4c60de[_0x3303b0(0x20d)]['y']*(_0x149fea-0x1)+this['_targetSkewY'])/_0x149fea);this[_0x3303b0(0x388)]--;if(this[_0x3303b0(0x388)]<=0x0)this[_0x3303b0(0x267)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x267)]=function(){const _0x13e8e8=_0x5e79d1;this[_0x13e8e8(0x6b8)][_0x13e8e8(0x20d)]['x']=this['_targetSkewX'],this[_0x13e8e8(0x6b8)][_0x13e8e8(0x20d)]['y']=this[_0x13e8e8(0x97f)];},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x5a3)]=function(){const _0x572a8f=_0x5e79d1;return this[_0x572a8f(0x388)]>0x0;},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x6d4)]=function(_0xbb1c22,_0x578b93,_0x3aa1c3,_0x67693a){const _0x21957f=_0x5e79d1;if(!this[_0x21957f(0x91a)]())return;if(!this[_0x21957f(0x6b8)])return;if(this[_0x21957f(0xb85)]===_0xbb1c22)return;this['_targetAngle']=_0xbb1c22,this[_0x21957f(0xb92)]=_0x578b93,this[_0x21957f(0x710)]=_0x578b93,this['_angleEasing']=_0x3aa1c3||_0x21957f(0xc80),this[_0x21957f(0x374)]=_0x67693a,this[_0x21957f(0x374)]===undefined&&(this['_angleRevertOnFinish']=!![]),_0x578b93<=0x0&&(this['_currentAngle']=_0xbb1c22,this[_0x21957f(0x374)]&&(this[_0x21957f(0xb85)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xbd3)]=function(){const _0x4a4bb2=_0x5e79d1;this[_0x4a4bb2(0x22c)](),this[_0x4a4bb2(0x426)]();},Sprite_Battler['prototype'][_0x5e79d1(0x22c)]=function(){const _0x3e4bd7=_0x5e79d1;if(this[_0x3e4bd7(0xb92)]<=0x0)return;const _0x335641=this['_angleDuration'],_0x267552=this[_0x3e4bd7(0x710)],_0x42cf85=this['_angleEasing'];Imported[_0x3e4bd7(0xaac)]?this[_0x3e4bd7(0xb11)]=this[_0x3e4bd7(0x611)](this[_0x3e4bd7(0xb11)],this[_0x3e4bd7(0xb85)],_0x335641,_0x267552,_0x42cf85):this[_0x3e4bd7(0xb11)]=(this['_currentAngle']*(_0x335641-0x1)+this[_0x3e4bd7(0xb85)])/_0x335641;this[_0x3e4bd7(0xb92)]--;if(this[_0x3e4bd7(0xb92)]<=0x0)this[_0x3e4bd7(0x87c)]();},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x87c)]=function(){const _0x313e28=_0x5e79d1;this[_0x313e28(0xb11)]=this[_0x313e28(0xb85)],this[_0x313e28(0x374)]&&(this[_0x313e28(0xb85)]=0x0,this[_0x313e28(0xb11)]=0x0);},Sprite_Battler['prototype'][_0x5e79d1(0xc3e)]=function(){const _0x23b87e=_0x5e79d1;return this[_0x23b87e(0xb92)]>0x0;},Sprite_Battler['prototype'][_0x5e79d1(0x426)]=function(){const _0x3a108d=_0x5e79d1;if(!this[_0x3a108d(0x6b8)])return;const _0x4e6979=this[_0x3a108d(0xb11)],_0x5952af=this['scale']['x'],_0x3f56f2=this[_0x3a108d(0xab5)][_0x3a108d(0x2ff)]()?-0x1:0x1;this[_0x3a108d(0x6b8)][_0x3a108d(0x3eb)]=_0x4e6979*_0x5952af*_0x3f56f2;const _0x2da015=this['_distortionSprite'][_0x3a108d(0x6a2)]['y'];this[_0x3a108d(0x6b8)]['y']=this['height']*-0.5*(0x2-_0x2da015),this['_distortionSprite']['y']=Math[_0x3a108d(0xb46)](this[_0x3a108d(0x6b8)]['y']);const _0x11fa47=[this[_0x3a108d(0xb76)],this[_0x3a108d(0x4a4)],this[_0x3a108d(0xaa5)]];for(const _0x4dec6c of _0x11fa47){if(!_0x4dec6c)continue;_0x4dec6c['y']=this[_0x3a108d(0x912)]*0.5;}this[_0x3a108d(0x699)]&&(this[_0x3a108d(0x304)]=this[_0x3a108d(0x304)]??0x1,this['_shadowScaleY']=this[_0x3a108d(0x405)]??0x1,this[_0x3a108d(0x699)]['scale']['x']=this['_distortionSprite']['scale']['x']*this['_shadowScaleX'],this['_shadowSprite'][_0x3a108d(0x6a2)]['y']=this[_0x3a108d(0x6b8)][_0x3a108d(0x6a2)]['y']*this[_0x3a108d(0x405)]);},VisuMZ['BattleCore'][_0x5e79d1(0xa07)]=Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x42a)],Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x42a)]=function(){const _0x408921=_0x5e79d1;VisuMZ[_0x408921(0x57e)][_0x408921(0xa07)]['call'](this),VisuMZ[_0x408921(0x57e)][_0x408921(0xc89)]['HpGauge'][_0x408921(0x998)]&&this[_0x408921(0x6fc)]();},VisuMZ[_0x5e79d1(0x57e)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb84)],Sprite_Enemy[_0x5e79d1(0x3a9)]['createStateIconSprite']=function(){const _0x371873=_0x5e79d1;VisuMZ[_0x371873(0x57e)]['Settings'][_0x371873(0xc24)][_0x371873(0xc64)]&&this[_0x371873(0x6fc)](),VisuMZ['BattleCore']['Sprite_Enemy_createStateIconSprite']['call'](this);},Sprite_Battler['prototype']['createHpGaugeSprite']=function(){const _0x176983=_0x5e79d1;if(!ConfigManager['visualHpGauge'])return;if(this[_0x176983(0x54e)]===Sprite_SvEnemy)return;const _0x5a858e=VisuMZ[_0x176983(0x57e)][_0x176983(0xc89)]['HpGauge'],_0xb5c3ef=new Sprite_HpGauge();_0xb5c3ef[_0x176983(0x64c)]['x']=_0x5a858e['AnchorX'],_0xb5c3ef['anchor']['y']=_0x5a858e['AnchorY'],_0xb5c3ef[_0x176983(0x6a2)]['x']=_0xb5c3ef[_0x176983(0x6a2)]['y']=_0x5a858e[_0x176983(0x9e3)],this[_0x176983(0x772)]=_0xb5c3ef,this[_0x176983(0x593)](this[_0x176983(0x772)]),Spriteset_Battle[_0x176983(0x3c1)]&&BattleManager[_0x176983(0x3d6)](this[_0x176983(0x772)]);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x827)]=Sprite_Battler[_0x5e79d1(0x3a9)]['setBattler'],Sprite_Battler['prototype'][_0x5e79d1(0x46e)]=function(_0x823e02){const _0x130752=_0x5e79d1,_0x287241=this['_battler'];VisuMZ[_0x130752(0x57e)][_0x130752(0x827)]['call'](this,_0x823e02),this['setupHpGaugeSprite'](_0x823e02);if(_0x287241!==_0x823e02)this[_0x130752(0x751)]();},Sprite_Battler[_0x5e79d1(0x3a9)]['setupHpGaugeSprite']=function(_0x4dee63){const _0x43eab4=_0x5e79d1;if(!_0x4dee63)return;if(!this[_0x43eab4(0x772)])return;if(_0x4dee63[_0x43eab4(0x2ff)]()){}else{if(_0x4dee63['isEnemy']()){if(this[_0x43eab4(0x54e)]===Sprite_SvEnemy&&!_0x4dee63[_0x43eab4(0x3ef)]())return;}}this[_0x43eab4(0x772)][_0x43eab4(0x45d)](_0x4dee63,'hp');},Sprite_Battler['prototype'][_0x5e79d1(0x413)]=function(){const _0x5d07bb=_0x5e79d1;return this['_battler']&&this[_0x5d07bb(0xab5)][_0x5d07bb(0x413)]();},Sprite_Battler[_0x5e79d1(0x3a9)]['updateStaticSvBattlerFrames']=function(){const _0x1ac84b=_0x5e79d1,_0x218ecc=this['_mainSprite'][_0x1ac84b(0xc11)];if(!_0x218ecc)return;const _0x43d102=_0x218ecc[_0x1ac84b(0xa0f)];let _0x33d1ef=_0x218ecc[_0x1ac84b(0x912)];if(this[_0x1ac84b(0xab5)][_0x1ac84b(0x5d8)]()){if(this[_0x1ac84b(0x896)])_0x33d1ef=Math[_0x1ac84b(0x9db)](0x0,this[_0x1ac84b(0x896)][_0x1ac84b(0x912)]-0x4);}this[_0x1ac84b(0xb76)][_0x1ac84b(0xbfb)](0x0,0x0,_0x43d102,_0x33d1ef),this['setFrame'](0x0,0x0,_0x43d102,_0x33d1ef);},Sprite_Battler[_0x5e79d1(0x3a9)]['updateHpGaugePosition']=function(){const _0xdcc491=_0x5e79d1;if(!this[_0xdcc491(0xab5)])return;if(!this['_hpGaugeSprite'])return;const _0x779126=VisuMZ[_0xdcc491(0x57e)]['Settings']['HpGauge'],_0x15d058=this[_0xdcc491(0x772)];_0x15d058[_0xdcc491(0xcc4)]=this['isVisualHpGaugeDisplayed']();const _0x22d061=_0x779126[_0xdcc491(0x75b)],_0x48f6f8=_0x779126[_0xdcc491(0x8fb)];_0x15d058['x']=_0x22d061,_0x15d058['x']+=this[_0xdcc491(0xab5)][_0xdcc491(0x553)](),_0x15d058['y']=-this[_0xdcc491(0x912)]+_0x48f6f8,_0x15d058['y']+=this['_battler'][_0xdcc491(0x82a)](),Spriteset_Battle[_0xdcc491(0x3c1)]&&SceneManager[_0xdcc491(0xc59)][_0xdcc491(0x29c)]&&(_0x15d058['x']+=this['x'],_0x15d058['y']+=this['y']);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xa8d)]=function(){const _0x5b15b1=_0x5e79d1;if(!this['_battler'])return![];if(this[_0x5b15b1(0xab5)][_0x5b15b1(0x2ff)]())return!![];if(this[_0x5b15b1(0xab5)][_0x5b15b1(0x317)]())return![];if(this[_0x5b15b1(0x3f9)]<=0x0)return![];const _0x5506e4=this[_0x5b15b1(0xab5)]['enemy']()[_0x5b15b1(0x85e)];if(_0x5506e4[_0x5b15b1(0xcd4)](/<SHOW HP GAUGE>/i))return!![];if(_0x5506e4[_0x5b15b1(0xcd4)](/<HIDE HP GAUGE>/i))return![];const _0x273dc9=VisuMZ[_0x5b15b1(0x57e)][_0x5b15b1(0xc89)][_0x5b15b1(0xc24)];if(_0x273dc9['RequiresDefeat']){if(_0x273dc9[_0x5b15b1(0xa19)]&&BattleManager['isBattleTest']())return!![];if(this[_0x5b15b1(0xab5)][_0x5b15b1(0x5ee)])return![];return this[_0x5b15b1(0xab5)]['hasBeenDefeatedBefore']();}return!![];},VisuMZ['BattleCore'][_0x5e79d1(0xb73)]=Sprite_Battler[_0x5e79d1(0x3a9)]['isMoving'],Sprite_Battler['prototype'][_0x5e79d1(0xce8)]=function(){const _0xa86446=_0x5e79d1;if(!this[_0xa86446(0xab5)])return![];if(this[_0xa86446(0x86e)]>0x0)return!![];return VisuMZ[_0xa86446(0x57e)]['Sprite_Battler_isMoving'][_0xa86446(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x47d)]=Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xaef)],Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0xaef)]=function(_0x2e2e94,_0x58abdd,_0x5770bf){const _0x5ca84f=_0x5e79d1;this['canMove']()&&VisuMZ[_0x5ca84f(0x57e)][_0x5ca84f(0x47d)]['call'](this,_0x2e2e94,_0x58abdd,_0x5770bf);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x91a)]=function(){const _0x248d49=_0x5e79d1;if(this[_0x248d49(0xab5)]&&this[_0x248d49(0xab5)][_0x248d49(0x5d8)]())return![];if(this[_0x248d49(0xab5)]&&!this[_0x248d49(0xab5)][_0x248d49(0xb6e)]())return![];return $gameSystem[_0x248d49(0x9a5)]();},Sprite_Battler['prototype'][_0x5e79d1(0xb39)]=function(){},Sprite_Battler['prototype']['stepBack']=function(){const _0x454793=_0x5e79d1;this[_0x454793(0xaef)](0x0,0x0,0xc);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x656)]=function(){},Sprite_Battler['prototype'][_0x5e79d1(0x1d4)]=function(){const _0x322a23=_0x5e79d1,_0x3557a4=VisuMZ[_0x322a23(0x57e)]['Settings'][_0x322a23(0x232)],_0x201e68=this[_0x322a23(0xab5)]&&this[_0x322a23(0xab5)][_0x322a23(0x2ff)]()?0x1:-0x1,_0x25bc8f=this[_0x322a23(0x523)]-this[_0x322a23(0x76c)]+_0x201e68*_0x3557a4['FlinchDistanceX'],_0x85a70f=this[_0x322a23(0x415)]-this[_0x322a23(0x39e)]+_0x201e68*_0x3557a4['FlinchDistanceY'],_0x1c6abc=_0x3557a4['FlinchDuration'];this[_0x322a23(0xaef)](_0x25bc8f,_0x85a70f,_0x1c6abc);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x67c)]=function(_0x211534,_0x4f0335){const _0x47b9a3=_0x5e79d1,_0x10f994=VisuMZ[_0x47b9a3(0x57e)][_0x47b9a3(0xc89)][_0x47b9a3(0x232)];this[_0x47b9a3(0x2b3)]=Math[_0x47b9a3(0xb46)]((_0x10f994[_0x47b9a3(0x4be)]??0x18)*_0x4f0335),this['_shakeFlinchPower']=Math['max'](this[_0x47b9a3(0xc33)],_0x211534);},Sprite_Battler[_0x5e79d1(0x3a9)][_0x5e79d1(0x67b)]=function(){const _0x4f8141=_0x5e79d1,_0x417147=VisuMZ['BattleCore']['Settings']['Actor'];if(!(_0x417147['ShakeFlinch']??![]))return;if(this[_0x4f8141(0x2b3)]>0x0){const _0x320fa5=this[_0x4f8141(0x2b3)];this[_0x4f8141(0xc33)]=this['_shakeFlinchPower']*(_0x320fa5-0x1)/_0x320fa5,this['_shakeFlinchDuration']--,this[_0x4f8141(0x2b3)]<=0x0&&(this[_0x4f8141(0xc33)]=0x0);}this[_0x4f8141(0xc33)]>0x0?(this[_0x4f8141(0xb76)]['x']=Math[_0x4f8141(0x65b)](this[_0x4f8141(0xc33)])*(Math[_0x4f8141(0xc61)]()<0.5?-0x1:0x1),this['_baseY']!==this['y']&&(this[_0x4f8141(0xb76)]['y']=this['height']*0.5,this[_0x4f8141(0xb76)]['y']+=Math[_0x4f8141(0x65b)](this[_0x4f8141(0xc33)])*(Math[_0x4f8141(0xc61)]()<0.5?-0x1:0x1))):(this['_mainSprite']['x']=0x0,this[_0x4f8141(0xb76)]['y']=this[_0x4f8141(0x912)]*0.5);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xcb0)]=Sprite_Actor[_0x5e79d1(0x3a9)]['initMembers'],Sprite_Actor['prototype'][_0x5e79d1(0x70d)]=function(){const _0x2a4f56=_0x5e79d1;VisuMZ[_0x2a4f56(0x57e)][_0x2a4f56(0xcb0)][_0x2a4f56(0x695)](this),this[_0x2a4f56(0x2e1)]();},Sprite_Actor[_0x5e79d1(0x3a9)]['mainSprite']=function(){const _0x589225=_0x5e79d1;return this[_0x589225(0x6b8)]||this['_mainSprite']||this;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2a8)]=Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x8ce)],Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x8ce)]=function(){},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x542)]=function(_0x251749){const _0x2d3db9=_0x5e79d1;if(SceneManager[_0x2d3db9(0x28d)]())return;if(!_0x251749)return;if(!_0x251749['canMove']())return;VisuMZ[_0x2d3db9(0x57e)][_0x2d3db9(0x2a8)][_0x2d3db9(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)]['Sprite_Actor_setActorHome']=Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x629)],Sprite_Actor[_0x5e79d1(0x3a9)]['setActorHome']=function(_0x3e5040){const _0x41faf8=_0x5e79d1;VisuMZ[_0x41faf8(0x57e)]['Settings']['Actor']['HomePosJS']?VisuMZ[_0x41faf8(0x57e)][_0x41faf8(0xc89)]['Actor'][_0x41faf8(0x7f4)][_0x41faf8(0x695)](this,_0x3e5040):VisuMZ[_0x41faf8(0x57e)][_0x41faf8(0x5fc)][_0x41faf8(0x695)](this,_0x3e5040);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x50e)]=Sprite_Actor[_0x5e79d1(0x3a9)]['setBattler'],Sprite_Actor[_0x5e79d1(0x3a9)]['setBattler']=function(_0x3d9544){const _0x452d53=_0x5e79d1;VisuMZ[_0x452d53(0x57e)]['Sprite_Actor_setBattler'][_0x452d53(0x695)](this,_0x3d9544),this[_0x452d53(0x8c3)](_0x3d9544);},Sprite_Actor[_0x5e79d1(0x3a9)]['setBattlerBattleCore']=function(_0x557106){const _0x3af5e3=_0x5e79d1;if(!_0x557106)return;if(!this[_0x3af5e3(0xb76)])return;this[_0x3af5e3(0xb76)][_0x3af5e3(0x64c)]['x']=this[_0x3af5e3(0x380)]['svBattlerAnchorX'](),this['_mainSprite'][_0x3af5e3(0x64c)]['y']=this[_0x3af5e3(0x380)][_0x3af5e3(0x278)](),this[_0x3af5e3(0x910)]();},VisuMZ[_0x5e79d1(0x57e)]['Sprite_Actor_update']=Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)],Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x43a9f8=_0x5e79d1;VisuMZ[_0x43a9f8(0x57e)][_0x43a9f8(0x41b)][_0x43a9f8(0x695)](this),this[_0x43a9f8(0x380)]&&(this[_0x43a9f8(0x505)](),this[_0x43a9f8(0x57a)]());},VisuMZ['BattleCore'][_0x5e79d1(0x1f5)]=Sprite_Actor['prototype'][_0x5e79d1(0x264)],Sprite_Actor[_0x5e79d1(0x3a9)]['updateBitmap']=function(){const _0x523ad5=_0x5e79d1;VisuMZ[_0x523ad5(0x57e)][_0x523ad5(0x1f5)][_0x523ad5(0x695)](this),this[_0x523ad5(0xb76)]&&this['_mainSprite'][_0x523ad5(0xc11)]&&this[_0x523ad5(0xab5)]&&(this['_mainSprite'][_0x523ad5(0xc11)]['smooth']!==this[_0x523ad5(0xab5)][_0x523ad5(0xb36)]()&&(this['_mainSprite']['bitmap'][_0x523ad5(0xce3)]=this[_0x523ad5(0xab5)][_0x523ad5(0xb36)]()));},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x36f)]=Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xc5f)],Sprite_Actor['prototype'][_0x5e79d1(0xc5f)]=function(){const _0x540d32=_0x5e79d1;VisuMZ['BattleCore'][_0x540d32(0x36f)][_0x540d32(0x695)](this),this[_0x540d32(0x3dc)]();},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x3dc)]=function(){const _0x2c086c=_0x5e79d1;if(!this[_0x2c086c(0xb76)])return;if(!this[_0x2c086c(0x699)])return;this[_0x2c086c(0x910)](),this[_0x2c086c(0xcdc)]();},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x505)]=function(){const _0x3db9b5=_0x5e79d1;{this[_0x3db9b5(0x1ea)][_0x3db9b5(0x6a2)]['x']=0x1/(this[_0x3db9b5(0x6a2)]['x']||0.001),this[_0x3db9b5(0x1ea)][_0x3db9b5(0x6a2)]['y']=0x1/(this[_0x3db9b5(0x6a2)]['y']||0.001);}{this[_0x3db9b5(0x1ea)]['x']=0x0,this[_0x3db9b5(0x1ea)]['y']=-this[_0x3db9b5(0x912)]-0x20+0x60;const _0xe085a2=VisuMZ['BattleCore']['Settings'][_0x3db9b5(0x232)];this['_stateSprite']['x']+=_0xe085a2['StateOverlayOffsetX']??0x0,this[_0x3db9b5(0x1ea)]['y']+=_0xe085a2[_0x3db9b5(0x4ef)]??0x0;}},Sprite_Actor['prototype'][_0x5e79d1(0x57a)]=function(){const _0xa0a552=_0x5e79d1;if(!$gameSystem[_0xa0a552(0x9a5)]()&&this[_0xa0a552(0x54e)]===Sprite_Actor){const _0x1bdc81=Scene_Battle['prototype']['battleLayoutStyle']();[_0xa0a552(0x5ab),'list',_0xa0a552(0x2af),'border']['includes'](_0x1bdc81)&&(this[_0xa0a552(0x3f9)]=0x0);}},Sprite_Actor['prototype'][_0x5e79d1(0xb5c)]=function(){const _0x2a4e8c=_0x5e79d1,_0x39db7a=this[_0x2a4e8c(0x380)];if(_0x39db7a){if(_0x39db7a[_0x2a4e8c(0x99c)])return;const _0x2f5d11=_0x39db7a[_0x2a4e8c(0x1e0)]();if(_0x39db7a[_0x2a4e8c(0x2ef)]()||_0x39db7a[_0x2a4e8c(0x23d)]())this['startMotion'](_0x2a4e8c(0x42e));else{if(_0x2f5d11===0x3)this['startMotion'](_0x2a4e8c(0x5cc));else{if(_0x2f5d11===0x2)this[_0x2a4e8c(0x347)]('sleep');else{if(this['forceEscapeSprite'])this['startMotion'](_0x2a4e8c(0x586));else{if(_0x39db7a[_0x2a4e8c(0x971)]())this['startMotion']('wait');else{if(_0x39db7a[_0x2a4e8c(0x93a)]())this[_0x2a4e8c(0x347)](_0x2a4e8c(0xaeb));else{if(_0x39db7a[_0x2a4e8c(0x432)]()||_0x39db7a['isGuardWaiting']())this[_0x2a4e8c(0x347)](_0x2a4e8c(0x725));else{if(_0x2f5d11===0x1)this[_0x2a4e8c(0x347)](_0x2a4e8c(0x39b));else{if(_0x39db7a['isDying']())this['startMotion'](_0x2a4e8c(0x72d));else{if(_0x39db7a[_0x2a4e8c(0x5b4)]())this['startMotion'](_0x2a4e8c(0x42e));else _0x39db7a[_0x2a4e8c(0xc09)]()?this[_0x2a4e8c(0x347)]('wait'):this[_0x2a4e8c(0x347)](_0x2a4e8c(0x42e));}}}}}}}}}}},Sprite_Actor[_0x5e79d1(0x3a9)]['retreat']=function(){const _0x40f57a=_0x5e79d1,_0x1d48d9=0xa,_0x3753c6=0x12c*_0x1d48d9,_0x432fee=0x1e*_0x1d48d9;this[_0x40f57a(0xaef)](_0x3753c6,0x0,_0x432fee);},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x996)]=function(){const _0x2538f0=_0x5e79d1;Sprite_Battler['prototype']['onMoveEnd'][_0x2538f0(0x695)](this);},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xc88)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x5e79d1(0x3a9)][_0x5e79d1(0x1e5)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Actor['prototype']['setupMotion']=function(){},Sprite_Actor['prototype'][_0x5e79d1(0x2c2)]=function(){},Sprite_Actor['prototype'][_0x5e79d1(0x875)]=function(){const _0x2759eb=_0x5e79d1;if(this['_motion']&&++this[_0x2759eb(0x74f)]>=this[_0x2759eb(0xc88)]()){if(this[_0x2759eb(0x6cc)][_0x2759eb(0x789)])this[_0x2759eb(0xa5c)]=(this['_pattern']+0x1)%0x4;else{if(this['_pattern']<0x2)this[_0x2759eb(0xa5c)]++;else{const _0x22f5ac=this[_0x2759eb(0x380)];if(_0x22f5ac)_0x22f5ac['_performDamageMotion']=undefined;this['refreshMotion']();}}this['_motionCount']=0x0;}},Sprite_Actor['prototype'][_0x5e79d1(0x592)]=function(_0x4e4ad3){const _0x121c0f=_0x5e79d1;if(this[_0x121c0f(0xab5)]&&this['_battler'][_0x121c0f(0x5d8)]()){this[_0x121c0f(0x6cc)]=Sprite_Actor['MOTIONS']['dead'];return;}const _0x1e3b23=Sprite_Actor[_0x121c0f(0xbbc)][_0x4e4ad3];this[_0x121c0f(0x6cc)]=_0x1e3b23,this['_motionCount']=0x0,this[_0x121c0f(0xa5c)]=0x0;},Sprite_Actor['prototype'][_0x5e79d1(0x861)]=function(_0x832d44){const _0x31b2ae=_0x5e79d1;if(this[_0x31b2ae(0x413)]())return;this[_0x31b2ae(0xc8c)](),this[_0x31b2ae(0x1e8)][_0x31b2ae(0x45d)](_0x832d44),this[_0x31b2ae(0x380)][_0x31b2ae(0xbd7)]();},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xc8c)]=function(){const _0x11fd26=_0x5e79d1;let _0x2a2578=-0x10,_0x452c24=this[_0x11fd26(0x912)]*0.5;const _0x5f430f=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x2ebbff=this[_0x11fd26(0xab5)]['traitObjects']()[_0x11fd26(0x343)](_0x5a697d=>_0x5a697d&&_0x5a697d[_0x11fd26(0x85e)]['match'](_0x5f430f)?Number(RegExp['$1']):0x0),_0x627717=this[_0x11fd26(0xab5)][_0x11fd26(0x3b6)]()[_0x11fd26(0x343)](_0x3f4539=>_0x3f4539&&_0x3f4539[_0x11fd26(0x85e)][_0x11fd26(0xcd4)](_0x5f430f)?Number(RegExp['$2']):0x0);_0x2a2578=_0x2ebbff[_0x11fd26(0xc30)]((_0x5719ec,_0x570d26)=>_0x5719ec+_0x570d26,_0x2a2578),_0x452c24=_0x627717[_0x11fd26(0xc30)]((_0x5e5920,_0x5c0f4c)=>_0x5e5920+_0x5c0f4c,_0x452c24),this['_weaponSprite']['x']=_0x2a2578,this[_0x11fd26(0x1e8)]['y']=_0x452c24,this[_0x11fd26(0x1e8)][_0x11fd26(0x3f1)]();},Sprite_Weapon[_0x5e79d1(0x3a9)][_0x5e79d1(0x45d)]=function(_0x41eca7){const _0x3b1a6=_0x5e79d1;this[_0x3b1a6(0x4b3)]=_0x41eca7,this[_0x3b1a6(0x7c9)]=-0x1,this['_pattern']=0x0,this[_0x3b1a6(0x603)](),this[_0x3b1a6(0x2d1)]();},Sprite_Actor['prototype'][_0x5e79d1(0x549)]=function(){},Sprite_Actor['prototype'][_0x5e79d1(0xb39)]=function(){const _0x58972f=_0x5e79d1,_0x2e9df7=VisuMZ['BattleCore'][_0x58972f(0xc89)][_0x58972f(0x37e)],_0x37f532=_0x2e9df7[_0x58972f(0x337)],_0x447a8a=_0x2e9df7[_0x58972f(0x26e)],_0x50dbd2=_0x2e9df7[_0x58972f(0x50b)];this[_0x58972f(0xaef)](-_0x37f532,-_0x447a8a,_0x50dbd2);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x66a)]=Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x2d1)],Sprite_Actor['prototype'][_0x5e79d1(0x2d1)]=function(){const _0x5b6652=_0x5e79d1;this[_0x5b6652(0x413)]()?this['updateStaticSvBattlerFrames']():(this[_0x5b6652(0xa14)](),VisuMZ[_0x5b6652(0x57e)][_0x5b6652(0x66a)][_0x5b6652(0x695)](this));},Sprite_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0xa14)]=function(){const _0x35eb67=_0x5e79d1;if(this[_0x35eb67(0xab5)]&&this['_battler'][_0x35eb67(0x61c)]){const _0x46690f=this[_0x35eb67(0xab5)][_0x35eb67(0x61c)];this[_0x35eb67(0x6cc)]=Sprite_Actor[_0x35eb67(0xbbc)][_0x46690f[_0x35eb67(0x3d2)]],this[_0x35eb67(0xa5c)]=_0x46690f[_0x35eb67(0x29a)];const _0x39482d=this[_0x35eb67(0x1e8)];_0x39482d[_0x35eb67(0xc71)](_0x46690f['weaponImageId'],_0x46690f[_0x35eb67(0x29a)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon[_0x5e79d1(0x3a9)]['freezeFrame']=function(_0xb9211a,_0x189ba5){const _0x22426d=_0x5e79d1;this[_0x22426d(0x4b3)]=_0xb9211a,this['_animationCount']=-Infinity,this['_pattern']=_0x189ba5,this['loadBitmap'](),this['updateFrame']();},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x70d)]=function(){const _0x4c69c8=_0x5e79d1;Sprite_Battler[_0x4c69c8(0x3a9)][_0x4c69c8(0x70d)]['call'](this),this['_enemy']=null,this[_0x4c69c8(0xc2d)]=![],this[_0x4c69c8(0x2d7)]='',this[_0x4c69c8(0x9e6)]=0x0,this['_effectType']=null,this[_0x4c69c8(0x4f5)]=0x0,this['_shake']=0x0,this[_0x4c69c8(0xb04)](),this['createStateIconSprite']();},VisuMZ['BattleCore']['Sprite_Enemy_update']=Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)],Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x53e10a=_0x5e79d1;VisuMZ[_0x53e10a(0x57e)]['Sprite_Enemy_update'][_0x53e10a(0x695)](this),this[_0x53e10a(0x910)](),this[_0x53e10a(0x288)]();},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb04)]=function(){const _0x37f5ec=_0x5e79d1;this['_mainSprite']=new Sprite(),this[_0x37f5ec(0xb76)][_0x37f5ec(0x64c)]['x']=0.5,this[_0x37f5ec(0xb76)][_0x37f5ec(0x64c)]['y']=0x1,this[_0x37f5ec(0x593)](this[_0x37f5ec(0xb76)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy['prototype'][_0x5e79d1(0xc94)]=function(){const _0x4f29a4=_0x5e79d1;return this[_0x4f29a4(0x6b8)]||this[_0x4f29a4(0xb76)]||this;},Sprite_Enemy['prototype'][_0x5e79d1(0x603)]=function(_0x3ff4ad){const _0x14599b=_0x5e79d1;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x14599b(0x3ef)]()){const _0x1c0404=this['_enemy'][_0x14599b(0x60e)]();this[_0x14599b(0xc11)]=new Bitmap(_0x1c0404[_0x14599b(0xa0f)],_0x1c0404[_0x14599b(0x912)]),this['_mainSprite'][_0x14599b(0xc11)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x14599b(0x9a5)]()){const _0x478d94=ImageManager[_0x14599b(0x60c)](_0x3ff4ad);_0x478d94[_0x14599b(0x1d9)](this[_0x14599b(0x703)][_0x14599b(0x95a)](this,_0x478d94));}else{const _0x4e15da=ImageManager[_0x14599b(0xade)](_0x3ff4ad);_0x4e15da['addLoadListener'](this['onStaticEnemyBitmapLoad'][_0x14599b(0x95a)](this,_0x4e15da));}}},Sprite_Enemy[_0x5e79d1(0x3a9)]['onStaticEnemyBitmapLoad']=function(_0x53494f){const _0x3b2bb3=_0x5e79d1;this[_0x3b2bb3(0xb76)][_0x3b2bb3(0xc11)]=_0x53494f,this[_0x3b2bb3(0xc11)]=new Bitmap(_0x53494f[_0x3b2bb3(0xa0f)],_0x53494f['height']);},VisuMZ['BattleCore'][_0x5e79d1(0xa67)]=Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x3de)],Sprite_Enemy[_0x5e79d1(0x3a9)]['setHue']=function(_0x2ab401){const _0x5b5e31=_0x5e79d1;this[_0x5b5e31(0xb76)]&&this[_0x5b5e31(0xb76)][_0x5b5e31(0x3de)](_0x2ab401);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x461)]=Sprite_Enemy['prototype'][_0x5e79d1(0x7f1)],Sprite_Enemy['prototype'][_0x5e79d1(0x7f1)]=function(){const _0xa17abc=_0x5e79d1;this['allowCollapse']()?VisuMZ['BattleCore'][_0xa17abc(0x461)]['call'](this):(this[_0xa17abc(0xc2d)]=!this[_0xa17abc(0x918)][_0xa17abc(0x317)](),!this[_0xa17abc(0xc2d)]&&(this['opacity']=0x0));},VisuMZ['BattleCore']['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x6d0)],Sprite_Enemy[_0x5e79d1(0x3a9)]['updateCollapse']=function(){const _0x1b36ef=_0x5e79d1;if(this[_0x1b36ef(0x245)]())VisuMZ[_0x1b36ef(0x57e)]['Sprite_Enemy_updateCollapse'][_0x1b36ef(0x695)](this);},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x2d1)]=function(){const _0x2c0f9b=_0x5e79d1;Sprite_Battler[_0x2c0f9b(0x3a9)][_0x2c0f9b(0x2d1)]['call'](this);const _0x2defbe=this[_0x2c0f9b(0xc94)]()||this;if(!_0x2defbe)return;!_0x2defbe[_0x2c0f9b(0xc11)]&&(_0x2defbe['bitmap']=new Bitmap(this['width']||0x1,this[_0x2c0f9b(0x912)]||0x1));if(this[_0x2c0f9b(0x290)]==='bossCollapse')this['_mainSprite']['setFrame'](0x0,0x0,this['_mainSprite']['width']||0x1,this[_0x2c0f9b(0x4f5)]);else{let _0x161506=0x1;if(_0x2defbe&&_0x2defbe[_0x2c0f9b(0xc11)])_0x161506=_0x2defbe[_0x2c0f9b(0xc11)][_0x2c0f9b(0xa0f)];let _0x220ac5=0x1;if(this[_0x2c0f9b(0xc11)])_0x220ac5=this['bitmap'][_0x2c0f9b(0x912)];_0x2defbe['setFrame'](0x0,0x0,_0x161506,_0x220ac5);}},VisuMZ['BattleCore']['Sprite_Enemy_updateBossCollapse']=Sprite_Enemy[_0x5e79d1(0x3a9)]['updateBossCollapse'],Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x4a5)]=function(){const _0x501424=_0x5e79d1;if(this['allowCollapse']())VisuMZ['BattleCore'][_0x501424(0x965)][_0x501424(0x695)](this);},Sprite_Enemy['prototype'][_0x5e79d1(0xce8)]=function(){const _0x1341e3=_0x5e79d1;return Sprite_Battler['prototype']['isMoving'][_0x1341e3(0x695)](this);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2a7)]=Sprite_Enemy['prototype'][_0x5e79d1(0x505)],Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x505)]=function(){const _0x348b0d=_0x5e79d1;VisuMZ[_0x348b0d(0x57e)]['Sprite_Enemy_updateStateSprite']['call'](this),this[_0x348b0d(0xc28)]();},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xc28)]=function(){const _0x468e76=_0x5e79d1,_0x23c6c6=VisuMZ[_0x468e76(0x57e)][_0x468e76(0xc89)][_0x468e76(0xb2e)];if(_0x23c6c6[_0x468e76(0xc2f)]&&!_0x23c6c6[_0x468e76(0x44f)]){this[_0x468e76(0xcbe)][_0x468e76(0x3f9)]=0x0;return;}this['_stateIconSprite']['x']=0x0,this[_0x468e76(0xcbe)]['x']+=this[_0x468e76(0xab5)]['battleUIOffsetX']();let _0x85ed2b=0x1;if(this[_0x468e76(0xc11)])_0x85ed2b=this['bitmap'][_0x468e76(0x912)];this[_0x468e76(0xcbe)]['y']=-_0x85ed2b-this[_0x468e76(0xcbe)][_0x468e76(0x912)]-0x4,this[_0x468e76(0xcbe)]['y']+=this['_battler'][_0x468e76(0x82a)](),this[_0x468e76(0xcbe)][_0x468e76(0x6a2)]['x']=0x1/(this['scale']['x']||0.001),this[_0x468e76(0xcbe)][_0x468e76(0x6a2)]['y']=0x1/(this[_0x468e76(0x6a2)]['y']||0.001),this['hasSvBattler']()&&(this[_0x468e76(0x4a4)][_0x468e76(0x1ea)][_0x468e76(0x6a2)]['x']=-0x1/(this[_0x468e76(0x6a2)]['x']||0.001),this[_0x468e76(0x4a4)]['_stateSprite'][_0x468e76(0x6a2)]['y']=0x1/(this[_0x468e76(0x6a2)]['y']||0.001));},Sprite_Enemy['prototype'][_0x5e79d1(0x288)]=function(){const _0x4654a8=_0x5e79d1;this[_0x4654a8(0xab5)]&&this[_0x4654a8(0xab5)][_0x4654a8(0x288)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xb9e)]=Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x46e)],Sprite_Enemy['prototype'][_0x5e79d1(0x46e)]=function(_0x317687){const _0x3f3b36=_0x5e79d1;VisuMZ[_0x3f3b36(0x57e)]['Sprite_Enemy_setBattler'][_0x3f3b36(0x695)](this,_0x317687),this['setSvBattlerSprite'](_0x317687);},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x514)]=function(_0x105b88){const _0x5b5b7a=_0x5e79d1;!this['_svBattlerSprite']&&(this[_0x5b5b7a(0x4a4)]=new Sprite_SvEnemy(_0x105b88),this[_0x5b5b7a(0x2e1)]()),this[_0x5b5b7a(0x4a4)][_0x5b5b7a(0x46e)](_0x105b88);},Sprite_Enemy[_0x5e79d1(0x3a9)]['hasSvBattler']=function(){const _0x1050b9=_0x5e79d1;return this['_enemy']&&this[_0x1050b9(0x918)]['hasSvBattler']();},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x245)]=function(){const _0x179883=_0x5e79d1;return this[_0x179883(0x3ef)]()?this['_enemy'][_0x179883(0x245)]():!![];},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb5c)]=function(){const _0x54033e=_0x5e79d1;this[_0x54033e(0x3ef)]()&&this[_0x54033e(0x4a4)][_0x54033e(0xb5c)]();},Sprite_Enemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x592)]=function(_0x2dd655){const _0x60bb3b=_0x5e79d1;if(this['hasSvBattler']())this['_svBattlerSprite'][_0x60bb3b(0x592)](_0x2dd655);},Sprite_Enemy['prototype'][_0x5e79d1(0x861)]=function(_0x3b8698){const _0x352243=_0x5e79d1;if(this[_0x352243(0x3ef)]())this[_0x352243(0x4a4)][_0x352243(0x861)](_0x3b8698);},Sprite_Enemy[_0x5e79d1(0x3a9)]['stepForward']=function(){const _0x1e88ff=_0x5e79d1,_0x421083=VisuMZ[_0x1e88ff(0x57e)][_0x1e88ff(0xc89)][_0x1e88ff(0x37e)],_0x9b7481=_0x421083[_0x1e88ff(0x337)],_0xeb4b16=_0x421083[_0x1e88ff(0x26e)],_0x1e10f6=_0x421083[_0x1e88ff(0x50b)];this[_0x1e88ff(0xaef)](_0x9b7481,_0xeb4b16,_0x1e10f6);};function Sprite_SvEnemy(){const _0x1ff222=_0x5e79d1;this[_0x1ff222(0xb75)](...arguments);}function _0xae2e(_0x5145e9,_0xbe18a0){const _0xdf00cf=_0xdf00();return _0xae2e=function(_0xae2e46,_0x2fca01){_0xae2e46=_0xae2e46-0x1c4;let _0x2e0b36=_0xdf00cf[_0xae2e46];return _0x2e0b36;},_0xae2e(_0x5145e9,_0xbe18a0);}Sprite_SvEnemy[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Sprite_Actor[_0x5e79d1(0x3a9)]),Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x54e)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x4c1dc2){const _0x1af796=_0x5e79d1;Sprite_Actor[_0x1af796(0x3a9)][_0x1af796(0xb75)][_0x1af796(0x695)](this,_0x4c1dc2),this[_0x1af796(0x6a2)]['x']=-0x1,this[_0x1af796(0x1ea)][_0x1af796(0x6a2)]['x']=-0x1;},Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xa57)]=function(){},Sprite_SvEnemy['prototype'][_0x5e79d1(0x8ce)]=function(){},Sprite_SvEnemy['prototype'][_0x5e79d1(0x629)]=function(_0x3fbb35){},Sprite_SvEnemy['prototype'][_0x5e79d1(0xc5f)]=function(){},Sprite_SvEnemy['prototype'][_0x5e79d1(0xcdc)]=function(){},Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x505)]=function(){const _0x36513d=_0x5e79d1;this['_stateSprite'][_0x36513d(0xcc4)]=![];},Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x264)]=function(){const _0x18954a=_0x5e79d1;Sprite_Battler[_0x18954a(0x3a9)][_0x18954a(0x264)][_0x18954a(0x695)](this);const _0x32d106=this[_0x18954a(0x380)][_0x18954a(0xbea)]();this[_0x18954a(0x2d7)]!==_0x32d106&&(this[_0x18954a(0x2d7)]=_0x32d106,this[_0x18954a(0xb76)][_0x18954a(0xc11)]=ImageManager[_0x18954a(0x1e2)](_0x32d106)),this[_0x18954a(0xb76)]&&this['_mainSprite'][_0x18954a(0xc11)]&&this[_0x18954a(0xab5)]&&(this[_0x18954a(0xb76)][_0x18954a(0xc11)][_0x18954a(0xce3)]!==this[_0x18954a(0xab5)][_0x18954a(0xb36)]()&&(this[_0x18954a(0xb76)]['bitmap'][_0x18954a(0xce3)]=this[_0x18954a(0xab5)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x656)]=function(){},Sprite_SvEnemy['prototype']['startMove']=function(_0x644443,_0x5d6fd4,_0xe711b0){const _0x4baaac=_0x5e79d1;if(this[_0x4baaac(0xb2f)])this[_0x4baaac(0xb2f)]['startMove'](_0x644443,_0x5d6fd4,_0xe711b0);},Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb5c)]=function(){const _0x1bbf75=_0x5e79d1,_0x55652c=this[_0x1bbf75(0x380)];if(_0x55652c){const _0x516137=_0x55652c[_0x1bbf75(0x1e0)]();if(_0x55652c['isInputting']()||_0x55652c[_0x1bbf75(0x23d)]())this['startMotion'](_0x1bbf75(0x42e));else{if(_0x516137===0x3)this[_0x1bbf75(0x347)](_0x1bbf75(0x5cc));else{if(_0x516137===0x2)this['startMotion'](_0x1bbf75(0x205));else{if(_0x55652c[_0x1bbf75(0x93a)]())this[_0x1bbf75(0x347)]('chant');else{if(_0x55652c[_0x1bbf75(0x432)]()||_0x55652c['isGuardWaiting']())this[_0x1bbf75(0x347)](_0x1bbf75(0x725));else{if(_0x516137===0x1)this[_0x1bbf75(0x347)](_0x1bbf75(0x39b));else{if(_0x55652c['isDying']())this[_0x1bbf75(0x347)]('dying');else _0x55652c[_0x1bbf75(0x5b4)]()?this['startMotion'](_0x1bbf75(0x42e)):this['startMotion'](_0x55652c[_0x1bbf75(0x60e)]()['motionIdle']||_0x1bbf75(0x42e));}}}}}}}},Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x48a)]=function(){const _0x298997=_0x5e79d1;return this['parent']?this[_0x298997(0xb2f)][_0x298997(0x77f)]===0x0&&this['parent'][_0x298997(0xb44)]===0x0:!![];},Sprite_SvEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x941)]=function(){},VisuMZ['BattleCore'][_0x5e79d1(0xbfa)]=Sprite_Animation[_0x5e79d1(0x3a9)][_0x5e79d1(0xba2)],Sprite_Animation[_0x5e79d1(0x3a9)][_0x5e79d1(0xba2)]=function(_0x4460c3){const _0x3cdb29=_0x5e79d1;return _0x4460c3[_0x3cdb29(0x6b8)]?this[_0x3cdb29(0x8c1)](_0x4460c3):VisuMZ[_0x3cdb29(0x57e)][_0x3cdb29(0xbfa)][_0x3cdb29(0x695)](this,_0x4460c3);},Sprite_Animation[_0x5e79d1(0x3a9)][_0x5e79d1(0x8c1)]=function(_0x481fb5){const _0x5ca7ae=_0x5e79d1;let _0x28af71=_0x481fb5['x'],_0x486c5c=_0x481fb5['y'],_0x346750=_0x481fb5[_0x5ca7ae(0x912)],_0x2770b2=_0x481fb5[_0x5ca7ae(0x6b8)][_0x5ca7ae(0x6a2)]['y'];_0x481fb5['x']=_0x481fb5[_0x5ca7ae(0x523)]+_0x481fb5[_0x5ca7ae(0x876)](),_0x481fb5['y']=_0x481fb5['_baseY']+_0x481fb5[_0x5ca7ae(0x79c)](),_0x481fb5['height']*=_0x2770b2;let _0x469f1b=VisuMZ['BattleCore'][_0x5ca7ae(0xbfa)][_0x5ca7ae(0x695)](this,_0x481fb5);return _0x481fb5['x']=_0x28af71,_0x481fb5['y']=_0x486c5c,_0x481fb5['height']=_0x346750,_0x469f1b;},VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV['prototype']['updatePosition'],Sprite_AnimationMV['prototype'][_0x5e79d1(0xa69)]=function(){const _0x107c57=_0x5e79d1;VisuMZ['BattleCore']['Sprite_AnimationMV_updatePosition'][_0x107c57(0x695)](this);if(!SceneManager['isSceneBattle']())return;if(this[_0x107c57(0xc7a)][_0x107c57(0x925)]===0x3)this['x']=Math[_0x107c57(0xa7d)](Graphics[_0x107c57(0x486)]/0x2),this['y']=Math[_0x107c57(0xa7d)](Graphics[_0x107c57(0x6e6)]/0x2);else{if(this['battleStatusSprite'])return;}},Sprite_Damage[_0x5e79d1(0x3a9)][_0x5e79d1(0x352)]=function(_0x303e8a){const _0x3add57=_0x5e79d1,_0x1f3ee4=_0x303e8a[_0x3add57(0x937)]()||_0x303e8a[_0x3add57(0xbe0)]();if(_0x1f3ee4[_0x3add57(0x7d1)]||_0x1f3ee4[_0x3add57(0x65f)])this[_0x3add57(0x922)]=0x0,this['createMiss']();else{if(_0x1f3ee4[_0x3add57(0x7b1)])this[_0x3add57(0x922)]=_0x1f3ee4[_0x3add57(0x90f)]>=0x0?0x0:0x1,this[_0x3add57(0xaa1)](_0x1f3ee4['hpDamage']);else _0x303e8a['isAlive']()&&_0x1f3ee4[_0x3add57(0x9bb)]!==0x0&&(this[_0x3add57(0x922)]=_0x1f3ee4[_0x3add57(0x9bb)]>=0x0?0x2:0x3,this[_0x3add57(0xaa1)](_0x1f3ee4['mpDamage']));}_0x1f3ee4[_0x3add57(0x7d4)]&&this[_0x3add57(0x5bf)]();},Sprite_Damage['prototype'][_0x5e79d1(0x45d)]=function(_0x3d2b73){},Sprite_Damage['prototype'][_0x5e79d1(0xaa1)]=function(_0x5482f6){const _0x10468d=_0x5e79d1;let _0x45195d=this['createString'](_0x5482f6);const _0x5448fc=this[_0x10468d(0x8ba)](),_0x38e66b=Math[_0x10468d(0x48d)](_0x5448fc*0.75);for(let _0x2e1d77=0x0;_0x2e1d77<_0x45195d[_0x10468d(0xc35)];_0x2e1d77++){const _0x2538fb=this[_0x10468d(0x704)](_0x38e66b,_0x5448fc);_0x2538fb[_0x10468d(0xc11)]['drawText'](_0x45195d[_0x2e1d77],0x0,0x0,_0x38e66b,_0x5448fc,_0x10468d(0x2ad)),_0x2538fb['x']=(_0x2e1d77-(_0x45195d[_0x10468d(0xc35)]-0x1)/0x2)*_0x38e66b,_0x2538fb['dy']=-_0x2e1d77;}},Sprite_Damage[_0x5e79d1(0x3a9)][_0x5e79d1(0x92a)]=function(_0x427267){const _0xb85523=_0x5e79d1;let _0x1d8f17=Math['abs'](_0x427267)[_0xb85523(0x69e)]();this[_0xb85523(0xa2d)]()&&(_0x1d8f17=VisuMZ['GroupDigits'](_0x1d8f17));const _0x29c099=VisuMZ[_0xb85523(0x57e)]['Settings'][_0xb85523(0xb4c)];let _0x3933a3='',_0x5ca866='';switch(this[_0xb85523(0x922)]){case 0x0:_0x3933a3=_0x29c099[_0xb85523(0x340)]||_0xb85523(0x5d2),_0x5ca866=TextManager['hp'];if(_0x427267===0x0)_0x3933a3='%1';break;case 0x1:_0x3933a3=_0x29c099[_0xb85523(0x3df)]||'+%1',_0x5ca866=TextManager['hp'];break;case 0x2:_0x3933a3=_0x29c099['mpDamageFmt']||_0xb85523(0x30a),_0x5ca866=TextManager['mp'];break;case 0x3:_0x3933a3=_0x29c099['mpHealingFmt']||'+%1\x20MP',_0x5ca866=TextManager['mp'];break;}return _0x3933a3[_0xb85523(0x2a0)](_0x1d8f17,_0x5ca866)[_0xb85523(0xacc)]();},Sprite_Damage[_0x5e79d1(0x3a9)][_0x5e79d1(0xa2d)]=function(){const _0x1f651d=_0x5e79d1;return Imported['VisuMZ_0_CoreEngine']?VisuMZ[_0x1f651d(0x91d)][_0x1f651d(0xc89)][_0x1f651d(0xa0a)][_0x1f651d(0x9d0)]:![];},Sprite_Damage[_0x5e79d1(0x3a9)][_0x5e79d1(0x5bf)]=function(){const _0x332072=_0x5e79d1,_0xb9a1d8=VisuMZ['BattleCore'][_0x332072(0xc89)]['Damage'];_0xb9a1d8[_0x332072(0x9ec)]=_0xb9a1d8[_0x332072(0x9ec)]||[0x0,0x0,0x0,0x0],this['_flashColor']=_0xb9a1d8[_0x332072(0x9ec)]['slice'](0x0),this[_0x332072(0x208)]=_0xb9a1d8[_0x332072(0x1d0)]||0x1;},Sprite_Damage['prototype'][_0x5e79d1(0x453)]=function(_0x22a75c,_0x161ec2){const _0x7ead93=_0x5e79d1;this['_flashColor']=_0x161ec2[_0x7ead93(0x393)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x7ead93(0xbec)](this[_0x7ead93(0x6d5)]),this[_0x7ead93(0x208)]=_0x161ec2[_0x7ead93(0xa53)]||0x0;const _0x4ce0ff=this['fontSize'](),_0x2838c7=Math[_0x7ead93(0x48d)](_0x4ce0ff*0x1e),_0x268221=this[_0x7ead93(0x704)](_0x2838c7,_0x4ce0ff);_0x268221[_0x7ead93(0xc11)]['textColor']=ColorManager[_0x7ead93(0x636)](_0x161ec2[_0x7ead93(0x909)]),_0x268221[_0x7ead93(0xc11)][_0x7ead93(0x5e1)](_0x22a75c,0x0,0x0,_0x2838c7,_0x4ce0ff,_0x7ead93(0x2ad)),_0x268221['dy']=0x0;},Sprite_Damage[_0x5e79d1(0x3a9)][_0x5e79d1(0xa1d)]=function(_0xfb67c,_0x5164ec,_0x13b95c){const _0x4aaea9=_0x5e79d1,_0x2c106f=Math['max'](this[_0x4aaea9(0x8ba)](),ImageManager[_0x4aaea9(0x835)]),_0x1e4da8=Math[_0x4aaea9(0x48d)](_0x2c106f*0x1e),_0x2a5b6c=this['createChildSprite'](_0x1e4da8,_0x2c106f),_0x2a0e16=ImageManager['iconWidth']/0x2,_0x31369b=_0x2a5b6c[_0x4aaea9(0xc11)][_0x4aaea9(0x88a)](_0x5164ec+'\x20');_0x2a5b6c['bitmap'][_0x4aaea9(0x909)]=ColorManager[_0x4aaea9(0x636)](_0x13b95c[_0x4aaea9(0x909)]),_0x2a5b6c[_0x4aaea9(0xc11)]['drawText'](_0x5164ec,_0x2a0e16,0x0,_0x1e4da8-_0x2a0e16,_0x2c106f,_0x4aaea9(0x2ad));const _0x1a6222=Math['round']((_0x2c106f-ImageManager[_0x4aaea9(0x835)])/0x2),_0x124afa=_0x1e4da8/0x2-ImageManager[_0x4aaea9(0x504)]-_0x31369b/0x2+_0x2a0e16/0x2,_0xd443c0=ImageManager['loadSystem'](_0x4aaea9(0x294)),_0x4d0e8d=ImageManager['iconWidth'],_0x50956c=ImageManager[_0x4aaea9(0x835)],_0x2a75fd=_0xfb67c%0x10*_0x4d0e8d,_0xd23e46=Math[_0x4aaea9(0x48d)](_0xfb67c/0x10)*_0x50956c;_0x2a5b6c['bitmap'][_0x4aaea9(0x67e)](_0xd443c0,_0x2a75fd,_0xd23e46,_0x4d0e8d,_0x50956c,_0x124afa,_0x1a6222),this[_0x4aaea9(0x6d5)]=_0x13b95c[_0x4aaea9(0x393)]||[0x0,0x0,0x0,0x0],this[_0x4aaea9(0x6d5)]=JsonEx[_0x4aaea9(0xbec)](this[_0x4aaea9(0x6d5)]),this[_0x4aaea9(0x208)]=_0x13b95c[_0x4aaea9(0xa53)]||0x0,_0x2a5b6c['dy']=0x0,_0x13b95c[_0x4aaea9(0xa98)]&&(_0x2a5b6c['x']+=_0x13b95c[_0x4aaea9(0xa98)]),_0x13b95c[_0x4aaea9(0x675)]&&(_0x2a5b6c['dy']+=_0x13b95c[_0x4aaea9(0x675)]);},VisuMZ[_0x5e79d1(0x57e)]['Sprite_Damage_createChildSprite']=Sprite_Damage[_0x5e79d1(0x3a9)][_0x5e79d1(0x704)],Sprite_Damage['prototype'][_0x5e79d1(0x704)]=function(_0x14a489,_0x8c5225){const _0x1da758=_0x5e79d1;return _0x8c5225=Math[_0x1da758(0xa7d)](_0x8c5225*1.2),VisuMZ[_0x1da758(0x57e)][_0x1da758(0x709)]['call'](this,_0x14a489,_0x8c5225);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2d6)]=Sprite_StateIcon[_0x5e79d1(0x3a9)][_0x5e79d1(0x2d1)],Sprite_StateIcon['prototype'][_0x5e79d1(0x2d1)]=function(){const _0x2a0ed3=_0x5e79d1;VisuMZ[_0x2a0ed3(0x57e)]['Sprite_StateIcon_updateFrame'][_0x2a0ed3(0x695)](this),this[_0x2a0ed3(0x3f9)]=this[_0x2a0ed3(0x94c)]>0x0?0xff:0x0;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x4c1)]=Sprite_Weapon[_0x5e79d1(0x3a9)]['loadBitmap'],Sprite_Weapon['prototype']['loadBitmap']=function(){const _0x3a48f5=_0x5e79d1;VisuMZ[_0x3a48f5(0x57e)][_0x3a48f5(0x4c1)][_0x3a48f5(0x695)](this),this['bitmap']&&(this['bitmap'][_0x3a48f5(0xce3)]=VisuMZ[_0x3a48f5(0x57e)][_0x3a48f5(0xc89)]['Actor']['SmoothImage']);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x893)]=Sprite_Gauge['prototype']['smoothness'],Sprite_Gauge[_0x5e79d1(0x3a9)][_0x5e79d1(0x665)]=function(){const _0x5a7b64=_0x5e79d1;return this['_statusType']!==_0x5a7b64(0xc0a)?VisuMZ['BattleCore'][_0x5a7b64(0xc89)]['HpGauge'][_0x5a7b64(0x794)]??0x14:VisuMZ[_0x5a7b64(0x57e)]['Sprite_Gauge_smoothness'][_0x5a7b64(0x695)](this);};function Sprite_GaugeRate(){const _0x2b0e22=_0x5e79d1;this[_0x2b0e22(0xb75)](...arguments);}Sprite_GaugeRate[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Sprite_Gauge[_0x5e79d1(0x3a9)]),Sprite_GaugeRate[_0x5e79d1(0x3a9)][_0x5e79d1(0x54e)]=Sprite_GaugeRate,Sprite_GaugeRate[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(){const _0x1db1ee=_0x5e79d1;Sprite_Gauge[_0x1db1ee(0x3a9)][_0x1db1ee(0xb75)][_0x1db1ee(0x695)](this),this['_updateTargetValue']=![];},Sprite_GaugeRate[_0x5e79d1(0x3a9)]['updateTargetValue']=function(_0x140280,_0x1f627f){const _0x16c26d=_0x5e79d1;this[_0x16c26d(0x1ed)]=!![],Sprite_Gauge[_0x16c26d(0x3a9)][_0x16c26d(0xcbf)]['call'](this,_0x140280,_0x1f627f),this[_0x16c26d(0x1ed)]=![];},Sprite_GaugeRate['prototype'][_0x5e79d1(0x88b)]=function(){const _0x105fe1=_0x5e79d1;if(this[_0x105fe1(0x1ed)]){const _0x43550c=Sprite_Gauge[_0x105fe1(0x3a9)][_0x105fe1(0x88b)][_0x105fe1(0x695)](this),_0x17dc0f=this['currentMaxValue']();if(_0x17dc0f<=0x0)return _0x105fe1(0x24d);return Math[_0x105fe1(0x48d)](_0x43550c/_0x17dc0f*0x64)+'%';}else return Sprite_Gauge[_0x105fe1(0x3a9)][_0x105fe1(0x88b)][_0x105fe1(0x695)](this);},Sprite_GaugeRate[_0x5e79d1(0x3a9)]['currentDisplayedValue']=function(){const _0xc75af=_0x5e79d1,_0x1c792c=Sprite_Gauge[_0xc75af(0x3a9)][_0xc75af(0x88b)][_0xc75af(0x695)](this),_0x3e8141=this[_0xc75af(0xac6)]();if(_0x3e8141<=0x0)return'100%';return Math[_0xc75af(0x48d)](_0x1c792c/_0x3e8141*0x64)+'%';},Sprite_GaugeRate[_0x5e79d1(0x3a9)]['gaugeRate']=function(){const _0xa04b2=_0x5e79d1;if(this['currentMaxValue']()<=0x0)return 0x1;return Sprite_Gauge[_0xa04b2(0x3a9)][_0xa04b2(0x228)][_0xa04b2(0x695)](this);},Sprite_GaugeRate[_0x5e79d1(0x3a9)][_0x5e79d1(0x9ae)]=function(){const _0x31f7c5=_0x5e79d1;if(this[_0x31f7c5(0xac6)]()<=0x0)return ColorManager['normalColor']();return Sprite_Gauge['prototype'][_0x31f7c5(0x9ae)][_0x31f7c5(0x695)](this);},Sprite_GaugeRate[_0x5e79d1(0x3a9)][_0x5e79d1(0x7a2)]=function(){const _0x5b20e4=_0x5e79d1;this[_0x5b20e4(0xcd9)]==='mp'&&this[_0x5b20e4(0xac6)]()<=0x0&&($gameTemp[_0x5b20e4(0x390)]=!![]),Sprite_Gauge['prototype'][_0x5b20e4(0x7a2)][_0x5b20e4(0x695)](this),$gameTemp[_0x5b20e4(0x390)]=undefined;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xce2)]=ColorManager[_0x5e79d1(0x596)],ColorManager[_0x5e79d1(0x596)]=function(_0x244bb9){const _0x2793f7=_0x5e79d1;if($gameTemp[_0x2793f7(0x390)])return ColorManager[_0x2793f7(0x5c9)]();return VisuMZ[_0x2793f7(0x57e)][_0x2793f7(0xce2)][_0x2793f7(0x695)](this,_0x244bb9);};function Sprite_HpGauge(){const _0x56de0e=_0x5e79d1;this[_0x56de0e(0xb75)](...arguments);}Sprite_HpGauge[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Sprite_Gauge[_0x5e79d1(0x3a9)]),Sprite_HpGauge[_0x5e79d1(0x3a9)]['constructor']=Sprite_HpGauge,Sprite_HpGauge[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(){const _0x10f6bb=_0x5e79d1;Sprite_Gauge[_0x10f6bb(0x3a9)][_0x10f6bb(0xb75)][_0x10f6bb(0x695)](this);},Sprite_HpGauge[_0x5e79d1(0x3a9)][_0x5e79d1(0x740)]=function(){return 0x0;},Sprite_HpGauge[_0x5e79d1(0x3a9)][_0x5e79d1(0x7a2)]=function(){const _0x38ad0e=_0x5e79d1;this[_0x38ad0e(0xc11)][_0x38ad0e(0x438)]();const _0x2696eb=this[_0x38ad0e(0x88b)]();!isNaN(_0x2696eb)&&this[_0x38ad0e(0x744)]();};function Sprite_EnemyName(){const _0x4dd667=_0x5e79d1;this[_0x4dd667(0xb75)](...arguments);}Sprite_EnemyName[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Sprite_Name[_0x5e79d1(0x3a9)]),Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x54e)]=Sprite_EnemyName,Sprite_EnemyName['prototype']['initialize']=function(){const _0x42d1f0=_0x5e79d1;Sprite_Name['prototype']['initialize']['call'](this),this[_0x42d1f0(0x2ce)]();},Sprite_EnemyName['prototype'][_0x5e79d1(0x70d)]=function(){const _0x17dbe6=_0x5e79d1;Sprite_Name['prototype']['initMembers']['call'](this),this[_0x17dbe6(0x3f9)]=0x0,this[_0x17dbe6(0x260)]=null,this[_0x17dbe6(0x64c)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x2ce)]=function(){const _0x2abbd7=_0x5e79d1;VisuMZ['BattleCore']['Settings']['Enemy'][_0x2abbd7(0xc2f)]&&(this[_0x2abbd7(0xcbe)]=new Sprite_StateIcon(),this['addChild'](this['_stateIconSprite']));},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x7e8)]=function(){return Graphics['boxWidth'];},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x391)]=function(){const _0x2bf48d=_0x5e79d1;return this[_0x2bf48d(0x9b3)]=this[_0x2bf48d(0x9b3)]||Window_Base[_0x2bf48d(0x3a9)][_0x2bf48d(0x649)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x5e79d1(0x3a9)]['fontSize']=function(){const _0x4cee40=_0x5e79d1;return VisuMZ[_0x4cee40(0x57e)]['Settings'][_0x4cee40(0xb2e)][_0x4cee40(0xccd)]||$gameSystem[_0x4cee40(0x618)]();},Sprite_EnemyName['prototype'][_0x5e79d1(0x6ce)]=function(_0x27ec22){const _0x5476e3=_0x5e79d1;this[_0x5476e3(0x260)]=_0x27ec22;},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x4370e3=_0x5e79d1;Sprite_Name['prototype']['update'][_0x4370e3(0x695)](this),this[_0x4370e3(0x28a)](),this[_0x4370e3(0xa69)](),this[_0x4370e3(0x797)](),this['updateOpacity']();},Sprite_EnemyName[_0x5e79d1(0x3a9)]['redraw']=function(){const _0x280abe=_0x5e79d1;this[_0x280abe(0x91e)]=undefined;const _0x1c39a5=this[_0x280abe(0x66e)](),_0x5af91a=this['bitmapWidth'](),_0x274205=Window_Base[_0x280abe(0x3a9)][_0x280abe(0x649)]();this[_0x280abe(0x25d)](),this['bitmap']['clear'](),this[_0x280abe(0xc11)][_0x280abe(0x5e1)](_0x1c39a5,0x0,0x0,_0x5af91a,_0x274205,_0x280abe(0x2ad));},Sprite_EnemyName['prototype'][_0x5e79d1(0x28a)]=function(){const _0x523a03=_0x5e79d1;if(!this[_0x523a03(0x260)])return;this[_0x523a03(0xab5)]!==this['_linkedSprite']['_battler']&&this[_0x523a03(0x45d)](this[_0x523a03(0x260)][_0x523a03(0xab5)]);},Sprite_EnemyName['prototype'][_0x5e79d1(0xa69)]=function(){const _0x49330b=_0x5e79d1;if(!this['_linkedSprite'])return;this[_0x49330b(0x9b3)]=this['_lineHeight']||Window_Base[_0x49330b(0x3a9)]['lineHeight'](),this['x']=Math['round'](this[_0x49330b(0x260)][_0x49330b(0x523)]),this['y']=Math[_0x49330b(0xa7d)](this[_0x49330b(0x260)]['_baseY']-this[_0x49330b(0x9b3)]*0.5);const _0x3c40f4=VisuMZ[_0x49330b(0x57e)][_0x49330b(0xc89)][_0x49330b(0xb2e)];this['x']+=Math[_0x49330b(0xa7d)](_0x3c40f4[_0x49330b(0x408)]||0x0),this['y']+=Math[_0x49330b(0xa7d)](_0x3c40f4[_0x49330b(0x920)]||0x0);},Sprite_EnemyName['prototype'][_0x5e79d1(0x797)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0xb00)]=function(){const _0x3ee491=_0x5e79d1;if(!this[_0x3ee491(0xcbe)])return;this['_battler']!==this[_0x3ee491(0xcbe)][_0x3ee491(0xab5)]&&this[_0x3ee491(0xcbe)][_0x3ee491(0x45d)](this[_0x3ee491(0xab5)]);const _0x4391c6=this['textWidth']();this[_0x3ee491(0x9b3)]=this[_0x3ee491(0x9b3)]||Window_Base[_0x3ee491(0x3a9)]['lineHeight'](),this[_0x3ee491(0xcbe)]['x']=Math[_0x3ee491(0xa7d)]((_0x4391c6+ImageManager['iconWidth'])/0x2)+0x8,this['_stateIconSprite']['y']=this['_lineHeight']/0x2;const _0x78bcfc=VisuMZ['BattleCore']['Settings']['Enemy'];this[_0x3ee491(0xcbe)]['x']+=_0x78bcfc['AttachStateOffsetX']||0x0,this[_0x3ee491(0xcbe)]['y']+=_0x78bcfc[_0x3ee491(0x5f8)]||0x0;},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x2aa)]=function(){const _0x36b680=_0x5e79d1,_0x311dc2=this['visibilityState']();if(_0x311dc2&&this['opacity']<0xff)this['opacity']+=0x10;else!_0x311dc2&&this['opacity']>0x0&&(this[_0x36b680(0x3f9)]-=0x10);},Sprite_EnemyName['prototype'][_0x5e79d1(0x881)]=function(){const _0x3ed57f=_0x5e79d1;if(this[_0x3ed57f(0x59d)]())return![];else{if(!this[_0x3ed57f(0xab5)])return![];else{if(!this[_0x3ed57f(0xab5)][_0x3ed57f(0x4ba)]())return![];else{if(this[_0x3ed57f(0xa8a)]())return!![];else{if(this['_battler'][_0x3ed57f(0x5d8)]())return![];else{if(this['isBattlerTargeted']())return!![];else{if(this[_0x3ed57f(0x1fc)]())return!![];else{if(this[_0x3ed57f(0x489)]())return!![];else{if(this[_0x3ed57f(0x6c0)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x5e79d1(0x3a9)]['temporaryVisibile']=function(){const _0x4e2717=_0x5e79d1;return this[_0x4e2717(0xab5)]&&this['_battler'][_0x4e2717(0xce9)]();},Sprite_EnemyName['prototype']['isAlwaysHidden']=function(){const _0x2576f5=_0x5e79d1;return VisuMZ[_0x2576f5(0x57e)][_0x2576f5(0xc89)]['Enemy'][_0x2576f5(0xa3d)];},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0xba9)]=function(){const _0x230206=_0x5e79d1;if(!VisuMZ[_0x230206(0x57e)][_0x230206(0xc89)][_0x230206(0xb2e)][_0x230206(0x688)])return![];if(BattleManager['isInputting']()&&!BattleManager[_0x230206(0x216)]())return![];return this['_battler']&&BattleManager[_0x230206(0x5c2)]&&BattleManager[_0x230206(0x4a6)]['includes'](this['_battler']);},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x1fc)]=function(){return![];},Sprite_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x489)]=function(){const _0x4fab55=_0x5e79d1;return VisuMZ[_0x4fab55(0x57e)][_0x4fab55(0xc89)][_0x4fab55(0xb2e)][_0x4fab55(0x9e2)];},Sprite_EnemyName['prototype']['isIncludedInEnemyWindow']=function(){const _0x400b8c=_0x5e79d1;return VisuMZ['BattleCore'][_0x400b8c(0xc89)][_0x400b8c(0xb2e)]['NameAlwaysSelectOnly']?this[_0x400b8c(0xab5)][_0x400b8c(0xc42)]():SceneManager[_0x400b8c(0xc59)]['_enemyWindow']&&SceneManager['_scene'][_0x400b8c(0x315)][_0x400b8c(0x5dc)]&&SceneManager[_0x400b8c(0xc59)][_0x400b8c(0x315)][_0x400b8c(0x275)][_0x400b8c(0x9fb)](this[_0x400b8c(0xab5)]);},Sprite_EnemyName['prototype'][_0x5e79d1(0x724)]=function(){const _0x4c6851=_0x5e79d1;if(!this[_0x4c6851(0xab5)])return 0x0;if(this[_0x4c6851(0x91e)])return this[_0x4c6851(0x91e)];const _0x182557=this[_0x4c6851(0x66e)]();return this['setupFont'](),this[_0x4c6851(0x91e)]=this[_0x4c6851(0xc11)][_0x4c6851(0x88a)](_0x182557)||0x1,this[_0x4c6851(0x91e)];},VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition']=Sprite_Battleback['prototype'][_0x5e79d1(0x1e9)],Sprite_Battleback[_0x5e79d1(0x3a9)][_0x5e79d1(0x1e9)]=function(){const _0x18b370=_0x5e79d1,_0x5cdb5e=VisuMZ['BattleCore'][_0x18b370(0xc89)]['BattlebackScale'];if(!_0x5cdb5e)return VisuMZ[_0x18b370(0x57e)]['Sprite_Battleback_adjustPosition']['call'](this);const _0x4957d8=String(_0x5cdb5e[_0x18b370(0xb25)])||'MZ';switch(_0x4957d8){case'MZ':VisuMZ[_0x18b370(0x57e)]['Sprite_Battleback_adjustPosition'][_0x18b370(0x695)](this);break;case'1:1':this[_0x18b370(0x69c)]();break;case'ScaleToFit':this[_0x18b370(0x7e7)]();break;case _0x18b370(0x55d):this[_0x18b370(0xccc)]();break;case _0x18b370(0xb66):this[_0x18b370(0xc10)]();break;}},Sprite_Battleback[_0x5e79d1(0x3a9)][_0x5e79d1(0x69c)]=function(){const _0x46293f=_0x5e79d1,_0x30ab88=VisuMZ[_0x46293f(0x57e)]['Settings'][_0x46293f(0xcbc)];if(_0x30ab88&&_0x30ab88['jsOneForOne'])return _0x30ab88[_0x46293f(0xceb)][_0x46293f(0x695)](this);this[_0x46293f(0xa0f)]=Graphics['width'],this[_0x46293f(0x912)]=Graphics[_0x46293f(0x912)];const _0x4f95ae=0x1;this['scale']['x']=_0x4f95ae,this[_0x46293f(0x6a2)]['y']=_0x4f95ae,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x5e79d1(0x3a9)][_0x5e79d1(0x7e7)]=function(){const _0x382358=_0x5e79d1,_0x1b3bef=VisuMZ[_0x382358(0x57e)]['Settings'][_0x382358(0xcbc)];if(_0x1b3bef&&_0x1b3bef[_0x382358(0x3fe)])return _0x1b3bef['jsScaleToFit'][_0x382358(0x695)](this);this['width']=Graphics[_0x382358(0xa0f)],this['height']=Graphics[_0x382358(0x912)];const _0x1f320b=this[_0x382358(0xa0f)]/this[_0x382358(0xc11)][_0x382358(0xa0f)],_0x21a2d0=this[_0x382358(0x912)]/this['bitmap'][_0x382358(0x912)],_0x1d803a=Math[_0x382358(0x9db)](_0x1f320b,_0x21a2d0);this['scale']['x']=_0x1d803a,this[_0x382358(0x6a2)]['y']=_0x1d803a,this['x']=(Graphics[_0x382358(0xa0f)]-this[_0x382358(0xa0f)])/0x2,this['y']=Graphics['height']-this[_0x382358(0x912)];},Sprite_Battleback[_0x5e79d1(0x3a9)]['adjustPosition_ScaleDown']=function(){const _0x506cc5=_0x5e79d1,_0x126f6d=VisuMZ['BattleCore'][_0x506cc5(0xc89)][_0x506cc5(0xcbc)];if(_0x126f6d&&_0x126f6d[_0x506cc5(0xab7)])return _0x126f6d['jsScaleDown'][_0x506cc5(0x695)](this);this['width']=Graphics[_0x506cc5(0xa0f)],this[_0x506cc5(0x912)]=Graphics[_0x506cc5(0x912)];const _0x564104=Math[_0x506cc5(0x52b)](0x1,this['width']/this['bitmap']['width']),_0x27a7e6=Math[_0x506cc5(0x52b)](0x1,this['height']/this['bitmap'][_0x506cc5(0x912)]),_0x23765d=Math[_0x506cc5(0x9db)](_0x564104,_0x27a7e6);this[_0x506cc5(0x6a2)]['x']=_0x23765d,this['scale']['y']=_0x23765d,this['x']=(Graphics[_0x506cc5(0xa0f)]-this[_0x506cc5(0xa0f)])/0x2,this['y']=Graphics[_0x506cc5(0x912)]-this[_0x506cc5(0x912)];},Sprite_Battleback[_0x5e79d1(0x3a9)][_0x5e79d1(0xc10)]=function(){const _0x26b0cc=_0x5e79d1,_0x37e5d9=VisuMZ[_0x26b0cc(0x57e)][_0x26b0cc(0xc89)]['BattlebackScale'];if(_0x37e5d9&&_0x37e5d9['jsScaleUp'])return _0x37e5d9[_0x26b0cc(0x63c)][_0x26b0cc(0x695)](this);this['width']=Graphics[_0x26b0cc(0xa0f)],this['height']=Graphics[_0x26b0cc(0x912)];const _0x4013a8=Math[_0x26b0cc(0x9db)](0x1,this[_0x26b0cc(0xa0f)]/this[_0x26b0cc(0xc11)][_0x26b0cc(0xa0f)]),_0x33a865=Math['max'](0x1,this[_0x26b0cc(0x912)]/this[_0x26b0cc(0xc11)][_0x26b0cc(0x912)]),_0x4fcea8=Math[_0x26b0cc(0x9db)](_0x4013a8,_0x33a865);this['scale']['x']=_0x4fcea8,this[_0x26b0cc(0x6a2)]['y']=_0x4fcea8,this['x']=(Graphics['width']-this[_0x26b0cc(0xa0f)])/0x2,this['y']=Graphics[_0x26b0cc(0x912)]-this[_0x26b0cc(0x912)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x39d)][_0x5e79d1(0x226)]??!![],Spriteset_Battle['prototype'][_0x5e79d1(0x4a8)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x890)]=function(){return 0x0;},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc31)]=function(){return 0x0;},VisuMZ['BattleCore']['Spriteset_Battle_createLowerLayer']=Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xabb)],Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xabb)]=function(){const _0xe3664=_0x5e79d1;VisuMZ['BattleCore'][_0xe3664(0x8fa)][_0xe3664(0x695)](this),this[_0xe3664(0x614)](),this['createEnemyNames']();},VisuMZ['BattleCore'][_0x5e79d1(0x9c0)]=Spriteset_Battle['prototype'][_0x5e79d1(0x3f1)],Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x5d1ad1=_0x5e79d1;VisuMZ[_0x5d1ad1(0x57e)][_0x5d1ad1(0x9c0)]['call'](this),this[_0x5d1ad1(0x7d6)](),this[_0x5d1ad1(0xc17)](),this[_0x5d1ad1(0xaf0)](),this['updateBattleBalloons']();},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x614)]=function(){const _0x79f60b=_0x5e79d1;this[_0x79f60b(0xc54)]=new Weather(),this['_battleField'][_0x79f60b(0x593)](this[_0x79f60b(0xc54)]);},Spriteset_Battle['prototype'][_0x5e79d1(0xaf0)]=function(){const _0xe31300=_0x5e79d1;this[_0xe31300(0xc54)][_0xe31300(0x31c)]=$gameScreen[_0xe31300(0x298)](),this['_weather'][_0xe31300(0xbdd)]=$gameScreen[_0xe31300(0x75d)]();},Game_Interpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x6f3)]=function(_0x1ec78a){const _0x32de62=_0x5e79d1;$gameScreen[_0x32de62(0x9e1)](_0x1ec78a[0x0],_0x1ec78a[0x1],_0x1ec78a[0x2]);if(_0x1ec78a[0x3])this[_0x32de62(0xb68)](_0x1ec78a[0x2]);return!![];},VisuMZ['BattleCore'][_0x5e79d1(0x7cf)]=Game_Interpreter[_0x5e79d1(0x3a9)][_0x5e79d1(0x6e2)],Game_Interpreter['prototype']['command283']=function(_0x10afa5){const _0x30cc7b=_0x5e79d1;return SceneManager[_0x30cc7b(0x6a6)]()?(SceneManager[_0x30cc7b(0xc59)][_0x30cc7b(0x29c)][_0x30cc7b(0x3c8)](_0x10afa5[0x0],_0x10afa5[0x1]),!![]):VisuMZ[_0x30cc7b(0x57e)][_0x30cc7b(0x7cf)][_0x30cc7b(0x695)](this,_0x10afa5);},Spriteset_Battle['prototype'][_0x5e79d1(0x7cd)]=function(_0x519026,_0x1f7566){_0x519026['bitmap']=_0x1f7566;},Spriteset_Battle['prototype'][_0x5e79d1(0x3c8)]=function(_0x20e0ae,_0x572a84){const _0x3fd52f=_0x5e79d1;_0x20e0ae=_0x20e0ae||'',_0x572a84=_0x572a84||'';_0x20e0ae===''&&_0x572a84===''&&(_0x20e0ae=this[_0x3fd52f(0x1e4)][_0x3fd52f(0x233)](),_0x572a84=this[_0x3fd52f(0x524)][_0x3fd52f(0x944)]());const _0x1d7acc=ImageManager['loadBattleback1'](_0x20e0ae),_0x18347c=ImageManager[_0x3fd52f(0xab0)](_0x572a84);_0x1d7acc[_0x3fd52f(0x1d9)](this['updateBattlebackBitmap1'][_0x3fd52f(0x95a)](this,this['_back1Sprite'],this['_back2Sprite'],_0x1d7acc,_0x18347c));},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x7b3)]=function(_0x4ef8b6,_0x3e8f58,_0x10301d,_0x30db39){const _0x2497ff=_0x5e79d1;_0x30db39[_0x2497ff(0x1d9)](this['updateBattlebackBitmap2']['bind'](this,_0x4ef8b6,_0x3e8f58,_0x10301d,_0x30db39));},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x578)]=function(_0x5d25f8,_0xc6a0e5,_0x210701,_0x58964f){const _0x437142=_0x5e79d1;_0x5d25f8['bitmap']=_0x210701,_0xc6a0e5['bitmap']=_0x58964f,_0x5d25f8[_0x437142(0x1e9)](),_0xc6a0e5[_0x437142(0x1e9)]();},VisuMZ[_0x5e79d1(0x57e)]['Spriteset_Battle_createBattleField']=Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb6d)],Spriteset_Battle[_0x5e79d1(0x3a9)]['createBattleField']=function(){const _0x17b902=_0x5e79d1;VisuMZ[_0x17b902(0x57e)][_0x17b902(0xb32)][_0x17b902(0x695)](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xcbd)]=function(){const _0xa343a=_0x5e79d1;this[_0xa343a(0x8df)](),this['createUIContainer'](),this[_0xa343a(0x983)](),this['createDamageContainer'](),this[_0xa343a(0x211)]();},Spriteset_Battle['prototype'][_0x5e79d1(0x8df)]=function(){const _0x4c2aed=_0x5e79d1;this['_battlerContainer']=new Sprite(),this[_0x4c2aed(0x252)][_0x4c2aed(0x593)](this[_0x4c2aed(0x45a)]);},Spriteset_Battle['prototype'][_0x5e79d1(0x983)]=function(){const _0x5e9707=_0x5e79d1;this[_0x5e9707(0x9dc)]=new Sprite(),Spriteset_Battle[_0x5e9707(0x3c1)]?this[_0x5e9707(0x593)](this[_0x5e9707(0x9dc)]):this['_battleField'][_0x5e9707(0x593)](this[_0x5e9707(0x9dc)]);},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x95f)]=function(){const _0x3ad2bd=_0x5e79d1;this[_0x3ad2bd(0x468)]=new Sprite(),this[_0x3ad2bd(0x468)]['x']=this['_battleField']['x'],this[_0x3ad2bd(0x468)]['y']=this[_0x3ad2bd(0x252)]['y'],this[_0x3ad2bd(0x593)](this[_0x3ad2bd(0x468)]);},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x211)]=function(){const _0x2dc352=_0x5e79d1;if(!this[_0x2dc352(0x4a8)]())return;this[_0x2dc352(0x45a)]['scale']['x']=-0x1,this[_0x2dc352(0x45a)]['x']=this[_0x2dc352(0x252)][_0x2dc352(0xa0f)],this[_0x2dc352(0x9ba)][_0x2dc352(0x6a2)]['x']=-0x1,this[_0x2dc352(0x9ba)]['x']=this['_battleField'][_0x2dc352(0xa0f)],this[_0x2dc352(0x9dc)][_0x2dc352(0x6a2)]['x']=-0x1,this[_0x2dc352(0x9dc)]['x']=this['_battleField'][_0x2dc352(0xa0f)],this['_damageContainer'][_0x2dc352(0x6a2)]['x']=-0x1,this[_0x2dc352(0x468)]['x']=this[_0x2dc352(0x252)]['x']+this[_0x2dc352(0x252)][_0x2dc352(0xa0f)];},Spriteset_Battle[_0x5e79d1(0x3a9)]['createEnemies']=function(){const _0x42faf2=_0x5e79d1;Imported[_0x42faf2(0xaac)]&&this['coreEngineRepositionEnemies']()&&this[_0x42faf2(0x9e4)]();const _0x726a53=$gameTroop[_0x42faf2(0x6fd)](),_0x20841a=[];for(const _0x53f43c of _0x726a53){_0x20841a[_0x42faf2(0x68a)](new Sprite_Enemy(_0x53f43c));}_0x20841a[_0x42faf2(0xaaf)](this[_0x42faf2(0x44e)][_0x42faf2(0x95a)](this));for(const _0x475891 of _0x20841a){this['_battlerContainer'][_0x42faf2(0x593)](_0x475891);}this['_enemySprites']=_0x20841a;},Spriteset_Battle['prototype'][_0x5e79d1(0x7d2)]=function(){const _0x435f0b=_0x5e79d1;this[_0x435f0b(0xc99)]=[];for(let _0x36a4b3=0x0;_0x36a4b3<$gameParty[_0x435f0b(0x563)]();_0x36a4b3++){const _0x27dfe9=$gameParty[_0x435f0b(0xb9d)]()[_0x36a4b3],_0x40033f=new Sprite_Actor();_0x40033f[_0x435f0b(0x542)](_0x27dfe9),_0x40033f[_0x435f0b(0x46e)](_0x27dfe9),_0x40033f['update'](),this['_actorSprites']['push'](_0x40033f),this[_0x435f0b(0x45a)][_0x435f0b(0x593)](_0x40033f);}},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x515)]=function(_0x1f0d59,_0x25bf99,_0x5a53ba,_0x11c58c){const _0x4d2c48=_0x5e79d1,_0x1855f4=this['isMVAnimation'](_0x25bf99),_0x280ec8=new(_0x1855f4?Sprite_AnimationMV:Sprite_Animation)(),_0xaf2efd=this['makeTargetSprites'](_0x1f0d59);this[_0x4d2c48(0x4de)](_0x1f0d59[0x0])&&(_0x5a53ba=!_0x5a53ba),_0x280ec8[_0x4d2c48(0x897)]=_0x1f0d59,_0x280ec8[_0x4d2c48(0x45d)](_0xaf2efd,_0x25bf99,_0x5a53ba,_0x11c58c),this[_0x4d2c48(0x848)](_0x280ec8);},Spriteset_Battle[_0x5e79d1(0x3a9)]['addAnimationSpriteToContainer']=function(_0x1ad92c){const _0x2cdd84=_0x5e79d1;this[_0x2cdd84(0x6bd)](_0x1ad92c)?(this[_0x2cdd84(0x579)]()[_0x2cdd84(0x593)](_0x1ad92c),_0x1ad92c[_0x2cdd84(0x9fa)]=!![]):(this[_0x2cdd84(0x9dc)][_0x2cdd84(0x593)](_0x1ad92c),Spriteset_Battle[_0x2cdd84(0x3c1)]&&(this[_0x2cdd84(0x9dc)]['x']=this['_effectsContainer']['x'],this[_0x2cdd84(0x9dc)]['y']=this[_0x2cdd84(0xa33)]['y'])),this[_0x2cdd84(0x3c7)][_0x2cdd84(0x68a)](_0x1ad92c);},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x6bd)]=function(_0x336c8f){const _0x562e22=_0x5e79d1;if(!_0x336c8f)return![];if(!_0x336c8f['_animation'])return![];if(!_0x336c8f[_0x562e22(0x897)][0x0])return![];if(_0x336c8f['targetObjects'][0x0]['isActor']&&!_0x336c8f['targetObjects'][0x0][_0x562e22(0x2ff)]())return![];if($gameSystem[_0x562e22(0x9a5)]())return![];if(!this[_0x562e22(0x579)]())return![];if(_0x336c8f[_0x562e22(0x54e)]===Sprite_Animation){const _0x171517=VisuMZ[_0x562e22(0x57e)]['Settings']['Actor'];_0x171517[_0x562e22(0x674)]=_0x171517['FvAniEachTarget']??!![];if(_0x336c8f[_0x562e22(0xc7a)]['displayType']===0x0&&!_0x171517['FvAniEachTarget'])return![];_0x171517['FvAniCenterAll']=_0x171517[_0x562e22(0x83a)]??!![];if(_0x336c8f['_animation']['displayType']===0x1&&!_0x171517[_0x562e22(0x83a)])return![];_0x171517[_0x562e22(0x8bc)]=_0x171517['FvAniCenterScreen']??![];if(_0x336c8f[_0x562e22(0xc7a)][_0x562e22(0x850)]===0x2&&!_0x171517[_0x562e22(0x8bc)])return![];}else{if(_0x336c8f['constructor']===Sprite_AnimationMV){if(_0x336c8f[_0x562e22(0xc7a)][_0x562e22(0x925)]===0x3)return![];}}return!![];const _0x22a1af=Window_BattleStatus['prototype'][_0x562e22(0xca9)]();return['xp',_0x562e22(0x2af)][_0x562e22(0x50f)](_0x22a1af);},Spriteset_Battle['prototype'][_0x5e79d1(0x579)]=function(){const _0x123ce6=_0x5e79d1;if(!SceneManager['_scene'])return null;if(!SceneManager[_0x123ce6(0xc59)][_0x123ce6(0x2cf)])return null;if(!SceneManager[_0x123ce6(0xc59)][_0x123ce6(0x2cf)][_0x123ce6(0xa33)])return null;return SceneManager['_scene']['_statusWindow'][_0x123ce6(0xa33)];},Spriteset_Battle[_0x5e79d1(0x3a9)]['removeAnimation']=function(_0x1e45a9){const _0x31a760=_0x5e79d1;this['removeAnimationFromContainer'](_0x1e45a9);for(const _0x4e31fa of _0x1e45a9[_0x31a760(0x897)]){_0x4e31fa['endAnimation']&&_0x4e31fa[_0x31a760(0xbc9)]();}_0x1e45a9[_0x31a760(0x8b9)]();},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x441)]=function(_0x517e1b){const _0x5109b0=_0x5e79d1;this[_0x5109b0(0x6bd)](_0x517e1b)?this[_0x5109b0(0x579)]()[_0x5109b0(0x7a6)](_0x517e1b):this['_animationContainer']['removeChild'](_0x517e1b);this[_0x5109b0(0xa33)]['removeChild'](_0x517e1b),this[_0x5109b0(0x9dc)]['removeChild'](_0x517e1b),this[_0x5109b0(0x3c7)][_0x5109b0(0x9b8)](_0x517e1b);if(this[_0x5109b0(0xb6c)])this[_0x5109b0(0xb6c)][_0x5109b0(0x9b8)](_0x517e1b);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x398)]=Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x4b8)],Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x4b8)]=function(){const _0x1174ed=_0x5e79d1;VisuMZ['BattleCore']['Spriteset_Battle_updateActors'][_0x1174ed(0x695)](this),this[_0x1174ed(0x7d6)]();},Spriteset_Battle[_0x5e79d1(0x3a9)]['updateBattlerContainer']=function(){const _0x50e585=_0x5e79d1;this['_battlerContainer']['children'][_0x50e585(0xaaf)](this[_0x50e585(0x905)][_0x50e585(0x95a)](this)),this[_0x50e585(0xbd4)]();if(!this[_0x50e585(0x45a)])return;this['_battlerContainer']['opacity']=this[_0x50e585(0x7e0)]();},Spriteset_Battle[_0x5e79d1(0x3a9)]['compareBattlerSprites']=function(_0xabb90c,_0x1bab8b){const _0x21e394=_0x5e79d1;if(VisuMZ['BattleCore'][_0x21e394(0xc89)][_0x21e394(0x232)]['PrioritySortActors']){if(_0xabb90c['_battler']&&_0x1bab8b[_0x21e394(0xab5)]){if(_0xabb90c[_0x21e394(0xab5)]['isActor']()&&_0x1bab8b[_0x21e394(0xab5)][_0x21e394(0x4cf)]())return 0x1;else{if(_0x1bab8b[_0x21e394(0xab5)]['isActor']()&&_0xabb90c[_0x21e394(0xab5)][_0x21e394(0x4cf)]())return-0x1;}}}return _0xabb90c[_0x21e394(0x415)]!==_0x1bab8b[_0x21e394(0x415)]?_0xabb90c[_0x21e394(0x415)]-_0x1bab8b[_0x21e394(0x415)]:_0x1bab8b[_0x21e394(0x2d5)]-_0xabb90c[_0x21e394(0x2d5)];},Spriteset_Battle['prototype'][_0x5e79d1(0xbd4)]=function(){const _0x10bb35=_0x5e79d1;if(!VisuMZ[_0x10bb35(0x57e)][_0x10bb35(0xc89)][_0x10bb35(0x232)][_0x10bb35(0x230)])return;const _0x2214f3=BattleManager[_0x10bb35(0x5c2)];if(_0x2214f3){if(_0x2214f3['isActor']()&&!$gameSystem[_0x10bb35(0x9a5)]())return;if(_0x2214f3===BattleManager[_0x10bb35(0x5a0)]())return;const _0x223c2a=_0x2214f3[_0x10bb35(0x949)]();if(_0x223c2a&&_0x2214f3[_0x10bb35(0x2ff)]())this[_0x10bb35(0x45a)][_0x10bb35(0x593)](_0x223c2a);}},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc02)]=function(){const _0x227560=_0x5e79d1;for(const _0x7b4a43 of $gameParty[_0x227560(0x43a)]()){if(!_0x7b4a43)continue;if(!_0x7b4a43[_0x227560(0x949)]())continue;_0x7b4a43[_0x227560(0x949)]()[_0x227560(0x42b)]=!![],_0x7b4a43[_0x227560(0x949)]()['retreat']();}},Spriteset_Battle['prototype'][_0x5e79d1(0x9ee)]=function(){const _0x498add=_0x5e79d1;this['_uiContainer']=new Sprite(),Spriteset_Battle[_0x498add(0x3c1)]?this['addChild'](this[_0x498add(0x9ba)]):this[_0x498add(0x252)][_0x498add(0x593)](this[_0x498add(0x9ba)]),SceneManager[_0x498add(0xc59)][_0x498add(0x9ba)]=this[_0x498add(0x9ba)];},Spriteset_Battle[_0x5e79d1(0x3a9)]['createEnemyNames']=function(){const _0x20961d=_0x5e79d1;if(VisuMZ[_0x20961d(0x57e)][_0x20961d(0xc89)][_0x20961d(0xb2e)][_0x20961d(0x44f)])return;this[_0x20961d(0x4a9)]=new Sprite(),BattleManager[_0x20961d(0x3d6)](this[_0x20961d(0x4a9)]);for(const _0x4793ae of this[_0x20961d(0xc22)]){const _0x143ca0=new Sprite_EnemyName();this[_0x20961d(0x4a9)][_0x20961d(0x593)](_0x143ca0),_0x143ca0['linkSprite'](_0x4793ae);}},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xc17)]=function(){const _0x550844=_0x5e79d1;if(!this[_0x550844(0x468)])return;if(!this[_0x550844(0x9ba)])return;const _0xc63434=Spriteset_Battle[_0x550844(0x3c1)]?this['_damageContainer']['x']:0x0,_0x2e3a0c=Spriteset_Battle['ANTI_TINT_UI']?this[_0x550844(0x468)]['y']:0x0,_0x3d8cbc=Imported[_0x550844(0x857)]?this['_battleField']['x']:0x0,_0x3b0a71=Imported[_0x550844(0x857)]?this[_0x550844(0x252)]['y']:0x0;this[_0x550844(0x9ba)]['x']=_0xc63434+_0x3d8cbc,this[_0x550844(0x9ba)]['y']=_0x2e3a0c+_0x3b0a71;},BattleManager[_0x5e79d1(0x3d6)]=function(_0x452fee){const _0x3a72f7=_0x5e79d1;if(!SceneManager[_0x3a72f7(0xc59)][_0x3a72f7(0x9ba)])return;SceneManager[_0x3a72f7(0xc59)][_0x3a72f7(0x9ba)][_0x3a72f7(0x593)](_0x452fee);},BattleManager[_0x5e79d1(0xa74)]=function(_0x2a30c7){const _0x3820fa=_0x5e79d1;if(!SceneManager[_0x3820fa(0xc59)][_0x3820fa(0x9ba)])return;SceneManager[_0x3820fa(0xc59)][_0x3820fa(0x9ba)][_0x3820fa(0x7a6)](_0x2a30c7);},Spriteset_Battle['prototype'][_0x5e79d1(0x7e0)]=function(){return 0xff;},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x635)]=function(){return![];},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x9d6)]=function(){const _0x298694=_0x5e79d1;return this[_0x298694(0x4a2)]()[_0x298694(0xb7e)](_0x1afbe7=>_0x1afbe7[_0x298694(0x433)]());},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x373)]=function(){const _0x4ef7fc=_0x5e79d1;return this[_0x4ef7fc(0x4a2)]()['some'](_0x5e9a7c=>_0x5e9a7c['isJumping']());},Spriteset_Battle['prototype'][_0x5e79d1(0x662)]=function(){const _0x229409=_0x5e79d1;return this[_0x229409(0x4a2)]()[_0x229409(0xb7e)](_0x191a92=>_0x191a92[_0x229409(0x80d)]());},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xbcc)]=function(){const _0x60cea2=_0x5e79d1;return this[_0x60cea2(0x4a2)]()['some'](_0x3a461e=>_0x3a461e['isSkewing']());},Spriteset_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x5b9)]=function(){const _0x45dc=_0x5e79d1;return this[_0x45dc(0x4a2)]()[_0x45dc(0xb7e)](_0x1c7ffc=>_0x1c7ffc['isSpinning']());},Spriteset_Battle[_0x5e79d1(0x3a9)]['isAnyoneChangingOpacity']=function(){const _0x46c66d=_0x5e79d1;return this[_0x46c66d(0x4a2)]()['some'](_0x5b36fc=>_0x5b36fc['isChangingOpacity']());},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xcba)]=Window_ItemList[_0x5e79d1(0x3a9)]['maxCols'],Window_ItemList[_0x5e79d1(0x3a9)][_0x5e79d1(0x721)]=function(){const _0x28ada7=_0x5e79d1;return SceneManager[_0x28ada7(0x6a6)]()?SceneManager[_0x28ada7(0xc59)][_0x28ada7(0xca9)]()==='border'?VisuMZ[_0x28ada7(0x57e)]['Settings']['BattleLayout']['SkillItemBorderCols']:VisuMZ[_0x28ada7(0x57e)][_0x28ada7(0xc89)][_0x28ada7(0x39d)][_0x28ada7(0x436)]:VisuMZ[_0x28ada7(0x57e)][_0x28ada7(0xcba)]['call'](this);},VisuMZ[_0x5e79d1(0x57e)]['Window_SkillList_maxCols']=Window_SkillList['prototype'][_0x5e79d1(0x721)],Window_SkillList['prototype'][_0x5e79d1(0x721)]=function(){const _0x26251c=_0x5e79d1;return SceneManager[_0x26251c(0x6a6)]()?SceneManager[_0x26251c(0xc59)]['battleLayoutStyle']()===_0x26251c(0x758)?VisuMZ['BattleCore'][_0x26251c(0xc89)]['BattleLayout'][_0x26251c(0x988)]:VisuMZ[_0x26251c(0x57e)][_0x26251c(0xc89)]['BattleLayout']['SkillItemStandardCols']:VisuMZ['BattleCore'][_0x26251c(0x559)][_0x26251c(0x695)](this);},VisuMZ['BattleCore'][_0x5e79d1(0x701)]=Window_Options[_0x5e79d1(0x3a9)][_0x5e79d1(0x3c4)],Window_Options[_0x5e79d1(0x3a9)][_0x5e79d1(0x3c4)]=function(){const _0x2185f4=_0x5e79d1;VisuMZ[_0x2185f4(0x57e)][_0x2185f4(0x701)][_0x2185f4(0x695)](this),this[_0x2185f4(0x634)](),this[_0x2185f4(0xc46)]();},Window_Options[_0x5e79d1(0x3a9)][_0x5e79d1(0x634)]=function(){const _0x314c2a=_0x5e79d1;VisuMZ[_0x314c2a(0x57e)][_0x314c2a(0xc89)][_0x314c2a(0xa79)][_0x314c2a(0x87b)]&&(this[_0x314c2a(0x57d)](),this[_0x314c2a(0x272)]());},Window_Options[_0x5e79d1(0x3a9)][_0x5e79d1(0xc46)]=function(){const _0x4b00e5=_0x5e79d1;if(!VisuMZ['BattleCore'][_0x4b00e5(0xc89)][_0x4b00e5(0xc24)][_0x4b00e5(0xca3)])return;const _0xc7fd22=TextManager[_0x4b00e5(0x26a)],_0x2f4c94=_0x4b00e5(0x26a);this[_0x4b00e5(0x6a4)](_0xc7fd22,_0x2f4c94);},Window_Options['prototype']['addBattleCoreAutoBattleStartupCommand']=function(){const _0x5d42a0=_0x5e79d1,_0x2aa507=TextManager['autoBattleStart'],_0x5d227d='autoBattleAtStart';this[_0x5d42a0(0x6a4)](_0x2aa507,_0x5d227d);},Window_Options[_0x5e79d1(0x3a9)][_0x5e79d1(0x272)]=function(){const _0x4e9384=_0x5e79d1,_0x365ffd=TextManager[_0x4e9384(0xb62)],_0x1844d7=_0x4e9384(0x9d3);this['addCommand'](_0x365ffd,_0x1844d7);},VisuMZ['BattleCore'][_0x5e79d1(0x71b)]=Window_Options[_0x5e79d1(0x3a9)][_0x5e79d1(0x8d6)],Window_Options['prototype'][_0x5e79d1(0x8d6)]=function(_0x37c50f){const _0x23ae28=_0x5e79d1,_0x22499b=this[_0x23ae28(0x5cf)](_0x37c50f);return _0x22499b===_0x23ae28(0x9d3)?this[_0x23ae28(0xaae)]():VisuMZ[_0x23ae28(0x57e)][_0x23ae28(0x71b)][_0x23ae28(0x695)](this,_0x37c50f);},Window_Options['prototype'][_0x5e79d1(0xaae)]=function(){const _0x300962=_0x5e79d1,_0x1c7ba5=VisuMZ[_0x300962(0x57e)][_0x300962(0xc89)][_0x300962(0xa79)],_0x2f8c7b=this[_0x300962(0x318)](_0x300962(0x9d3));return _0x2f8c7b?_0x1c7ba5['StyleON']:_0x1c7ba5[_0x300962(0xc3c)];},Window_ShopStatus[_0x5e79d1(0x3a9)]['getItemDamageAmountLabelBattleCore']=function(){const _0x40e040=_0x5e79d1,_0x431a2b=DataManager['getDamageStyle'](this[_0x40e040(0x2f2)]),_0x4be37c=VisuMZ[_0x40e040(0xa0d)][_0x431a2b];if(!_0x4be37c)return this[_0x40e040(0x98e)]();const _0x27f315=_0x40e040(0x74c)[_0x40e040(0x2a0)](this['_item'][_0x40e040(0x6e4)][_0x40e040(0x31c)]),_0x1f7f8f=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x40e040(0x6e4)]['type']];return _0x4be37c[_0x27f315][_0x40e040(0x2a0)](_0x1f7f8f);},Window_ShopStatus[_0x5e79d1(0x3a9)]['getItemDamageAmountTextBattleCore']=function(){const _0x5b75f1=_0x5e79d1,_0x2b12db=DataManager[_0x5b75f1(0xc6c)](this[_0x5b75f1(0x2f2)]),_0x51bd48=VisuMZ[_0x5b75f1(0xa0d)][_0x2b12db];if(!_0x51bd48)return this[_0x5b75f1(0x9f3)]();return _0x51bd48[_0x5b75f1(0x661)][_0x5b75f1(0x695)](this);},VisuMZ['BattleCore'][_0x5e79d1(0x23f)]=Window_PartyCommand['prototype'][_0x5e79d1(0xb75)],Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x4c950f){const _0x42983a=_0x5e79d1;VisuMZ['BattleCore'][_0x42983a(0x23f)]['call'](this,_0x4c950f),this[_0x42983a(0xab1)](_0x4c950f);},Window_PartyCommand[_0x5e79d1(0x3a9)]['createCommandNameWindow']=function(_0x7aa549){const _0x6a6d84=_0x5e79d1,_0x2bbafa=new Rectangle(0x0,0x0,_0x7aa549[_0x6a6d84(0xa0f)],_0x7aa549[_0x6a6d84(0x912)]);this[_0x6a6d84(0x6b7)]=new Window_Base(_0x2bbafa),this[_0x6a6d84(0x6b7)][_0x6a6d84(0x3f9)]=0x0,this['addChild'](this[_0x6a6d84(0x6b7)]),this[_0x6a6d84(0x2c6)]();},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xab3)]=function(){const _0x1a8a2b=_0x5e79d1;Window_Command[_0x1a8a2b(0x3a9)][_0x1a8a2b(0xab3)][_0x1a8a2b(0x695)](this);if(this[_0x1a8a2b(0x6b7)])this[_0x1a8a2b(0x2c6)]();},Window_PartyCommand[_0x5e79d1(0x3a9)]['updateCommandNameWindow']=function(){const _0x488f5c=_0x5e79d1,_0x139f66=this[_0x488f5c(0x6b7)];_0x139f66[_0x488f5c(0x365)][_0x488f5c(0x438)]();const _0x50c4e5=this[_0x488f5c(0x381)](this['index']());if(_0x50c4e5===_0x488f5c(0x3f8)&&this[_0x488f5c(0xb59)]()>0x0){const _0x4385f4=this['itemLineRect'](this[_0x488f5c(0x972)]());let _0x31c107=this[_0x488f5c(0xb08)](this[_0x488f5c(0x972)]());_0x31c107=_0x31c107[_0x488f5c(0x4f6)](/\\I\[(\d+)\]/gi,''),_0x139f66['resetFontSettings'](),this[_0x488f5c(0xc1c)](_0x31c107,_0x4385f4),this[_0x488f5c(0x58f)](_0x31c107,_0x4385f4),this[_0x488f5c(0x68c)](_0x31c107,_0x4385f4);}},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xc1c)]=function(_0x4729cc,_0x1daa60){},Window_PartyCommand['prototype'][_0x5e79d1(0x58f)]=function(_0x4cea88,_0x46e600){const _0x18fcc4=_0x5e79d1,_0x25fce7=this[_0x18fcc4(0x6b7)];_0x25fce7['drawText'](_0x4cea88,0x0,_0x46e600['y'],_0x25fce7[_0x18fcc4(0xa21)],_0x18fcc4(0x2ad));},Window_PartyCommand['prototype'][_0x5e79d1(0x68c)]=function(_0x1ddee9,_0x40c3d8){const _0x59f0b3=_0x5e79d1,_0x16fea0=this[_0x59f0b3(0x6b7)],_0x5b158d=$gameSystem[_0x59f0b3(0x8a5)](),_0x235680=_0x40c3d8['x']+Math[_0x59f0b3(0x48d)](_0x40c3d8['width']/0x2)+_0x5b158d;_0x16fea0['x']=_0x16fea0['width']/-0x2+_0x235680,_0x16fea0['y']=Math[_0x59f0b3(0x48d)](_0x40c3d8[_0x59f0b3(0x912)]/0x2);},Window_PartyCommand[_0x5e79d1(0x3a9)]['makeCommandList']=function(){const _0xb22c7b=_0x5e79d1;this[_0xb22c7b(0xca1)](),this[_0xb22c7b(0x3b3)](),this[_0xb22c7b(0x3bb)](),this[_0xb22c7b(0x410)](),this[_0xb22c7b(0x4e9)](),this['addEscapeCommand']();},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xca1)]=function(){const _0x491c98=_0x5e79d1,_0x3c9d43=this[_0x491c98(0x72f)](),_0x3bd76b=VisuMZ[_0x491c98(0x57e)][_0x491c98(0xc89)][_0x491c98(0xb54)][_0x491c98(0xb28)],_0x683d17=_0x3c9d43===_0x491c98(0x9da)?TextManager[_0x491c98(0x440)]:_0x491c98(0x21c)['format'](_0x3bd76b,TextManager[_0x491c98(0x440)]),_0x2ed7f6=this['isFightCommandEnabled']();this['addCommand'](_0x683d17,'fight',_0x2ed7f6);},Window_PartyCommand['prototype'][_0x5e79d1(0x89e)]=function(){return!![];},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x3b3)]=function(){const _0x3f5ea0=_0x5e79d1;if(!this[_0x3f5ea0(0xa42)]())return;const _0x18dcb2=this[_0x3f5ea0(0x72f)](),_0x395937=VisuMZ[_0x3f5ea0(0x57e)][_0x3f5ea0(0xc89)][_0x3f5ea0(0xb54)][_0x3f5ea0(0x4f8)],_0x41ce41=_0x18dcb2===_0x3f5ea0(0x9da)?TextManager[_0x3f5ea0(0xc27)]:_0x3f5ea0(0x21c)['format'](_0x395937,TextManager[_0x3f5ea0(0xc27)]),_0x40be0d=this[_0x3f5ea0(0x3b8)]();this['addCommand'](_0x41ce41,_0x3f5ea0(0xc27),_0x40be0d);},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xa42)]=function(){const _0x16b7c6=_0x5e79d1;return VisuMZ[_0x16b7c6(0x57e)][_0x16b7c6(0xc89)][_0x16b7c6(0xb54)][_0x16b7c6(0x633)];},Window_PartyCommand['prototype']['isAutoBattleCommandEnabled']=function(){return!![];},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x3bb)]=function(){},Window_PartyCommand['prototype'][_0x5e79d1(0x410)]=function(){const _0x54cee9=_0x5e79d1,_0x4d72af=VisuMZ[_0x54cee9(0x57e)][_0x54cee9(0xc89)][_0x54cee9(0xb54)][_0x54cee9(0x621)]??!![];if(!_0x4d72af)return;const _0x343ede=this['commandStyle'](),_0x4fcacf=VisuMZ[_0x54cee9(0x57e)][_0x54cee9(0xc89)][_0x54cee9(0x681)][_0x54cee9(0x780)]??0x57,_0x44770b=_0x343ede===_0x54cee9(0x9da)?TextManager['status']:_0x54cee9(0x21c)[_0x54cee9(0x2a0)](_0x4fcacf,TextManager['status']),_0x378cc3=!![];this[_0x54cee9(0x6a4)](_0x44770b,_0x54cee9(0x40a),_0x378cc3);},Window_PartyCommand[_0x5e79d1(0x3a9)]['addOptionsCommand']=function(){const _0xb51297=_0x5e79d1;if(!this[_0xb51297(0x72c)]())return;const _0x28f245=this['commandStyle'](),_0x3796e2=VisuMZ[_0xb51297(0x57e)][_0xb51297(0xc89)][_0xb51297(0xb54)]['CmdIconOptions'],_0x32c46b=_0x28f245==='text'?TextManager[_0xb51297(0x1d6)]:'\x5cI[%1]%2'[_0xb51297(0x2a0)](_0x3796e2,TextManager[_0xb51297(0x1d6)]),_0x2e0ad1=this['isOptionsCommandEnabled']();this[_0xb51297(0x6a4)](_0x32c46b,_0xb51297(0x1d6),_0x2e0ad1);},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x72c)]=function(){const _0x4ca0b1=_0x5e79d1;return VisuMZ[_0x4ca0b1(0x57e)]['Settings'][_0x4ca0b1(0xb54)]['CommandAddOptions'];},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xc07)]=function(){return!![];},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xa16)]=function(){const _0x5deab6=_0x5e79d1,_0x388976=this[_0x5deab6(0x72f)](),_0x32e05e=VisuMZ['BattleCore'][_0x5deab6(0xc89)][_0x5deab6(0xb54)][_0x5deab6(0xa2a)],_0x4943cf=_0x388976===_0x5deab6(0x9da)?TextManager[_0x5deab6(0x586)]:_0x5deab6(0x21c)['format'](_0x32e05e,TextManager[_0x5deab6(0x586)]),_0x264132=this['isEscapeCommandEnabled']();this['addCommand'](_0x4943cf,'escape',_0x264132);},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xaf4)]=function(){const _0x5156e7=_0x5e79d1;return BattleManager[_0x5156e7(0xca0)]();},Window_PartyCommand['prototype']['itemTextAlign']=function(){const _0x5b3f79=_0x5e79d1;return VisuMZ['BattleCore'][_0x5b3f79(0xc89)]['PartyCmd']['CmdTextAlign'];},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x78b)]=function(_0x46c518){const _0x4f6345=_0x5e79d1,_0x4e85d7=this[_0x4f6345(0x381)](_0x46c518);if(_0x4e85d7==='iconText')this[_0x4f6345(0x9fc)](_0x46c518);else _0x4e85d7===_0x4f6345(0x3f8)?this[_0x4f6345(0x6a1)](_0x46c518):Window_Command[_0x4f6345(0x3a9)][_0x4f6345(0x78b)][_0x4f6345(0x695)](this,_0x46c518);},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x72f)]=function(){const _0x48d6c9=_0x5e79d1;return VisuMZ[_0x48d6c9(0x57e)][_0x48d6c9(0xc89)][_0x48d6c9(0xb54)]['CmdStyle'];},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x381)]=function(_0x502262){const _0x4e0e84=_0x5e79d1;if(_0x502262<0x0)return _0x4e0e84(0x9da);const _0x576b16=this[_0x4e0e84(0x72f)]();if(_0x576b16!=='auto')return _0x576b16;else{if(this[_0x4e0e84(0xb59)]()>0x0){const _0x16213a=this['commandName'](_0x502262);if(_0x16213a['match'](/\\I\[(\d+)\]/i)){const _0x2c86d3=this[_0x4e0e84(0x906)](_0x502262),_0x30489e=this['textSizeEx'](_0x16213a)[_0x4e0e84(0xa0f)];return _0x30489e<=_0x2c86d3[_0x4e0e84(0xa0f)]?_0x4e0e84(0x785):_0x4e0e84(0x3f8);}}}return _0x4e0e84(0x9da);},Window_PartyCommand['prototype']['drawItemStyleIconText']=function(_0x3a5383){const _0x1ee2c2=_0x5e79d1,_0x4614a1=this[_0x1ee2c2(0x906)](_0x3a5383),_0x587d30=this[_0x1ee2c2(0xb08)](_0x3a5383),_0x8ca959=this['textSizeEx'](_0x587d30)['width'];this[_0x1ee2c2(0xc44)](this[_0x1ee2c2(0xbf1)](_0x3a5383));const _0x1c7b60=this['itemTextAlign']();if(_0x1c7b60==='right')this[_0x1ee2c2(0x567)](_0x587d30,_0x4614a1['x']+_0x4614a1['width']-_0x8ca959,_0x4614a1['y'],_0x8ca959);else{if(_0x1c7b60===_0x1ee2c2(0x2ad)){const _0x22e9c2=_0x4614a1['x']+Math[_0x1ee2c2(0x48d)]((_0x4614a1['width']-_0x8ca959)/0x2);this[_0x1ee2c2(0x567)](_0x587d30,_0x22e9c2,_0x4614a1['y'],_0x8ca959);}else this[_0x1ee2c2(0x567)](_0x587d30,_0x4614a1['x'],_0x4614a1['y'],_0x8ca959);}},Window_PartyCommand['prototype'][_0x5e79d1(0x6a1)]=function(_0x46f949){const _0x1db574=_0x5e79d1;this['commandName'](_0x46f949)['match'](/\\I\[(\d+)\]/i);const _0x15eae5=Number(RegExp['$1'])||0x0,_0x21f33a=this[_0x1db574(0x906)](_0x46f949),_0x14ee42=_0x21f33a['x']+Math['floor']((_0x21f33a[_0x1db574(0xa0f)]-ImageManager['iconWidth'])/0x2),_0x33dc84=_0x21f33a['y']+(_0x21f33a[_0x1db574(0x912)]-ImageManager[_0x1db574(0x835)])/0x2;this['drawIcon'](_0x15eae5,_0x14ee42,_0x33dc84);},Window_PartyCommand['prototype']['hide']=function(){},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x838)]=function(){const _0x3ec958=_0x5e79d1;Window_Command[_0x3ec958(0x3a9)][_0x3ec958(0x838)][_0x3ec958(0x695)](this);const _0x561a46=this['battleLayoutStyle']();_0x561a46===_0x3ec958(0x758)&&this['showHelpWindow']();},Window_PartyCommand['prototype']['battleLayoutStyle']=function(){const _0x384bb0=_0x5e79d1;if(this[_0x384bb0(0x747)])return this['_battleLayoutStyle'];return this[_0x384bb0(0x747)]=SceneManager[_0x384bb0(0xc59)][_0x384bb0(0xca9)](),this[_0x384bb0(0x747)];},Window_PartyCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x1f4)]=function(){const _0x5a1135=_0x5e79d1,_0x304c2c=VisuMZ[_0x5a1135(0x57e)][_0x5a1135(0xc89)][_0x5a1135(0xb54)],_0x79f708=this['currentSymbol']();switch(_0x79f708){case _0x5a1135(0x440):this['_helpWindow'][_0x5a1135(0x6c9)](_0x304c2c['HelpFight']);break;case _0x5a1135(0xc27):this[_0x5a1135(0x66b)][_0x5a1135(0x6c9)](_0x304c2c[_0x5a1135(0x7b7)]);break;case _0x5a1135(0x1d6):this[_0x5a1135(0x66b)]['setText'](_0x304c2c[_0x5a1135(0x698)]);break;case _0x5a1135(0x586):this['_helpWindow'][_0x5a1135(0x6c9)](_0x304c2c[_0x5a1135(0x653)]);break;case _0x5a1135(0x40a):this['_helpWindow'][_0x5a1135(0x6c9)](Window_InBattleStatus[_0x5a1135(0x78f)][_0x5a1135(0x389)]);break;default:this['_helpWindow']['setText']('');break;}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x284)]=Window_ActorCommand['prototype'][_0x5e79d1(0xb75)],Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x5777c2){const _0x32b7ae=_0x5e79d1;VisuMZ[_0x32b7ae(0x57e)][_0x32b7ae(0x284)]['call'](this,_0x5777c2),this[_0x32b7ae(0xab1)](_0x5777c2);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xab1)]=function(_0x1f8ce8){const _0x52a794=_0x5e79d1,_0x5dfb00=new Rectangle(0x0,0x0,_0x1f8ce8[_0x52a794(0xa0f)],_0x1f8ce8[_0x52a794(0x912)]);this[_0x52a794(0x6b7)]=new Window_Base(_0x5dfb00),this[_0x52a794(0x6b7)]['opacity']=0x0,this[_0x52a794(0x593)](this['_commandNameWindow']),this['updateCommandNameWindow']();},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xab3)]=function(){const _0x3c6b53=_0x5e79d1;Window_Command[_0x3c6b53(0x3a9)][_0x3c6b53(0xab3)]['call'](this);if(this[_0x3c6b53(0x6b7)])this['updateCommandNameWindow']();},Window_ActorCommand[_0x5e79d1(0x3a9)]['updateCommandNameWindow']=function(){const _0x10593b=_0x5e79d1,_0xdff015=this[_0x10593b(0x6b7)];_0xdff015[_0x10593b(0x365)]['clear']();const _0x3ab322=this[_0x10593b(0x381)](this['index']());if(_0x3ab322==='icon'&&this['maxItems']()>0x0){const _0x5087b6=this[_0x10593b(0x906)](this[_0x10593b(0x972)]());let _0x8f708d=this[_0x10593b(0xb08)](this['index']());_0x8f708d=_0x8f708d[_0x10593b(0x4f6)](/\\I\[(\d+)\]/gi,''),_0xdff015['resetFontSettings'](),this[_0x10593b(0xc1c)](_0x8f708d,_0x5087b6),this[_0x10593b(0x58f)](_0x8f708d,_0x5087b6),this[_0x10593b(0x68c)](_0x8f708d,_0x5087b6);}},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xc1c)]=function(_0x233585,_0x24d83d){},Window_ActorCommand[_0x5e79d1(0x3a9)]['commandNameWindowDrawText']=function(_0x567505,_0x57c803){const _0x5cbadc=_0x5e79d1,_0x4435e0=this[_0x5cbadc(0x6b7)];_0x4435e0['drawText'](_0x567505,0x0,_0x57c803['y'],_0x4435e0[_0x5cbadc(0xa21)],_0x5cbadc(0x2ad));},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x68c)]=function(_0x521244,_0x11f539){const _0xb8463f=_0x5e79d1,_0x1773f2=this['_commandNameWindow'],_0xe6835=$gameSystem[_0xb8463f(0x8a5)](),_0x395d9e=_0x11f539['x']+Math[_0xb8463f(0x48d)](_0x11f539[_0xb8463f(0xa0f)]/0x2)+_0xe6835;_0x1773f2['x']=_0x1773f2['width']/-0x2+_0x395d9e,_0x1773f2['y']=Math[_0xb8463f(0x48d)](_0x11f539[_0xb8463f(0x912)]/0x2);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ae)]=function(){const _0x4685dc=_0x5e79d1;if(!this[_0x4685dc(0x380)])return;const _0xc5799=this[_0x4685dc(0x380)][_0x4685dc(0x8ca)]();for(const _0x5cc7d2 of _0xc5799){this[_0x4685dc(0x723)](_0x5cc7d2['toUpperCase']()[_0x4685dc(0xacc)]());}},Window_ActorCommand['prototype'][_0x5e79d1(0x723)]=function(_0x40cc81){const _0x13df8e=_0x5e79d1;_0x40cc81===_0x13df8e(0x8c6)&&this['addAttackCommand']();[_0x13df8e(0x55b),_0x13df8e(0x6da)]['includes'](_0x40cc81)&&this[_0x13df8e(0x6b3)]();_0x40cc81===_0x13df8e(0x71f)&&this['addGuardCommand']();_0x40cc81===_0x13df8e(0x3ab)&&this[_0x13df8e(0x73b)]();_0x40cc81===_0x13df8e(0x8ec)&&this[_0x13df8e(0x410)]();_0x40cc81===_0x13df8e(0x700)&&this['addEscapeCommand']();_0x40cc81===_0x13df8e(0x425)&&this[_0x13df8e(0x3b3)]();if(_0x40cc81[_0x13df8e(0xcd4)](/STYPE: (\d+)/i)){const _0x1a4958=Number(RegExp['$1']);this[_0x13df8e(0xb9b)](_0x1a4958);}else{if(_0x40cc81[_0x13df8e(0xcd4)](/STYPE: (.*)/i)){const _0x185ddb=DataManager[_0x13df8e(0x66f)](RegExp['$1']);this[_0x13df8e(0xb9b)](_0x185ddb);}}_0x40cc81===_0x13df8e(0xba8)&&this[_0x13df8e(0x47f)]();if(_0x40cc81[_0x13df8e(0xcd4)](/SKILL: (\d+)/i)){const _0x463a7b=Number(RegExp['$1']);this[_0x13df8e(0x598)]($dataSkills[_0x463a7b]);}else{if(_0x40cc81[_0x13df8e(0xcd4)](/SKILL: (.*)/i)){const _0x32d52f=DataManager['getSkillIdWithName'](RegExp['$1']);this[_0x13df8e(0x598)]($dataSkills[_0x32d52f]);}}_0x40cc81===_0x13df8e(0xc3d)&&Imported[_0x13df8e(0x4f9)]&&this[_0x13df8e(0x7bc)](),[_0x13df8e(0x97b),_0x13df8e(0xa73)][_0x13df8e(0x9fb)](_0x40cc81)&&Imported[_0x13df8e(0xc1b)]&&this[_0x13df8e(0xcf1)](),_0x40cc81===_0x13df8e(0x400)&&Imported[_0x13df8e(0x396)]&&this[_0x13df8e(0x3a8)](!![]),_0x40cc81==='GRID\x20MOVE'&&Imported[_0x13df8e(0xc03)]&&this[_0x13df8e(0x957)]();},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x249)]=function(){const _0x4fa93f=_0x5e79d1,_0x95efd2=$dataSkills[this[_0x4fa93f(0x380)][_0x4fa93f(0x609)]()];if(!_0x95efd2)return;if(!this[_0x4fa93f(0x8b6)](_0x95efd2))return;const _0x2c6b1a=this[_0x4fa93f(0x72f)](),_0x4795fb=DataManager[_0x4fa93f(0x33e)](_0x95efd2),_0x851df3=DataManager['battleCommandIcon'](_0x95efd2),_0x32b6dc=_0x2c6b1a===_0x4fa93f(0x9da)?_0x4795fb:_0x4fa93f(0x21c)['format'](_0x851df3,_0x4795fb);this['addCommand'](_0x32b6dc,'attack',this['_actor'][_0x4fa93f(0x49c)]());},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x3dd)]=function(){const _0x3976fc=_0x5e79d1,_0x245f76=$dataSkills[this[_0x3976fc(0x380)][_0x3976fc(0xb65)]()];if(!_0x245f76)return;if(!this[_0x3976fc(0x8b6)](_0x245f76))return;const _0x4e9fac=this[_0x3976fc(0x72f)](),_0x1d40e2=DataManager[_0x3976fc(0x33e)](_0x245f76),_0x15dd97=DataManager[_0x3976fc(0x601)](_0x245f76),_0x14c553=_0x4e9fac==='text'?_0x1d40e2:_0x3976fc(0x21c)[_0x3976fc(0x2a0)](_0x15dd97,_0x1d40e2);this[_0x3976fc(0x6a4)](_0x14c553,'guard',this['_actor'][_0x3976fc(0xbf5)]());},Window_ActorCommand[_0x5e79d1(0x3a9)]['addItemCommand']=function(){const _0x9dd11c=_0x5e79d1,_0x55d230=this[_0x9dd11c(0x72f)](),_0x3bc17a=VisuMZ[_0x9dd11c(0x57e)][_0x9dd11c(0xc89)]['ActorCmd'][_0x9dd11c(0x212)],_0x1e702d=_0x55d230===_0x9dd11c(0x9da)?TextManager['item']:_0x9dd11c(0x21c)[_0x9dd11c(0x2a0)](_0x3bc17a,TextManager['item']),_0x22c9ac=this[_0x9dd11c(0x355)]();this['addCommand'](_0x1e702d,_0x9dd11c(0x990),_0x22c9ac);},Window_ActorCommand['prototype'][_0x5e79d1(0x355)]=function(){const _0x373cb8=_0x5e79d1;return this[_0x373cb8(0x380)]&&this['_actor']['canUseItemCommand']();},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x6b3)]=function(){const _0x4ded92=_0x5e79d1,_0x3a1fec=this[_0x4ded92(0x380)][_0x4ded92(0x492)]();for(const _0x23d480 of _0x3a1fec){this[_0x4ded92(0xb9b)](_0x23d480);}},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xb9b)]=function(_0x4c02f7){const _0x49ce0a=_0x5e79d1;let _0x1ba029=$dataSystem[_0x49ce0a(0x492)][_0x4c02f7];if(!_0x1ba029)return;let _0x27afba=_0x1ba029;const _0x1eefb7=this[_0x49ce0a(0x72f)]();if(_0x1eefb7===_0x49ce0a(0x9da))_0x27afba=_0x27afba[_0x49ce0a(0x4f6)](/\x1I\[(\d+)\]/gi,''),_0x27afba=_0x27afba[_0x49ce0a(0x4f6)](/\\I\[(\d+)\]/gi,'');else{if(!_0x1ba029[_0x49ce0a(0xcd4)](/\\I\[(\d+)\]/i)){const _0x4379b0=Imported[_0x49ce0a(0xa5b)]?VisuMZ[_0x49ce0a(0x375)]['Settings'][_0x49ce0a(0x5ed)]:VisuMZ[_0x49ce0a(0x57e)][_0x49ce0a(0xc89)]['ActorCmd'],_0x514191=$dataSystem['magicSkills'][_0x49ce0a(0x9fb)](_0x4c02f7),_0x33c96b=_0x514191?_0x4379b0[_0x49ce0a(0x429)]:_0x4379b0[_0x49ce0a(0x70a)];_0x27afba=_0x49ce0a(0x21c)[_0x49ce0a(0x2a0)](_0x33c96b,_0x1ba029);}}this['addCommand'](_0x27afba,_0x49ce0a(0x202),!![],_0x4c02f7);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x47f)]=function(){const _0xf6f38=_0x5e79d1,_0x3a80b0=this[_0xf6f38(0x380)][_0xf6f38(0x492)](),_0x2c9c24=this[_0xf6f38(0x380)][_0xf6f38(0x60a)]();for(const _0x27f47d of _0x2c9c24){if(!_0x27f47d)continue;if(Imported[_0xf6f38(0xa5b)]){if(this['noSimilarSTypes'](_0x27f47d))continue;if(this[_0xf6f38(0x733)](_0x27f47d))continue;}else{if(!_0x3a80b0['includes'](_0x27f47d['stypeId']))continue;}this[_0xf6f38(0x598)](_0x27f47d);}},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xbd0)]=function(_0x433043){const _0x5b6934=_0x5e79d1,_0x20eb1f=this[_0x5b6934(0x380)]['skillTypes'](),_0x4b3ad1=_0x20eb1f[_0x5b6934(0x984)](_0x5664dc=>DataManager[_0x5b6934(0xb0e)](_0x433043)['includes'](_0x5664dc));return _0x4b3ad1[_0x5b6934(0xc35)]<=0x0;},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x733)]=function(_0x370232){const _0x27dcbe=_0x5e79d1;if(Imported['VisuMZ_1_SkillsStatesCore']){if(VisuMZ['SkillsStatesCore']['version']>=1.24){if(this['_actor']){if(!VisuMZ[_0x27dcbe(0x375)][_0x27dcbe(0x532)](this[_0x27dcbe(0x380)],_0x370232))return!![];if(!VisuMZ[_0x27dcbe(0x375)][_0x27dcbe(0x6a9)](this[_0x27dcbe(0x380)],_0x370232))return!![];if(!VisuMZ[_0x27dcbe(0x375)][_0x27dcbe(0x308)](this[_0x27dcbe(0x380)],_0x370232))return!![];}}else{if(!Window_SkillList['prototype'][_0x27dcbe(0x546)][_0x27dcbe(0x695)](this,_0x370232))return!![];if(!Window_SkillList[_0x27dcbe(0x3a9)][_0x27dcbe(0x9c8)]['call'](this,_0x370232))return!![];if(!Window_SkillList['prototype'][_0x27dcbe(0xaad)][_0x27dcbe(0x695)](this,_0x370232))return!![];}}return![];},Window_ActorCommand['prototype'][_0x5e79d1(0x598)]=function(_0x20b370){const _0x598628=_0x5e79d1;if(!_0x20b370)return;if(!this['canAddSkillCommand'](_0x20b370))return;const _0x31503d=this[_0x598628(0x72f)](),_0x165820=DataManager[_0x598628(0x33e)](_0x20b370),_0x1bd57a=DataManager[_0x598628(0x601)](_0x20b370),_0x169e04=_0x31503d==='text'?_0x165820:'\x5cI[%1]%2'[_0x598628(0x2a0)](_0x1bd57a,_0x165820),_0x25b6be=this[_0x598628(0x380)][_0x598628(0x344)](_0x20b370);this[_0x598628(0x6a4)](_0x169e04,_0x598628(0x2dc),_0x25b6be,_0x20b370['id']);},Window_ActorCommand['prototype'][_0x5e79d1(0x8b6)]=function(_0x386de1){const _0x237b58=_0x5e79d1,_0x2e0720=_0x386de1[_0x237b58(0x85e)];if(_0x2e0720['match'](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x237b58(0x380)]['isLearnedSkill'](_0x386de1['id']))return![];}if(_0x2e0720['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x237b58(0x380)]['hasSkill'](_0x386de1['id']))return![];}const _0x2fecb9=VisuMZ[_0x237b58(0x57e)][_0x237b58(0x402)](_0x386de1,'CommandVisible');if(VisuMZ[_0x237b58(0x57e)]['JS'][_0x2fecb9]){if(!VisuMZ[_0x237b58(0x57e)]['JS'][_0x2fecb9][_0x237b58(0x695)](this,this[_0x237b58(0x380)],_0x386de1))return![];}return VisuMZ[_0x237b58(0x57e)][_0x237b58(0x331)](_0x386de1);},VisuMZ[_0x5e79d1(0x57e)]['CheckSkillCommandShowSwitches']=function(_0x498ebd){const _0x2bb39f=_0x5e79d1,_0x5239e4=_0x498ebd[_0x2bb39f(0x85e)];if(_0x5239e4[_0x2bb39f(0xcd4)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x338040=JSON[_0x2bb39f(0x250)]('['+RegExp['$1'][_0x2bb39f(0xcd4)](/\d+/g)+']');for(const _0x4ac08a of _0x338040){if(!$gameSwitches[_0x2bb39f(0x992)](_0x4ac08a))return![];}return!![];}if(_0x5239e4[_0x2bb39f(0xcd4)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x3e8776=JSON[_0x2bb39f(0x250)]('['+RegExp['$1'][_0x2bb39f(0xcd4)](/\d+/g)+']');for(const _0x5a92c5 of _0x3e8776){if(!$gameSwitches[_0x2bb39f(0x992)](_0x5a92c5))return![];}return!![];}if(_0x5239e4['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x19d1f4=JSON[_0x2bb39f(0x250)]('['+RegExp['$1'][_0x2bb39f(0xcd4)](/\d+/g)+']');for(const _0x3a38c3 of _0x19d1f4){if($gameSwitches['value'](_0x3a38c3))return!![];}return![];}if(_0x5239e4[_0x2bb39f(0xcd4)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x8a7082=JSON[_0x2bb39f(0x250)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0xa76037 of _0x8a7082){if(!$gameSwitches[_0x2bb39f(0x992)](_0xa76037))return!![];}return![];}if(_0x5239e4[_0x2bb39f(0xcd4)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x410ca4=JSON['parse']('['+RegExp['$1'][_0x2bb39f(0xcd4)](/\d+/g)+']');for(const _0x1d2f47 of _0x410ca4){if(!$gameSwitches[_0x2bb39f(0x992)](_0x1d2f47))return!![];}return![];}if(_0x5239e4['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x18980=JSON[_0x2bb39f(0x250)]('['+RegExp['$1'][_0x2bb39f(0xcd4)](/\d+/g)+']');for(const _0x44f137 of _0x18980){if($gameSwitches['value'](_0x44f137))return![];}return!![];}return!![];},Window_ActorCommand['prototype'][_0x5e79d1(0x410)]=function(){const _0xdd9423=_0x5e79d1,_0x5407db=this[_0xdd9423(0x72f)](),_0x2b273c=VisuMZ['BattleCore'][_0xdd9423(0xc89)]['InBattleStatus'][_0xdd9423(0x780)]??0x57,_0x13b6bc=_0x5407db===_0xdd9423(0x9da)?TextManager[_0xdd9423(0x40a)]:_0xdd9423(0x21c)[_0xdd9423(0x2a0)](_0x2b273c,TextManager[_0xdd9423(0x40a)]),_0x100c7a=!![];this[_0xdd9423(0x6a4)](_0x13b6bc,_0xdd9423(0x40a),_0x100c7a);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xa16)]=function(){const _0x17aea5=_0x5e79d1,_0x53046c=this[_0x17aea5(0x72f)](),_0x4886a9=VisuMZ[_0x17aea5(0x57e)][_0x17aea5(0xc89)]['PartyCmd']['CmdIconEscape'],_0x277d58=_0x53046c===_0x17aea5(0x9da)?TextManager[_0x17aea5(0x586)]:_0x17aea5(0x21c)[_0x17aea5(0x2a0)](_0x4886a9,TextManager['escape']),_0x428500=this[_0x17aea5(0xaf4)]();this[_0x17aea5(0x6a4)](_0x277d58,_0x17aea5(0x586),_0x428500);},Window_ActorCommand[_0x5e79d1(0x3a9)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_ActorCommand['prototype'][_0x5e79d1(0x3b3)]=function(){const _0x11981a=_0x5e79d1,_0x3af7a0=this[_0x11981a(0x72f)](),_0x28fc74=VisuMZ['BattleCore']['Settings'][_0x11981a(0xb54)][_0x11981a(0x4f8)],_0x2c27bc=_0x3af7a0===_0x11981a(0x9da)?TextManager[_0x11981a(0xc27)]:_0x11981a(0x21c)[_0x11981a(0x2a0)](_0x28fc74,TextManager[_0x11981a(0xc27)]),_0x5a206e=this[_0x11981a(0x3b8)]();this[_0x11981a(0x6a4)](_0x2c27bc,_0x11981a(0xc27),_0x5a206e);},Window_ActorCommand['prototype'][_0x5e79d1(0x3b8)]=function(){return!![];},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xb15)]=function(){const _0x2c64cb=_0x5e79d1;return VisuMZ[_0x2c64cb(0x57e)]['Settings'][_0x2c64cb(0xbfc)][_0x2c64cb(0xc8d)];},Window_ActorCommand['prototype'][_0x5e79d1(0x78b)]=function(_0x17158d){const _0x35456c=_0x5e79d1,_0x3543ec=this[_0x35456c(0x381)](_0x17158d);if(_0x3543ec==='iconText')this[_0x35456c(0x9fc)](_0x17158d);else _0x3543ec===_0x35456c(0x3f8)?this[_0x35456c(0x6a1)](_0x17158d):Window_Command['prototype'][_0x35456c(0x78b)]['call'](this,_0x17158d);this[_0x35456c(0x2fd)](_0x17158d);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x72f)]=function(){const _0x585c8c=_0x5e79d1;return VisuMZ[_0x585c8c(0x57e)][_0x585c8c(0xc89)][_0x585c8c(0xbfc)][_0x585c8c(0x4ea)];},Window_ActorCommand['prototype'][_0x5e79d1(0x381)]=function(_0xa025b7){const _0x2c4243=_0x5e79d1;if(_0xa025b7<0x0)return _0x2c4243(0x9da);const _0x3436b2=this[_0x2c4243(0x72f)]();if(_0x3436b2!=='auto')return _0x3436b2;else{if(this[_0x2c4243(0xb59)]()>0x0){const _0x5f0527=this[_0x2c4243(0xb08)](_0xa025b7);if(_0x5f0527[_0x2c4243(0xcd4)](/\\I\[(\d+)\]/i)){const _0x1d40c8=this[_0x2c4243(0x906)](_0xa025b7),_0x11771d=this[_0x2c4243(0x55c)](_0x5f0527)[_0x2c4243(0xa0f)];return _0x11771d<=_0x1d40c8[_0x2c4243(0xa0f)]?'iconText':_0x2c4243(0x3f8);}}}return _0x2c4243(0x9da);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x9fc)]=function(_0xc60c79){const _0x46857d=_0x5e79d1,_0x42a8cd=this['itemLineRect'](_0xc60c79),_0x263a75=this[_0x46857d(0xb08)](_0xc60c79),_0xde85e8=this[_0x46857d(0x55c)](_0x263a75)[_0x46857d(0xa0f)];this[_0x46857d(0xc44)](this[_0x46857d(0xbf1)](_0xc60c79));const _0x3cb7e4=this[_0x46857d(0xb15)]();if(_0x3cb7e4==='right')this[_0x46857d(0x567)](_0x263a75,_0x42a8cd['x']+_0x42a8cd['width']-_0xde85e8,_0x42a8cd['y'],_0xde85e8);else{if(_0x3cb7e4===_0x46857d(0x2ad)){const _0x4a2497=_0x42a8cd['x']+Math[_0x46857d(0x48d)]((_0x42a8cd[_0x46857d(0xa0f)]-_0xde85e8)/0x2);this[_0x46857d(0x567)](_0x263a75,_0x4a2497,_0x42a8cd['y'],_0xde85e8);}else this[_0x46857d(0x567)](_0x263a75,_0x42a8cd['x'],_0x42a8cd['y'],_0xde85e8);}},Window_ActorCommand['prototype'][_0x5e79d1(0x6a1)]=function(_0x2c78ab){const _0xb6502d=_0x5e79d1;this[_0xb6502d(0xb08)](_0x2c78ab)['match'](/\\I\[(\d+)\]/i);const _0x547fa7=Number(RegExp['$1'])||0x0,_0x2db910=this[_0xb6502d(0x906)](_0x2c78ab),_0x37f5df=_0x2db910['x']+Math[_0xb6502d(0x48d)]((_0x2db910[_0xb6502d(0xa0f)]-ImageManager[_0xb6502d(0x504)])/0x2),_0x567dac=_0x2db910['y']+(_0x2db910[_0xb6502d(0x912)]-ImageManager[_0xb6502d(0x835)])/0x2;this[_0xb6502d(0x7f0)](_0x547fa7,_0x37f5df,_0x567dac);},Window_ActorCommand['prototype']['drawSingleSkillCost']=function(_0xdfc73e){const _0x55bb53=_0x5e79d1;if(!(VisuMZ['BattleCore'][_0x55bb53(0xc89)][_0x55bb53(0xbfc)][_0x55bb53(0x3e8)]??!![]))return;const _0x3e563f=this[_0x55bb53(0x5cf)](_0xdfc73e);if(![_0x55bb53(0x5e0),_0x55bb53(0x725),_0x55bb53(0x2dc)][_0x55bb53(0x9fb)](_0x3e563f))return;const _0x581dbf=this[_0x55bb53(0x906)](_0xdfc73e);let _0xda2ea8=null;if(_0x3e563f===_0x55bb53(0x5e0))_0xda2ea8=$dataSkills[this[_0x55bb53(0x380)]['attackSkillId']()];else _0x3e563f===_0x55bb53(0x725)?_0xda2ea8=$dataSkills[this[_0x55bb53(0x380)][_0x55bb53(0xb65)]()]:_0xda2ea8=$dataSkills[this[_0x55bb53(0xa1a)][_0xdfc73e][_0x55bb53(0x777)]];this[_0x55bb53(0x7f3)](this[_0x55bb53(0x380)],_0xda2ea8,_0x581dbf['x'],_0x581dbf['y'],_0x581dbf[_0x55bb53(0xa0f)]);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x7f3)]=function(_0x579ad7,_0x24bf8b,_0x316654,_0x3662a4,_0x4f11c5){const _0x288671=_0x5e79d1;if(!_0x24bf8b)return;Imported[_0x288671(0xa5b)]?Window_Command[_0x288671(0x3a9)][_0x288671(0x7f3)]['call'](this,_0x579ad7,_0x24bf8b,_0x316654,_0x3662a4,_0x4f11c5):Window_SkillList[_0x288671(0x3a9)][_0x288671(0x7f3)][_0x288671(0x695)](this,_0x24bf8b,_0x316654,_0x3662a4,_0x4f11c5);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7b)]=function(){},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x838)]=function(){const _0x55de72=_0x5e79d1;Window_Command['prototype'][_0x55de72(0x838)][_0x55de72(0x695)](this);const _0x2017fa=this['battleLayoutStyle']();_0x2017fa===_0x55de72(0x758)&&this[_0x55de72(0x8d8)]();},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0xca9)]=function(){const _0x3c9743=_0x5e79d1;if(this[_0x3c9743(0x747)])return this[_0x3c9743(0x747)];return this[_0x3c9743(0x747)]=SceneManager[_0x3c9743(0xc59)][_0x3c9743(0xca9)](),this[_0x3c9743(0x747)];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x627)]=Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x45d)],Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x45d)]=function(_0x4bcd62){const _0x990a6d=_0x5e79d1,_0x1edebf=this[_0x990a6d(0xca9)]();if(_0x4bcd62&&['xp',_0x990a6d(0x2af)][_0x990a6d(0x9fb)](_0x1edebf))this[_0x990a6d(0xa24)](_0x4bcd62);else _0x4bcd62&&[_0x990a6d(0x758)][_0x990a6d(0x9fb)](_0x1edebf)&&(this[_0x990a6d(0x571)](_0x4bcd62),this[_0x990a6d(0x8d8)]());VisuMZ['BattleCore']['Window_ActorCommand_setup'][_0x990a6d(0x695)](this,_0x4bcd62),_0x4bcd62&&$gameTroop[_0x990a6d(0x43a)]()['length']>0x0&&_0x4bcd62[_0x990a6d(0x949)]()&&_0x4bcd62[_0x990a6d(0x949)]()[_0x990a6d(0xb39)]();},Window_ActorCommand[_0x5e79d1(0x3a9)]['resizeWindowXPStyle']=function(_0x4c3c2f){const _0x51bb51=_0x5e79d1,_0xa8c9be=VisuMZ[_0x51bb51(0x57e)][_0x51bb51(0xc89)]['BattleLayout'][_0x51bb51(0x5f2)],_0x3649ba=Math['round'](Graphics['boxWidth']/0x3),_0x2524bb=Math[_0x51bb51(0xa7d)](Graphics['boxWidth']/$gameParty[_0x51bb51(0xb9d)]()[_0x51bb51(0xc35)]),_0x4bd8c9=Math['max'](Math[_0x51bb51(0x52b)](_0x3649ba,_0x2524bb),_0xa8c9be),_0x13840b=this['fittingHeight'](VisuMZ[_0x51bb51(0x57e)]['Settings'][_0x51bb51(0x39d)][_0x51bb51(0x404)]),_0x44b88b=Math[_0x51bb51(0x48d)]((Graphics[_0x51bb51(0x486)]-Graphics[_0x51bb51(0xa0f)])/0x2),_0x212bc7=Graphics[_0x51bb51(0x486)]-_0x44b88b,_0x202a63=(Math[_0x51bb51(0xa7d)](_0x2524bb*_0x4c3c2f[_0x51bb51(0x972)]())+Math[_0x51bb51(0xa7d)]((_0x2524bb-_0x4bd8c9)/0x2))[_0x51bb51(0x2a1)](_0x44b88b,_0x212bc7-_0x4bd8c9),_0x931528=Math[_0x51bb51(0xa7d)](SceneManager[_0x51bb51(0xc59)][_0x51bb51(0x2cf)]['y']-_0x13840b);this[_0x51bb51(0x428)](_0x202a63,_0x931528,_0x4bd8c9,_0x13840b),this[_0x51bb51(0x386)](),this['setBackgroundType'](0x1);},Window_ActorCommand[_0x5e79d1(0x3a9)][_0x5e79d1(0x571)]=function(_0x591062){const _0xec3488=_0x5e79d1,_0x8eff6f=SceneManager['_scene'][_0xec3488(0x84e)]();this[_0xec3488(0x428)](_0x8eff6f['x'],_0x8eff6f['y'],_0x8eff6f[_0xec3488(0xa0f)],_0x8eff6f['height']),this[_0xec3488(0x386)](),this[_0xec3488(0x1ff)](0x0);},Window_ActorCommand['prototype']['refreshDimmerBitmap']=function(){const _0xac6f86=_0x5e79d1;if(this[_0xac6f86(0x624)]){const _0x1e4377=this[_0xac6f86(0x624)]['bitmap'],_0x5598cf=this['width']-0x8,_0x285227=this['height'],_0x56a155=this['padding'],_0x49d152=ColorManager[_0xac6f86(0x5f6)](),_0x305c0c=ColorManager['dimColor2']();this[_0xac6f86(0x624)]['x']=0x4,_0x1e4377[_0xac6f86(0x753)](_0x5598cf,_0x285227),_0x1e4377[_0xac6f86(0x576)](0x0,0x0,_0x5598cf,_0x56a155,_0x305c0c,_0x49d152,!![]),_0x1e4377[_0xac6f86(0xa9f)](0x0,_0x56a155,_0x5598cf,_0x285227-_0x56a155*0x2,_0x49d152),_0x1e4377[_0xac6f86(0x576)](0x0,_0x285227-_0x56a155,_0x5598cf,_0x56a155,_0x49d152,_0x305c0c,!![]),this[_0xac6f86(0x624)][_0xac6f86(0xbfb)](0x0,0x0,_0x5598cf,_0x285227);}},Window_ActorCommand['prototype'][_0x5e79d1(0x1f4)]=function(){const _0x302cca=_0x5e79d1;if(!this['_actor'])return;const _0x31bac8=VisuMZ[_0x302cca(0x57e)][_0x302cca(0xc89)][_0x302cca(0xbfc)],_0x568a8f=this[_0x302cca(0x956)]();switch(_0x568a8f){case _0x302cca(0x5e0):this['setHelpWindowItem']($dataSkills[this['_actor']['attackSkillId']()]);break;case _0x302cca(0x725):this[_0x302cca(0x7a8)]($dataSkills[this[_0x302cca(0x380)][_0x302cca(0xb65)]()]);break;case _0x302cca(0x202):const _0x554d89=_0x31bac8[_0x302cca(0xa6b)],_0x4a5ada=_0x554d89['format']($dataSystem['skillTypes'][this['currentExt']()]);this['_helpWindow'][_0x302cca(0x6c9)](_0x4a5ada);break;case _0x302cca(0x2dc):this[_0x302cca(0x7a8)]($dataSkills[this[_0x302cca(0xc67)]()]);break;case _0x302cca(0x990):this[_0x302cca(0x66b)][_0x302cca(0x6c9)](_0x31bac8['HelpItem']);break;case _0x302cca(0x586):this[_0x302cca(0x66b)][_0x302cca(0x6c9)](_0x31bac8['HelpEscape']);break;case _0x302cca(0xc27):this[_0x302cca(0x66b)]['setText'](_0x31bac8[_0x302cca(0x7b7)]);break;case _0x302cca(0x40a):this[_0x302cca(0x66b)]['setText'](Window_InBattleStatus['SETTINGS'][_0x302cca(0x389)]);break;default:this[_0x302cca(0x66b)][_0x302cca(0x6c9)]('');break;}},Window_ActorCommand[_0x5e79d1(0x3a9)]['selectLast']=function(){const _0x4afaef=_0x5e79d1;this['forceSelect'](0x0);if(this[_0x4afaef(0x380)]&&ConfigManager[_0x4afaef(0xbbb)]){const _0x27056c=this[_0x4afaef(0x380)][_0x4afaef(0x295)]();this[_0x4afaef(0x82f)](_0x27056c);if(_0x27056c===_0x4afaef(0x202)){const _0x1c77c3=this[_0x4afaef(0x380)][_0x4afaef(0x80b)]();if(_0x1c77c3){const _0x4f7ad3=this[_0x4afaef(0x5d4)](_0x4afaef(0x202),_0x1c77c3['stypeId']);this[_0x4afaef(0x830)](_0x4f7ad3||0x0);}}else{if(_0x27056c===_0x4afaef(0x2dc)){const _0x5e237b=this['_actor'][_0x4afaef(0x80b)]();if(_0x5e237b){const _0x1a0c63=this[_0x4afaef(0x5d4)](_0x4afaef(0x2dc),_0x5e237b['id']);this[_0x4afaef(0x830)](_0x1a0c63||0x0);}}}}},Window_ActorCommand[_0x5e79d1(0x3a9)]['findSymbolExt']=function(_0x1124f,_0x388b28){const _0x1993f3=_0x5e79d1;return this[_0x1993f3(0xa1a)]['findIndex'](_0x2600ec=>_0x2600ec[_0x1993f3(0xc16)]===_0x1124f&&_0x2600ec[_0x1993f3(0x777)]===_0x388b28);},VisuMZ['BattleCore'][_0x5e79d1(0x668)]=Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)],Window_BattleStatus[_0x5e79d1(0x3a9)]['initialize']=function(_0x3c421c){const _0x147277=_0x5e79d1;VisuMZ[_0x147277(0x57e)][_0x147277(0x668)][_0x147277(0x695)](this,_0x3c421c),this[_0x147277(0xbce)](),this['createAttachmentSprites']();},Window_BattleStatus['prototype']['battleLayoutStyle']=function(){const _0x473383=_0x5e79d1;if(this['_battleLayoutStyle'])return this[_0x473383(0x747)];return this[_0x473383(0x747)]=SceneManager['_scene'][_0x473383(0xca9)](),this[_0x473383(0x747)];},Window_BattleStatus['prototype'][_0x5e79d1(0xbce)]=function(){const _0x35c80c=_0x5e79d1;this[_0x35c80c(0x94a)]=this[_0x35c80c(0xb80)]();const _0x3622fe=VisuMZ[_0x35c80c(0x57e)][_0x35c80c(0xc89)][_0x35c80c(0x39d)];_0x3622fe[_0x35c80c(0x7fe)]&&(this['opacity']=0x0);},Window_BattleStatus['prototype'][_0x5e79d1(0xb80)]=function(){const _0x2e84b8=_0x5e79d1,_0x1b3bb1=VisuMZ[_0x2e84b8(0x57e)][_0x2e84b8(0xc89)][_0x2e84b8(0x39d)];if(_0x1b3bb1[_0x2e84b8(0xafb)])return!![];const _0x23f23f=this[_0x2e84b8(0xca9)]();switch(_0x23f23f){case'list':case _0x2e84b8(0x758):return!![];break;case _0x2e84b8(0x5ab):case'xp':case _0x2e84b8(0x2af):default:return![];break;}},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x1d7)]=function(){const _0x390f66=_0x5e79d1;return this[_0x390f66(0xb80)]()?0x0:0xa;},Window_BattleStatus['prototype']['maxCols']=function(){const _0x18af07=_0x5e79d1,_0x3f3de4=this[_0x18af07(0xca9)]();switch(_0x3f3de4){case _0x18af07(0x69f):return 0x1;break;case'xp':case _0x18af07(0x2af):return $gameParty[_0x18af07(0xb9d)]()[_0x18af07(0xc35)];break;case _0x18af07(0x5ab):default:return $gameParty[_0x18af07(0x563)]();break;}},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xc36)]=function(){const _0x343ab5=_0x5e79d1,_0x199ff3=this[_0x343ab5(0xca9)]();switch(_0x199ff3){case'list':return Window_StatusBase[_0x343ab5(0x3a9)]['itemHeight'][_0x343ab5(0x695)](this);break;case _0x343ab5(0x5ab):case'xp':case _0x343ab5(0x2af):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x2b0)]=function(){const _0x2be8ab=_0x5e79d1,_0x461268=this['battleLayoutStyle']();switch(_0x461268){case _0x2be8ab(0x69f):return Window_StatusBase[_0x2be8ab(0x3a9)][_0x2be8ab(0x2b0)][_0x2be8ab(0x695)](this);break;case _0x2be8ab(0x5ab):case'xp':case _0x2be8ab(0x2af):default:return 0x0;break;}},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x791)]=function(){const _0x3241a3=_0x5e79d1;this['isFrameVisible']()?Window_StatusBase[_0x3241a3(0x3a9)][_0x3241a3(0x791)]['call'](this):this['padding']=0x8;},Window_BattleStatus['prototype'][_0x5e79d1(0x685)]=function(){const _0x24b4fb=_0x5e79d1,_0x1b016c=VisuMZ['BattleCore'][_0x24b4fb(0xc89)][_0x24b4fb(0x39d)];_0x1b016c[_0x24b4fb(0xafb)]?this['windowskin']=ImageManager[_0x24b4fb(0xbe6)](_0x1b016c['StatusWindowSkinFilename']):Window_StatusBase['prototype']['loadWindowskin']['call'](this);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xbad)]=function(_0x4b7dd0){const _0x315919=_0x5e79d1,_0x1c1143=VisuMZ[_0x315919(0x57e)]['Settings'][_0x315919(0x39d)];if(_0x1c1143[_0x315919(0x4d8)])return;Window_StatusBase['prototype']['drawItemBackground'][_0x315919(0x695)](this,_0x4b7dd0);},Window_BattleStatus['prototype'][_0x5e79d1(0x269)]=function(){const _0x512215=_0x5e79d1;this[_0x512215(0x94f)]=!![];},Window_BattleStatus['prototype'][_0x5e79d1(0x3f1)]=function(){const _0x58f6f7=_0x5e79d1;Window_StatusBase['prototype'][_0x58f6f7(0x3f1)][_0x58f6f7(0x695)](this),this['updateRefresh'](),this['updateEffectContainers']();if(this['battleLayoutStyle']()===_0x58f6f7(0x758))this[_0x58f6f7(0x7b6)]();},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7d)]=function(){const _0x24427c=_0x5e79d1;if($gameTemp[_0x24427c(0xa20)]())this[_0x24427c(0xc2b)](),this[_0x24427c(0x94f)]=![],$gameTemp[_0x24427c(0xbf9)]();else this[_0x24427c(0x94f)]&&(this['_requestRefresh']=![],this['refresh'](),this[_0x24427c(0x718)]());},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xbb5)]=function(){const _0x7cf891=_0x5e79d1;Window_StatusBase[_0x7cf891(0x3a9)]['show']['call'](this);if(!$gameSystem[_0x7cf891(0x9a5)]())this[_0x7cf891(0x562)]();},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7b)]=function(){const _0x50c9ee=_0x5e79d1;if(this['constructor']===Window_BattleStatus)return;Window_StatusBase[_0x50c9ee(0x3a9)][_0x50c9ee(0xb7b)][_0x50c9ee(0x695)](this);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x935)]=function(_0x4283e1){const _0x1dcc4b=_0x5e79d1,_0x436d2c=this[_0x1dcc4b(0xca9)]();switch(_0x436d2c){case'xp':case _0x1dcc4b(0x2af):break;case _0x1dcc4b(0x5ab):case _0x1dcc4b(0x69f):case _0x1dcc4b(0x758):default:return Window_StatusBase[_0x1dcc4b(0x3a9)]['drawBackgroundRect'][_0x1dcc4b(0x695)](this,_0x4283e1);break;}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x511)]=Window_BattleStatus[_0x5e79d1(0x3a9)]['drawItemImage'],Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x8fd)]=function(_0x48011e){const _0x4716f3=_0x5e79d1,_0x3380ea=this[_0x4716f3(0xca9)]();switch(_0x3380ea){case _0x4716f3(0x69f):this[_0x4716f3(0x572)](_0x48011e);break;case'xp':this['drawItemImageXPStyle'](_0x48011e);break;case'portrait':this['drawItemImagePortraitStyle'](_0x48011e);break;case _0x4716f3(0x5ab):case _0x4716f3(0x758):default:VisuMZ[_0x4716f3(0x57e)]['Window_BattleStatus_drawItemImage'][_0x4716f3(0x695)](this,_0x48011e);break;}},Window_BattleStatus['prototype'][_0x5e79d1(0xa70)]=function(_0xdc19ca){const _0x5d63e3=_0x5e79d1,_0x6b01fb=this[_0x5d63e3(0xca9)]();if(!$gameSystem[_0x5d63e3(0x9a5)]())this[_0x5d63e3(0x752)](_0xdc19ca);switch(_0x6b01fb){case _0x5d63e3(0x69f):this[_0x5d63e3(0xcc0)](_0xdc19ca);break;case'xp':case _0x5d63e3(0x2af):case'default':case _0x5d63e3(0x758):default:this[_0x5d63e3(0x37a)](_0xdc19ca);break;}},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xa83)]=function(){const _0x211918=_0x5e79d1,_0x297908=this[_0x211918(0xca9)]();if(['xp'][_0x211918(0x9fb)](_0x297908)&&!$gameSystem[_0x211918(0x9a5)]()){this[_0x211918(0x5d1)](0x0,0x0,0x0,0x0);return;}Window_StatusBase['prototype'][_0x211918(0xa83)][_0x211918(0x695)](this);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x752)]=function(_0x478ff0){const _0x549416=_0x5e79d1,_0xcf930a=this[_0x549416(0x5a0)](_0x478ff0)[_0x549416(0x949)]();if(!_0xcf930a)return;const _0x79cff0=this[_0x549416(0xca9)](),_0x4fcb6c=this[_0x549416(0x5e2)](_0x478ff0);let _0x39e00b=Math[_0x549416(0xa7d)](_0x4fcb6c['x']+_0x4fcb6c['width']/0x2)+this[_0x549416(0x749)];[_0x549416(0x69f)][_0x549416(0x9fb)](_0x79cff0)&&(_0x39e00b=_0x4fcb6c[_0x549416(0xa0f)]/$gameParty[_0x549416(0xb9d)]()['length'],_0x39e00b*=_0x478ff0,_0x39e00b+=_0x4fcb6c[_0x549416(0xa0f)]/$gameParty[_0x549416(0xb9d)]()[_0x549416(0xc35)]/0x2);let _0x236188=Math[_0x549416(0xa7d)](this[_0x549416(0x734)](_0x478ff0,_0xcf930a,_0x4fcb6c));_0xcf930a[_0x549416(0x977)](_0x39e00b,_0x236188),this[_0x549416(0x7e4)](_0xcf930a,0x1),_0xcf930a[_0x549416(0xbb5)](),this[_0x549416(0xa26)](),this[_0x549416(0x718)]();},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x734)]=function(_0x1c74ae,_0x1410f5,_0x114f35){const _0x32a70c=_0x5e79d1,_0x36bc4a=VisuMZ[_0x32a70c(0x57e)][_0x32a70c(0xc89)]['BattleLayout'],_0x56f430=this['battleLayoutStyle']();if(_0x56f430==='xp'){const _0x44b20b=_0x36bc4a[_0x32a70c(0x1f3)];switch(_0x44b20b[_0x32a70c(0xbee)]()[_0x32a70c(0xacc)]()){case'bottom':return _0x114f35[_0x32a70c(0x912)]-_0x1410f5[_0x32a70c(0x699)][_0x32a70c(0x912)]/0x4;break;case'center':const _0x472eef=_0x36bc4a['XPActorDefaultHeight'];return(_0x114f35[_0x32a70c(0x912)]+(_0x1410f5[_0x32a70c(0x912)]||_0x472eef))/0x2;break;case'top':return 0x0;case _0x32a70c(0x66e):default:return this[_0x32a70c(0xae6)](_0x114f35);break;}}else{if(_0x56f430===_0x32a70c(0x2af)){}}return _0x1410f5[_0x32a70c(0x912)];},Sprite_Name[_0x5e79d1(0x3a9)][_0x5e79d1(0x391)]=function(){return 0x24;},Sprite_Name['prototype'][_0x5e79d1(0x7a2)]=function(){const _0x148509=_0x5e79d1,_0x32ecc0=this[_0x148509(0x66e)](),_0x494278=this[_0x148509(0x7e8)](),_0x26c4a8=this['bitmapHeight']();this[_0x148509(0x25d)](),this[_0x148509(0xc11)][_0x148509(0x438)](),this[_0x148509(0xc11)][_0x148509(0x954)](_0x32ecc0,0x4,0x0,_0x494278,_0x26c4a8,'left');},Bitmap[_0x5e79d1(0x3a9)][_0x5e79d1(0x954)]=function(_0x26a2f7,_0x3f2b10,_0x110289,_0x3d335b,_0x1fc086,_0x214eec){const _0x1a66a8=_0x5e79d1;TextManager[_0x1a66a8(0x2e2)]&&(_0x26a2f7=TextManager['parseLocalizedText'](_0x26a2f7));const _0x5c6e8f=this['context'],_0x5288cf=_0x5c6e8f[_0x1a66a8(0xc7f)];_0x3d335b=_0x3d335b||0xffffffff;let _0x461ebb=_0x3f2b10,_0x143a17=Math['round'](_0x110289+0x18/0x2+this[_0x1a66a8(0x8ba)]*0.35);_0x214eec===_0x1a66a8(0x2ad)&&(_0x461ebb+=_0x3d335b/0x2),_0x214eec===_0x1a66a8(0x2e6)&&(_0x461ebb+=_0x3d335b),_0x5c6e8f[_0x1a66a8(0x879)](),_0x5c6e8f[_0x1a66a8(0x5ca)]=this['_makeFontNameText'](),_0x5c6e8f['textAlign']=_0x214eec,_0x5c6e8f[_0x1a66a8(0x809)]=_0x1a66a8(0x936),_0x5c6e8f[_0x1a66a8(0xc7f)]=0x1,this['_drawTextOutline'](_0x26a2f7,_0x461ebb,_0x143a17,_0x3d335b),_0x5c6e8f['globalAlpha']=_0x5288cf,this[_0x1a66a8(0x2d2)](_0x26a2f7,_0x461ebb,_0x143a17,_0x3d335b),_0x5c6e8f[_0x1a66a8(0x756)](),this[_0x1a66a8(0x6e9)][_0x1a66a8(0x3f1)]();},Window_BattleStatus[_0x5e79d1(0x3a9)]['nameY']=function(_0x26caeb){const _0x12f574=_0x5e79d1;return this[_0x12f574(0x680)](_0x26caeb)-this[_0x12f574(0x335)]();},Window_BattleStatus['prototype'][_0x5e79d1(0x572)]=function(_0x4fccb8){const _0x49c007=_0x5e79d1;if(!VisuMZ['BattleCore'][_0x49c007(0xc89)][_0x49c007(0x39d)][_0x49c007(0x444)])return;const _0x47bd8a=this[_0x49c007(0x5a0)](_0x4fccb8),_0x4e62b1=this[_0x49c007(0x5e2)](_0x4fccb8);_0x4e62b1[_0x49c007(0xa0f)]=ImageManager[_0x49c007(0x95d)],_0x4e62b1[_0x49c007(0x912)]-=0x2,this[_0x49c007(0xb6f)](_0x47bd8a,_0x4e62b1['x']+0x1,_0x4e62b1['y']+0x1,_0x4e62b1[_0x49c007(0xa0f)],_0x4e62b1[_0x49c007(0x912)]);},Window_BattleStatus['prototype'][_0x5e79d1(0xcc0)]=function(_0x516f79){const _0x191380=_0x5e79d1,_0x478776=VisuMZ['BattleCore'][_0x191380(0xc89)][_0x191380(0x39d)],_0x16bf22=$dataSystem[_0x191380(0x2f6)]?0x4:0x3,_0x375741=_0x16bf22*0x80+(_0x16bf22-0x1)*0x8+0x4,_0x29da94=this['actor'](_0x516f79),_0x55a47e=this[_0x191380(0x5e2)](_0x516f79);let _0x5e141e=_0x55a47e['x']+this[_0x191380(0x749)];_0x478776[_0x191380(0x444)]?_0x5e141e=_0x55a47e['x']+ImageManager['faceWidth']+0x8:_0x5e141e+=ImageManager[_0x191380(0x504)];const _0x46bea1=Math[_0x191380(0xa7d)](Math[_0x191380(0x52b)](_0x55a47e['x']+_0x55a47e[_0x191380(0xa0f)]-_0x375741,_0x5e141e)),_0x583ce3=Math['round'](_0x55a47e['y']+(_0x55a47e[_0x191380(0x912)]-Sprite_Name['prototype']['bitmapHeight']())/0x2),_0xab2467=Math[_0x191380(0xa7d)](_0x46bea1-ImageManager[_0x191380(0x504)]/0x2-0x4),_0x466bc0=Math[_0x191380(0xa7d)](_0x55a47e['y']+(_0x55a47e['height']-ImageManager['iconHeight'])/0x2+ImageManager[_0x191380(0x835)]/0x2);let _0x5f0d8a=_0x46bea1+0x88;const _0x5dcc8e=_0x583ce3;this[_0x191380(0x4d4)](_0x29da94,_0x46bea1-0x4+(_0x478776[_0x191380(0x397)]||0x0),_0x583ce3+(_0x478776[_0x191380(0xa2e)]||0x0)),this[_0x191380(0x8c8)](_0x29da94,_0x46bea1+(_0x478776[_0x191380(0x408)]||0x0),_0x583ce3+(_0x478776['NameOffsetY']||0x0)),this[_0x191380(0x478)](_0x29da94,_0xab2467+(_0x478776[_0x191380(0xc77)]||0x0),_0x466bc0+(_0x478776['StateIconOffsetY']||0x0)),this[_0x191380(0x573)](_0x29da94,'hp',_0x5f0d8a+0x88*0x0+(_0x478776[_0x191380(0x845)]||0x0),_0x5dcc8e+(_0x478776[_0x191380(0x568)]||0x0)),this[_0x191380(0x573)](_0x29da94,'mp',_0x5f0d8a+0x88*0x1+(_0x478776[_0x191380(0xa09)]||0x0),_0x5dcc8e+(_0x478776['MpGaugeOffsetY']||0x0)),$dataSystem[_0x191380(0x2f6)]&&this[_0x191380(0x573)](_0x29da94,'tp',_0x5f0d8a+0x88*0x2+(_0x478776[_0x191380(0x56c)]||0x0),_0x5dcc8e+(_0x478776[_0x191380(0x9a1)]||0x0));},Window_BattleStatus[_0x5e79d1(0x3a9)]['drawItemImageXPStyle']=function(_0x14a1cd){const _0x277cf0=_0x5e79d1;if(!$gameSystem[_0x277cf0(0x9a5)]())return;VisuMZ[_0x277cf0(0x57e)]['Window_BattleStatus_drawItemImage'][_0x277cf0(0x695)](this,_0x14a1cd);},Window_BattleStatus[_0x5e79d1(0x3a9)]['drawItemStatusXPStyle']=function(_0x411324){const _0x495272=_0x5e79d1,_0x4ac11c=VisuMZ[_0x495272(0x57e)]['Settings']['BattleLayout'],_0x356f53=this[_0x495272(0x5a0)](_0x411324),_0x3dc62b=this[_0x495272(0x5e2)](_0x411324),_0x21ed52=Math[_0x495272(0xa7d)](_0x3dc62b['x']+(_0x3dc62b['width']-0x80)/0x2),_0x5c89c0=this[_0x495272(0xae6)](_0x3dc62b);let _0x29c615=_0x21ed52-ImageManager['iconWidth']/0x2-0x4,_0x5376e1=_0x5c89c0+ImageManager[_0x495272(0x835)]/0x2;_0x29c615-ImageManager[_0x495272(0x504)]/0x2<_0x3dc62b['x']&&(_0x29c615=_0x21ed52+ImageManager[_0x495272(0x504)]/0x2-0x4,_0x5376e1=_0x5c89c0-ImageManager[_0x495272(0x835)]/0x2);const _0xce1e0d=_0x21ed52,_0x2a7b50=this[_0x495272(0x680)](_0x3dc62b);this[_0x495272(0x4d4)](_0x356f53,_0x21ed52+(_0x4ac11c[_0x495272(0x397)]||0x0),_0x5c89c0+(_0x4ac11c['TpbGaugeOffsetY']||0x0)),this['placeActorName'](_0x356f53,_0x21ed52+(_0x4ac11c[_0x495272(0x408)]||0x0),_0x5c89c0+(_0x4ac11c[_0x495272(0x920)]||0x0)),this[_0x495272(0x478)](_0x356f53,_0x29c615+(_0x4ac11c['StateIconOffsetX']||0x0),_0x5376e1+(_0x4ac11c[_0x495272(0x38c)]||0x0)),this[_0x495272(0x573)](_0x356f53,'hp',_0xce1e0d+(_0x4ac11c[_0x495272(0x845)]||0x0),_0x2a7b50+(_0x4ac11c[_0x495272(0x568)]||0x0)),this[_0x495272(0x573)](_0x356f53,'mp',_0xce1e0d+(_0x4ac11c[_0x495272(0xa09)]||0x0),_0x2a7b50+this[_0x495272(0x335)]()+(_0x4ac11c[_0x495272(0x958)]||0x0)),$dataSystem[_0x495272(0x2f6)]&&this[_0x495272(0x573)](_0x356f53,'tp',_0xce1e0d+(_0x4ac11c['TpGaugeOffsetX']||0x0),_0x2a7b50+this[_0x495272(0x335)]()*0x2+(_0x4ac11c['TpGaugeOffsetY']||0x0));},Window_BattleStatus['prototype'][_0x5e79d1(0x660)]=function(_0x5d4ae6){const _0x62ad9=_0x5e79d1;if(!VisuMZ['BattleCore'][_0x62ad9(0xc89)][_0x62ad9(0x39d)]['ShowPortraits'])return![];if(_0x5d4ae6[_0x62ad9(0x831)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x5d4ae6[_0x62ad9(0x973)]();},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x547)]=function(){const _0x2fff6b=_0x5e79d1;if(this['actor']()[_0x2fff6b(0x85e)][_0x2fff6b(0xcd4)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x5e79d1(0x3a9)][_0x5e79d1(0x40b)]=function(){const _0x14b3e1=_0x5e79d1;if(this[_0x14b3e1(0x5a0)]()[_0x14b3e1(0x85e)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this['actor']()[_0x14b3e1(0x85e)][_0x14b3e1(0xcd4)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x476)]=function(_0x22bb2b){const _0x566204=_0x5e79d1,_0x22d3a1=this['actor'](_0x22bb2b);if(this[_0x566204(0x660)](_0x22d3a1)){const _0x1e0020='actor%1-portrait'[_0x566204(0x2a0)](_0x22d3a1['actorId']()),_0x1302a1=this[_0x566204(0xa86)](_0x1e0020,Sprite),_0x16089b=_0x22d3a1[_0x566204(0xc1f)]();_0x16089b!==''?_0x1302a1[_0x566204(0xc11)]=ImageManager['loadPicture'](_0x16089b):_0x1302a1[_0x566204(0xc11)]=ImageManager[_0x566204(0x970)];const _0x54b690=this[_0x566204(0x5e2)](_0x22bb2b);_0x1302a1[_0x566204(0x64c)]['x']=0.5,_0x1302a1[_0x566204(0x64c)]['y']=0x1;let _0x2c1bb6=Math['round'](_0x54b690['x']+_0x54b690[_0x566204(0xa0f)]/0x2)+this[_0x566204(0x749)];_0x2c1bb6+=_0x22d3a1['getBattlePortraitOffsetX']();let _0x86663c=Math[_0x566204(0xa7d)](this[_0x566204(0x912)]);_0x86663c+=_0x22d3a1['getBattlePortraitOffsetY'](),_0x1302a1['move'](_0x2c1bb6,_0x86663c);const _0x1f2551=VisuMZ['BattleCore']['Settings'][_0x566204(0x39d)][_0x566204(0x913)];_0x1302a1[_0x566204(0x6a2)]['x']=_0x1f2551,_0x1302a1[_0x566204(0x6a2)]['y']=_0x1f2551,_0x1302a1['show']();}else{const _0x493b1c=this[_0x566204(0xcaf)](_0x22bb2b);this[_0x566204(0xb6f)](_0x22d3a1,_0x493b1c['x'],_0x493b1c['y'],_0x493b1c[_0x566204(0xa0f)],_0x493b1c[_0x566204(0x912)]);}},Window_BattleStatus[_0x5e79d1(0x3a9)]['createInnerPortrait']=function(_0x4e0226,_0x5ab159){const _0x383c54=_0x5e79d1,_0x36e4f3=this[_0x383c54(0xbd8)];if(_0x36e4f3[_0x4e0226])return _0x36e4f3[_0x4e0226];else{const _0x4ec278=new _0x5ab159();return _0x36e4f3[_0x4e0226]=_0x4ec278,this[_0x383c54(0x95c)](_0x4ec278),this[_0x383c54(0x95c)](this[_0x383c54(0xa4a)]),_0x4ec278;}},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7c)]=function(){const _0x2c35a0=_0x5e79d1;this[_0x2c35a0(0x274)](),this['_createEffectsContainer'](),Window_StatusBase[_0x2c35a0(0x3a9)][_0x2c35a0(0xb7c)]['call'](this),this[_0x2c35a0(0x3d0)]();},Window_BattleStatus['prototype']['_createCursorArea']=function(){const _0x408fae=_0x5e79d1;this[_0x408fae(0xa4a)]=new Sprite(),this[_0x408fae(0xa4a)]['filters']=[new PIXI[(_0x408fae(0x664))][(_0x408fae(0xc39))]()],this['_cursorArea'][_0x408fae(0x2ee)]=new Rectangle(),this[_0x408fae(0xa4a)]['move'](this[_0x408fae(0xcce)],this['_padding']),this[_0x408fae(0x593)](this[_0x408fae(0xa4a)]);},Window_BattleStatus['prototype'][_0x5e79d1(0x62d)]=function(){const _0xb00a5b=_0x5e79d1;this[_0xb00a5b(0xa33)]=new Sprite(),this[_0xb00a5b(0x593)](this[_0xb00a5b(0xa33)]);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xa26)]=function(){const _0x22a389=_0x5e79d1;this[_0x22a389(0xa33)]&&this[_0x22a389(0x593)](this[_0x22a389(0xa33)]);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x3d0)]=function(){const _0x3fe8ca=_0x5e79d1;this[_0x3fe8ca(0x468)]=new Sprite(),this[_0x3fe8ca(0x593)](this[_0x3fe8ca(0x468)]);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x2f7)]=function(){const _0x2685f5=_0x5e79d1;this[_0x2685f5(0xa7a)]=new Sprite();for(let _0x146332=0x0;_0x146332<0x9;_0x146332++){this[_0x2685f5(0xa7a)][_0x2685f5(0x593)](new Sprite());}this[_0x2685f5(0xa4a)][_0x2685f5(0x593)](this['_cursorSprite']);},Window_BattleStatus['prototype'][_0x5e79d1(0x3a0)]=function(){const _0x3decfb=_0x5e79d1;Window_StatusBase['prototype'][_0x3decfb(0x3a0)][_0x3decfb(0x695)](this),this[_0x3decfb(0x615)]();},Window_BattleStatus['prototype'][_0x5e79d1(0x615)]=function(){const _0x357aa3=_0x5e79d1,_0x1715ba=this[_0x357aa3(0xcce)];this[_0x357aa3(0xa4a)][_0x357aa3(0x428)](_0x1715ba,_0x1715ba),this[_0x357aa3(0xa4a)]['x']=_0x1715ba-this[_0x357aa3(0x4cc)]['x'],this['_cursorArea']['y']=_0x1715ba-this['origin']['y'],this[_0x357aa3(0xa21)]>0x0&&this[_0x357aa3(0x793)]>0x0?this[_0x357aa3(0xa4a)][_0x357aa3(0xcc4)]=this['isOpen']():this[_0x357aa3(0xa4a)][_0x357aa3(0xcc4)]=![];},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x34d)]=function(){const _0x46fc78=_0x5e79d1;Window_StatusBase[_0x46fc78(0x3a9)][_0x46fc78(0x34d)][_0x46fc78(0x695)](this),this[_0x46fc78(0x4c5)]();},Window_BattleStatus[_0x5e79d1(0x3a9)]['_updateCursorFilterArea']=function(){const _0x2e313e=_0x5e79d1,_0x4ea5c2=this[_0x2e313e(0xa4a)][_0x2e313e(0x4a7)][_0x2e313e(0x35a)](new Point(0x0,0x0)),_0x56edda=this[_0x2e313e(0xa4a)]['filterArea'];_0x56edda['x']=_0x4ea5c2['x']+this[_0x2e313e(0x4cc)]['x'],_0x56edda['y']=_0x4ea5c2['y']+this[_0x2e313e(0x4cc)]['y'],_0x56edda[_0x2e313e(0xa0f)]=this[_0x2e313e(0xa21)],_0x56edda[_0x2e313e(0x912)]=this[_0x2e313e(0x793)];},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xaaa)]=function(_0x28be5b){const _0x5e9675=_0x5e79d1;if(this[_0x5e9675(0xca9)]()!=='portrait')return;this['drawItemImagePortraitStyle'](_0x28be5b['index']());},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xcd2)]=function(_0x2c7ed8,_0x54cd43){const _0x4a32d1=_0x5e79d1;if(!this[_0x4a32d1(0x468)])return;if(!_0x2c7ed8)return;if(!_0x54cd43)return;const _0x49a655=this[_0x4a32d1(0x5e2)](_0x54cd43[_0x4a32d1(0x972)]());_0x49a655['x']+=_0x49a655['width']/0x2+this['padding'],_0x2c7ed8['x']=_0x49a655['x'],_0x2c7ed8['y']=_0x49a655['y'],this[_0x4a32d1(0x468)][_0x4a32d1(0x593)](_0x2c7ed8);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x4b4)]=function(_0x24b6ea){const _0x3c426b=_0x5e79d1;if(!this[_0x3c426b(0x468)])return;if(!_0x24b6ea)return;this['_damageContainer'][_0x3c426b(0x7a6)](_0x24b6ea);},Window_BattleStatus[_0x5e79d1(0x3a9)]['updateBorderStyle']=function(){const _0x108d37=_0x5e79d1;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x108d37(0x332)])this[_0x108d37(0x7ba)]();this['prepareBorderActor'](),this[_0x108d37(0x48e)]();},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x52c)]=function(){const _0x1c199e=_0x5e79d1;if(this[_0x1c199e(0x54e)]!==Window_BattleStatus)return![];if(!SceneManager[_0x1c199e(0x6a6)]())return![];return VisuMZ[_0x1c199e(0x57e)][_0x1c199e(0xc89)][_0x1c199e(0x39d)][_0x1c199e(0x63f)];},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ba)]=function(){const _0x3511ff=_0x5e79d1;this[_0x3511ff(0x332)]=new Sprite();const _0x20bb6e=SceneManager[_0x3511ff(0xc59)],_0x17f542=_0x20bb6e[_0x3511ff(0x458)][_0x3511ff(0x985)](_0x20bb6e[_0x3511ff(0xaab)]);_0x20bb6e[_0x3511ff(0x7e4)](this['_borderPortraitSprite'],_0x17f542),this['_borderPortraitSprite'][_0x3511ff(0x64c)]['x']=0.5,this[_0x3511ff(0x332)][_0x3511ff(0x64c)]['y']=0x1;const _0x13e8ea=VisuMZ['BattleCore'][_0x3511ff(0xc89)]['BattleLayout'][_0x3511ff(0xc52)];this[_0x3511ff(0x332)][_0x3511ff(0x6a2)]['x']=_0x13e8ea,this[_0x3511ff(0x332)][_0x3511ff(0x6a2)]['y']=_0x13e8ea,this[_0x3511ff(0x332)]['y']=this['y']+this[_0x3511ff(0x912)],this[_0x3511ff(0x5c4)]=0x0;},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x682)]=function(){const _0xb7232c=_0x5e79d1;return BattleManager[_0xb7232c(0x2ef)]();},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x2e9)]=function(){const _0x480734=_0x5e79d1;this[_0x480734(0x332)][_0x480734(0xcc4)]=this[_0x480734(0x682)]();const _0x3fc267=BattleManager['actor'](),_0x571aa5=_0x3fc267?_0x3fc267[_0x480734(0xc1f)]()||'':'';if(_0x3fc267===this[_0x480734(0x332)][_0x480734(0x5a0)]&&_0x571aa5===this[_0x480734(0x332)][_0x480734(0x4d2)])return;this[_0x480734(0x332)][_0x480734(0x5a0)]=_0x3fc267||this['_borderPortraitSprite']['actor'],this[_0x480734(0x332)][_0x480734(0x4d2)]=_0x571aa5;if(!_0x3fc267)return;else{if(_0x571aa5===''){this['_borderPortraitSprite']['bitmap']=ImageManager[_0x480734(0x970)],this[_0x480734(0x332)][_0x480734(0x4d2)]='';return;}else{const _0x588e60=ImageManager[_0x480734(0x27d)](_0x571aa5);this[_0x480734(0x332)][_0x480734(0x3f9)]=0x0,_0x588e60['addLoadListener'](this['processBorderActor'][_0x480734(0x95a)](this,_0x588e60));}}},Window_BattleStatus['prototype'][_0x5e79d1(0x71c)]=function(_0x157a5a){const _0x44c816=_0x5e79d1;this['_borderPortraitDuration']=0x14,this[_0x44c816(0x332)][_0x44c816(0xc11)]=_0x157a5a;SceneManager[_0x44c816(0xc59)]['isRightInputMode']()?(this[_0x44c816(0x332)]['x']=0x0,this[_0x44c816(0x5b5)]=Math['ceil'](_0x157a5a[_0x44c816(0xa0f)]/0x2)):(this[_0x44c816(0x332)]['x']=this[_0x44c816(0xa0f)],this[_0x44c816(0x5b5)]=this[_0x44c816(0xa0f)]*0x3/0x4);this[_0x44c816(0x332)][_0x44c816(0x3f9)]=0x0,this['_borderPortraitSprite']['y']=this['y']+this[_0x44c816(0x912)];const _0x139cad=BattleManager['actor']();_0x139cad&&(this['_borderPortraitTargetX']+=_0x139cad[_0x44c816(0x547)](),this[_0x44c816(0x332)]['y']+=_0x139cad[_0x44c816(0x40b)]());},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x48e)]=function(){const _0xb53ef3=_0x5e79d1;if(this[_0xb53ef3(0x5c4)]>0x0){const _0x54d16a=this[_0xb53ef3(0x5c4)],_0x3b9ebf=this[_0xb53ef3(0x332)];_0x3b9ebf['x']=(_0x3b9ebf['x']*(_0x54d16a-0x1)+this[_0xb53ef3(0x5b5)])/_0x54d16a,_0x3b9ebf['opacity']=(_0x3b9ebf[_0xb53ef3(0x3f9)]*(_0x54d16a-0x1)+0xff)/_0x54d16a,this[_0xb53ef3(0x5c4)]--;}},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x448)]=function(){const _0x2d9a11=_0x5e79d1;return;this[_0x2d9a11(0xa33)]&&(this[_0x2d9a11(0xa33)]['x']=this['x'],this[_0x2d9a11(0xa33)]['y']=this['y']),this['_damageContainer']&&(this[_0x2d9a11(0x468)]['x']=this['x'],this[_0x2d9a11(0x468)]['y']=this['y']);},Window_BattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f2)]=function(){const _0x2c8294=_0x5e79d1,_0x51dea0=VisuMZ[_0x2c8294(0x57e)][_0x2c8294(0xc89)]['BattleLayout'];if(_0x51dea0[_0x2c8294(0xa3b)]){const _0x8c9820=new Sprite();_0x8c9820[_0x2c8294(0xc11)]=ImageManager[_0x2c8294(0xbe6)](_0x51dea0[_0x2c8294(0xa3b)]),_0x8c9820['x']=_0x51dea0['StatusWindowAttachmentBackOffsetX']||0x0,_0x8c9820['y']=_0x51dea0[_0x2c8294(0xba5)]||0x0,this[_0x2c8294(0x95c)](_0x8c9820),this[_0x2c8294(0x4da)]=_0x8c9820;}if(_0x51dea0[_0x2c8294(0x407)]){const _0x1d9562=new Sprite();_0x1d9562[_0x2c8294(0xc11)]=ImageManager[_0x2c8294(0xbe6)](_0x51dea0[_0x2c8294(0x407)]),_0x1d9562['x']=_0x51dea0[_0x2c8294(0xcd1)]||0x0,_0x1d9562['y']=_0x51dea0[_0x2c8294(0xab9)]||0x0,this[_0x2c8294(0x593)](_0x1d9562),this[_0x2c8294(0x779)]=_0x1d9562;}},Window_BattleStatus[_0x5e79d1(0x3a9)]['updateAttachmentSprites']=function(){const _0x3e8d59=_0x5e79d1;this[_0x3e8d59(0x779)]&&this[_0x3e8d59(0x593)](this[_0x3e8d59(0x779)]),this['_backAttachmentSprite']&&this[_0x3e8d59(0x95c)](this['_backAttachmentSprite']);},Window_BattleActor[_0x5e79d1(0x3a9)][_0x5e79d1(0x5ec)]=function(){const _0x3ea54e=_0x5e79d1;return this[_0x3ea54e(0x37f)]();},Window_BattleActor[_0x5e79d1(0x3a9)]['isActionSelectionValid']=function(){const _0x53e49a=_0x5e79d1,_0x30270b=BattleManager[_0x53e49a(0x7a3)]();if(!_0x30270b)return!![];if(!_0x30270b['item']())return!![];const _0x18b23e=this[_0x53e49a(0x5a0)](this[_0x53e49a(0x972)]()),_0xf2b680=_0x30270b['item']()[_0x53e49a(0x85e)];if(_0x30270b[_0x53e49a(0xa5f)]()){if(_0x18b23e===BattleManager[_0x53e49a(0x5a0)]())return![];}if(_0x30270b[_0x53e49a(0x575)]()){if(!_0x18b23e[_0x53e49a(0x5d8)]())return![];}if(_0x30270b[_0x53e49a(0x508)]()){if(!_0x18b23e['isAlive']())return![];}return!![];},Window_BattleActor['prototype'][_0x5e79d1(0x222)]=function(_0xc5ce1d){this['_enemyWindowMode']=_0xc5ce1d;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x743)]=Window_BattleActor[_0x5e79d1(0x3a9)][_0x5e79d1(0x98b)],Window_BattleActor[_0x5e79d1(0x3a9)]['processTouch']=function(){const _0xc0c522=_0x5e79d1;Window_BattleStatus[_0xc0c522(0x3a9)]['processTouch']['call'](this),this[_0xc0c522(0x648)]?this[_0xc0c522(0xbb8)]():VisuMZ[_0xc0c522(0x57e)][_0xc0c522(0x743)][_0xc0c522(0x695)](this);},Window_BattleActor[_0x5e79d1(0x3a9)][_0x5e79d1(0xbb8)]=function(){const _0x5fe060=_0x5e79d1,_0x1f19a6=SceneManager[_0x5fe060(0xc59)][_0x5fe060(0x315)];if(!_0x1f19a6)return;this[_0x5fe060(0xb3f)]=![];const _0x53cf40=this[_0x5fe060(0x51f)]();if(_0x53cf40>=0x0){this[_0x5fe060(0x830)](_0x53cf40);if(TouchInput[_0x5fe060(0xaed)]()){const _0xd7c309=$gameParty[_0x5fe060(0x6fd)]()[_0x53cf40],_0x4c5cc9=_0x1f19a6['_enemies'][_0x5fe060(0x985)](_0xd7c309);_0x4c5cc9>=0x0&&(_0x1f19a6[_0x5fe060(0x830)](_0x4c5cc9),_0x1f19a6[_0x5fe060(0x5b3)]());}}},Window_BattleActor[_0x5e79d1(0x3a9)]['_makeCursorAlpha']=function(){const _0x358c91=_0x5e79d1;this[_0x358c91(0x648)]&&(this['_animationCount']++,this['active']=!![]);const _0x4c304a=Window_BattleStatus['prototype'][_0x358c91(0x507)][_0x358c91(0x695)](this);return this[_0x358c91(0x648)]&&(this[_0x358c91(0x5dc)]=![]),_0x4c304a;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x4ca)]=Window_BattleActor[_0x5e79d1(0x3a9)][_0x5e79d1(0xbb5)],Window_BattleActor[_0x5e79d1(0x3a9)]['show']=function(){const _0x1f7e53=_0x5e79d1;VisuMZ[_0x1f7e53(0x57e)]['Window_BattleActor_show'][_0x1f7e53(0x695)](this);const _0x2c5330=BattleManager[_0x1f7e53(0x7a3)]();if(_0x2c5330){const _0xba3fb6=$gameParty['aliveMembers']();_0x2c5330[_0x1f7e53(0x6af)]()&&_0xba3fb6['length']>0x1&&this[_0x1f7e53(0x8a2)](_0x1f7e53(0x632),this[_0x1f7e53(0x844)][_0x1f7e53(0x95a)](this));}},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x33a)]=Window_BattleActor[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7b)],Window_BattleActor[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7b)]=function(){const _0x3517d2=_0x5e79d1;VisuMZ[_0x3517d2(0x57e)][_0x3517d2(0x33a)][_0x3517d2(0x695)](this),delete this[_0x3517d2(0x7ff)][_0x3517d2(0xb90)],delete this[_0x3517d2(0x7ff)][_0x3517d2(0x632)];},Window_BattleActor[_0x5e79d1(0x3a9)][_0x5e79d1(0x844)]=function(){const _0x486a72=_0x5e79d1,_0x2f478d=BattleManager['inputtingAction']();if(_0x2f478d)_0x2f478d['setTargetBattlerKey'](_0x486a72(0xb95));this[_0x486a72(0x5b3)]();},VisuMZ['BattleCore'][_0x5e79d1(0xb0d)]=Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)],Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x5d1a30){const _0x49b30c=_0x5e79d1;this[_0x49b30c(0x53b)]=null,VisuMZ['BattleCore'][_0x49b30c(0xb0d)][_0x49b30c(0x695)](this,_0x5d1a30);if(Imported['VisuMZ_2_AggroControlSystem']){if(VisuMZ[_0x49b30c(0x7b0)][_0x49b30c(0xae5)]<1.12){let _0x2b3966='';_0x2b3966+=_0x49b30c(0xab4),_0x2b3966+=_0x49b30c(0x48f),_0x2b3966+='with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!',alert(_0x2b3966),SceneManager['exit']();}}},Window_BattleEnemy['prototype']['maxCols']=function(){const _0x4fa54d=_0x5e79d1;return this[_0x4fa54d(0xb59)]();},VisuMZ['BattleCore'][_0x5e79d1(0x6f1)]=Window_BattleEnemy['prototype']['show'],Window_BattleEnemy['prototype']['show']=function(){const _0x362a24=_0x5e79d1;VisuMZ[_0x362a24(0x57e)][_0x362a24(0x6f1)]['call'](this),this['y']=Graphics[_0x362a24(0x912)]*0xa,this[_0x362a24(0x590)]()&&this[_0x362a24(0x5bd)]();},VisuMZ[_0x5e79d1(0x57e)]['Window_BattleEnemy_hide']=Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7b)],Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xb7b)]=function(){const _0x4b66a7=_0x5e79d1;VisuMZ[_0x4b66a7(0x57e)][_0x4b66a7(0xced)]['call'](this),$gameParty[_0x4b66a7(0x830)](null),delete this[_0x4b66a7(0x7ff)][_0x4b66a7(0xb90)],delete this['_handlers'][_0x4b66a7(0x632)];},Window_BattleEnemy[_0x5e79d1(0x3a9)]['validTargets']=function(){const _0x393703=_0x5e79d1;let _0xf743ae=$gameTroop[_0x393703(0x43a)]();const _0x6fb081=BattleManager[_0x393703(0x7a3)]();if(_0x6fb081){_0x6fb081[_0x393703(0x6af)]()&&_0xf743ae[_0x393703(0xc35)]>0x1&&this['setHandler'](_0x393703(0xb90),this[_0x393703(0x324)][_0x393703(0x95a)](this));if(_0x6fb081['isForAnyone']()){const _0x292c0f=$gameParty[_0x393703(0x43a)]();_0xf743ae=_0xf743ae[_0x393703(0x960)](_0x292c0f),_0x6fb081[_0x393703(0x6af)]()&&_0x292c0f[_0x393703(0xc35)]>0x1&&this[_0x393703(0x8a2)](_0x393703(0x632),this[_0x393703(0x844)][_0x393703(0x95a)](this));}}return _0xf743ae;},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x562)]=function(){const _0xd81bf6=_0x5e79d1;this[_0xd81bf6(0x275)]=this[_0xd81bf6(0x663)](),this[_0xd81bf6(0x7ed)](),Window_Selectable[_0xd81bf6(0x3a9)][_0xd81bf6(0x562)][_0xd81bf6(0x695)](this);},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ed)]=function(){const _0x361793=_0x5e79d1;this[_0x361793(0x275)][_0x361793(0xaaf)]((_0x15cef9,_0x5c5486)=>{const _0xd6ce8f=_0x361793;if(_0x15cef9['isActor']()!==_0x5c5486[_0xd6ce8f(0x2ff)]()){if(_0x15cef9['isEnemy']())return-0x1;if(_0x5c5486[_0xd6ce8f(0x4cf)]())return 0x1;}if(_0x15cef9[_0xd6ce8f(0x2ff)]()&&_0x5c5486[_0xd6ce8f(0x2ff)]())return _0x15cef9[_0xd6ce8f(0x972)]()-_0x5c5486[_0xd6ce8f(0x972)]();return _0x15cef9['battler']()[_0xd6ce8f(0x523)]===_0x5c5486[_0xd6ce8f(0x949)]()['_baseX']?_0x15cef9['battler']()[_0xd6ce8f(0x415)]-_0x5c5486[_0xd6ce8f(0x949)]()[_0xd6ce8f(0x415)]:_0x15cef9[_0xd6ce8f(0x949)]()[_0xd6ce8f(0x523)]-_0x5c5486[_0xd6ce8f(0x949)]()[_0xd6ce8f(0x523)];}),SceneManager[_0x361793(0x44d)]()&&this[_0x361793(0x275)][_0x361793(0x1e6)]();},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x286)]=function(){const _0x2fb964=_0x5e79d1,_0x1afbed=VisuMZ[_0x2fb964(0x57e)][_0x2fb964(0xc89)]['Enemy'];_0x1afbed['LastSelected']?this[_0x2fb964(0xb06)]():this[_0x2fb964(0x3ee)]();},Window_BattleEnemy['prototype'][_0x5e79d1(0xb06)]=function(){const _0x40b0c1=_0x5e79d1,_0x37e6dd=BattleManager[_0x40b0c1(0x7a3)]();if(_0x37e6dd&&_0x37e6dd['isForAnyone']()){if(_0x37e6dd[_0x40b0c1(0x341)]()){if(this['_lastActor']&&this[_0x40b0c1(0x275)][_0x40b0c1(0x9fb)](this[_0x40b0c1(0x219)])){const _0x309cb7=this[_0x40b0c1(0x275)][_0x40b0c1(0x985)](this[_0x40b0c1(0x219)]);return this[_0x40b0c1(0xb77)](_0x309cb7);}else return this[_0x40b0c1(0x3ee)]();}}if(this[_0x40b0c1(0x53b)]&&this[_0x40b0c1(0x275)][_0x40b0c1(0x9fb)](this[_0x40b0c1(0x53b)])){const _0x94bd30=this[_0x40b0c1(0x275)][_0x40b0c1(0x985)](this['_lastEnemy']);this[_0x40b0c1(0xb77)](_0x94bd30);}else this[_0x40b0c1(0x3ee)]();},Window_BattleEnemy['prototype'][_0x5e79d1(0x3ee)]=function(){const _0x1e539e=_0x5e79d1,_0x54bb5c=BattleManager[_0x1e539e(0x7a3)]();if(_0x54bb5c&&_0x54bb5c[_0x1e539e(0xc08)]()){const _0x3d8715=$gameParty[_0x1e539e(0x43a)]()[0x0];let _0x3b753b=this['_enemies'][_0x1e539e(0x985)](_0x3d8715);const _0x5eb109=_0x54bb5c[_0x1e539e(0x990)]()[_0x1e539e(0x5ad)];if(_0x5eb109['match'](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x1e539e(0xb77)](_0x3b753b);return;}else{if(_0x5eb109[_0x1e539e(0xcd4)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x1e539e(0xb77)](_0x3b753b-0x1);return;}}}const _0x172e9e=VisuMZ['BattleCore'][_0x1e539e(0xc89)][_0x1e539e(0xb2e)];let _0x290a02=![];$gameSystem[_0x1e539e(0x9a5)]()?_0x290a02=_0x172e9e[_0x1e539e(0x967)]:_0x290a02=_0x172e9e['FrontViewSelect'],this['forceSelect'](_0x290a02?this[_0x1e539e(0xb59)]()-0x1:0x0);},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x735)]=function(){const _0x4a529b=_0x5e79d1;Window_Selectable[_0x4a529b(0x3a9)][_0x4a529b(0x735)][_0x4a529b(0x695)](this);if(!this[_0x4a529b(0xbd5)]())return;if(this['enemy']()[_0x4a529b(0x4cf)]())this[_0x4a529b(0x53b)]=this[_0x4a529b(0xbd5)]();if(this[_0x4a529b(0xbd5)]()['isActor']())this[_0x4a529b(0x219)]=this[_0x4a529b(0xbd5)]();},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x830)]=function(_0x38c1db){const _0x174dd4=_0x5e79d1;Window_Selectable['prototype']['select'][_0x174dd4(0x695)](this,_0x38c1db),$gameTroop[_0x174dd4(0x830)](this[_0x174dd4(0xbd5)]()),$gameParty[_0x174dd4(0x830)](this['enemy']());if(!this[_0x174dd4(0xbd5)]())return;if(this[_0x174dd4(0x590)]()){const _0x1cbb21=SceneManager[_0x174dd4(0xc59)][_0x174dd4(0x3ce)];this['enemy']()[_0x174dd4(0x2ff)]()?_0x1cbb21[_0x174dd4(0x830)](this[_0x174dd4(0xbd5)]()['index']()):_0x1cbb21[_0x174dd4(0x1f7)]();}},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x590)]=function(){const _0x1b1be6=_0x5e79d1;if(!this[_0x1b1be6(0xcc4)])return![];if($gameSystem[_0x1b1be6(0x9a5)]())return![];const _0x1bcf80=SceneManager['_scene'][_0x1b1be6(0xca9)](),_0x230ef7=[_0x1b1be6(0x5ab),_0x1b1be6(0x69f),'xp',_0x1b1be6(0x2af),_0x1b1be6(0x758)];return _0x230ef7[_0x1b1be6(0x9fb)](_0x1bcf80);},Window_BattleEnemy['prototype'][_0x5e79d1(0x5bd)]=function(){const _0x5d1975=_0x5e79d1,_0x1fc67b=SceneManager[_0x5d1975(0xc59)][_0x5d1975(0x3ce)];_0x1fc67b[_0x5d1975(0xbb5)](),_0x1fc67b[_0x5d1975(0x222)](!![]),_0x1fc67b['refresh'](),_0x1fc67b[_0x5d1975(0x1f7)]();const _0x4a022f=SceneManager['_scene']['battleLayoutStyle'](),_0x55b3fa=['xp','portrait',_0x5d1975(0x758)];if(_0x55b3fa[_0x5d1975(0x9fb)](_0x4a022f)){const _0x18e097=SceneManager[_0x5d1975(0xc59)][_0x5d1975(0x2cf)];_0x18e097[_0x5d1975(0x6a2)]['y']=0x0;}},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0xcdb)]=function(){const _0x447b47=_0x5e79d1,_0x4b81de=SceneManager[_0x447b47(0xc59)][_0x447b47(0x3ce)];_0x4b81de[_0x447b47(0xb7b)](),_0x4b81de[_0x447b47(0x222)](![]),_0x4b81de[_0x447b47(0x1f7)]();const _0x491ffd=SceneManager[_0x447b47(0xc59)][_0x447b47(0x2cf)];_0x491ffd[_0x447b47(0x6a2)]['y']=0x1;},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x324)]=function(){const _0x1f857d=_0x5e79d1,_0x4161db=BattleManager[_0x1f857d(0x7a3)]();if(_0x4161db)_0x4161db[_0x1f857d(0xb51)](_0x1f857d(0x8de));this[_0x1f857d(0x5b3)]();},Window_BattleEnemy[_0x5e79d1(0x3a9)]['selectAllActors']=function(){const _0x4a6ff8=_0x5e79d1,_0xe3b660=BattleManager[_0x4a6ff8(0x7a3)]();if(_0xe3b660)_0xe3b660[_0x4a6ff8(0xb51)](_0x4a6ff8(0xb95));this[_0x4a6ff8(0x5b3)]();},Window_BattleEnemy[_0x5e79d1(0x3a9)]['isCurrentItemEnabled']=function(){const _0x27c043=_0x5e79d1;return this[_0x27c043(0x37f)]();},Window_BattleEnemy[_0x5e79d1(0x3a9)][_0x5e79d1(0x37f)]=function(){const _0x17375a=_0x5e79d1,_0x3c969d=BattleManager[_0x17375a(0x7a3)]();if(!_0x3c969d)return!![];if(!_0x3c969d['item']())return!![];const _0x5c185a=this[_0x17375a(0xbd5)](),_0x186a2a=_0x3c969d['item']()[_0x17375a(0x85e)];if(_0x3c969d[_0x17375a(0xa5f)]()){if(_0x5c185a===BattleManager[_0x17375a(0x5a0)]())return![];}return!![];},Window_BattleItem[_0x5e79d1(0x3a9)][_0x5e79d1(0x9fb)]=function(_0x22da00){const _0x536713=_0x5e79d1;if(!_0x22da00)return![];return _0x22da00['occasion']===0x0||_0x22da00[_0x536713(0x7dd)]===0x1;};function Window_AutoBattleCancel(){this['initialize'](...arguments);}Window_AutoBattleCancel[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Window_Base[_0x5e79d1(0x3a9)]),Window_AutoBattleCancel['prototype'][_0x5e79d1(0x54e)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x5e79d1(0xb75)]=function(_0x219850){const _0x32c9e7=_0x5e79d1;Window_Base[_0x32c9e7(0x3a9)][_0x32c9e7(0xb75)][_0x32c9e7(0x695)](this,_0x219850),this[_0x32c9e7(0x1ff)](this[_0x32c9e7(0x40f)]()),this[_0x32c9e7(0x562)]();},Window_AutoBattleCancel[_0x5e79d1(0x3a9)][_0x5e79d1(0x40f)]=function(){const _0x294d53=_0x5e79d1;return VisuMZ[_0x294d53(0x57e)][_0x294d53(0xc89)][_0x294d53(0xa79)][_0x294d53(0x51b)];},Window_AutoBattleCancel[_0x5e79d1(0x3a9)]['refresh']=function(){const _0x5a479e=_0x5e79d1;this[_0x5a479e(0x365)]['clear']();const _0x415605=VisuMZ[_0x5a479e(0x57e)]['Settings']['AutoBattle'][_0x5a479e(0x2ea)],_0x596076=_0x415605[_0x5a479e(0x2a0)](this[_0x5a479e(0x823)](),this[_0x5a479e(0x6c2)]()),_0x2ee3a5=this[_0x5a479e(0x55c)](_0x596076)['width'],_0x28b515=Math['floor']((this['innerWidth']-_0x2ee3a5)/0x2);this[_0x5a479e(0x567)](_0x596076,_0x28b515,0x0,_0x2ee3a5);},Window_AutoBattleCancel[_0x5e79d1(0x3a9)][_0x5e79d1(0x823)]=function(){const _0x1010d7=_0x5e79d1;return Imported['VisuMZ_0_CoreEngine']?TextManager['getInputButtonString']('ok'):VisuMZ['BattleCore'][_0x1010d7(0xc89)][_0x1010d7(0xa79)][_0x1010d7(0xacd)];},Window_AutoBattleCancel['prototype']['cancelButtonText']=function(){const _0x1a06ee=_0x5e79d1;return Imported[_0x1a06ee(0xaac)]?TextManager[_0x1a06ee(0x891)](_0x1a06ee(0x60f)):VisuMZ['BattleCore'][_0x1a06ee(0xc89)][_0x1a06ee(0xa79)][_0x1a06ee(0x81b)];},Window_AutoBattleCancel['prototype'][_0x5e79d1(0x3f1)]=function(){const _0x467bd4=_0x5e79d1;Window_Base[_0x467bd4(0x3a9)]['update'][_0x467bd4(0x695)](this),this[_0x467bd4(0x934)](),this[_0x467bd4(0x283)]();},Window_AutoBattleCancel['prototype']['updateVisibility']=function(){const _0x28ffba=_0x5e79d1;this[_0x28ffba(0xcc4)]=BattleManager[_0x28ffba(0x8f7)];},Window_AutoBattleCancel['prototype']['updateCancel']=function(){const _0xbaf9a6=_0x5e79d1;if(!BattleManager[_0xbaf9a6(0x8f7)])return;(Input[_0xbaf9a6(0xa85)]('ok')||Input[_0xbaf9a6(0xa85)](_0xbaf9a6(0x60f))||TouchInput[_0xbaf9a6(0xaed)]()||TouchInput['isCancelled']())&&(SoundManager['playCancel'](),BattleManager['_autoBattle']=![],Input[_0xbaf9a6(0x438)](),TouchInput[_0xbaf9a6(0x438)]());};function _0xdf00(){const _0x3dce4d=['setAttack','ActSeq_ChangeSkew','parallaxHueEnemyModifier','Game_Actor_setup','WaitCount1','battleOpacity','onSelectAction','setLetter','endAnimation','guardMpLifeSteal','Scene_Map_launchBattle','isAnyoneSkewing','Window_BattleLog_displayFailure','initBattleCore','makeStateHelpText','noSimilarSTypes','applyGlobalCommonEventNotetags','ActSeq_Grid_AddTriggerToNode','updateSpin','putActiveBattlerOnTop','enemy','BackColor','clearWeaponAnimation','_additionalSprites','onEscapeFailure','normalHelp','WindowWidth','ENEMY_OFFSET_X','power','EnemyOffsetX','USER-DEFINED\x201','result','_inputting','code','addState','process_VisuMZ_BattleCore_PluginParams','itemEffectRecoverHp','loadSystem','_inBattleStatusMode','ActSeq_Impact_MotionBlurScreen','performActionEndMembers','svBattlerName','isAttack','makeDeepCopy','createActionSequenceProjectile','toLowerCase','prepareCustomActionSequence','refreshRequest','isCommandEnabled','isSkillItemWindowsMiddle','AllowRandomSpeed','cancelLifeSteal','canGuard','setBattleImpactTimeScale','enemyNames','frameDelay','clearBattleRefreshRequest','Sprite_Animation_targetSpritePosition','setFrame','ActorCmd','WaitForOpacity','_duration','PreStartActionJS','PopupShiftY','MessageWait','processEscape','VisuMZ_2_BattleGridSystem','Slot','alterActionCostPTB','ActSeq_Mechanics_BoostPointsChange','isOptionsCommandEnabled','isForAnyone','currentAction','time','repositionCancelButtonBorderStyle','die','ActSeq_Mechanics_RemoveState','WaitForAnimation','buffColor','adjustPosition_ScaleUp','bitmap','close','_homeWholeDuration','ActSeq_Grid_RemoveTriggerFromNode','actionsFmt','symbol','updateUiContainerPosition','guardHpLifeSteal','weapons','abort','VisuMZ_4_CombatLog','commandNameWindowDrawBackground','includeState','pages','getBattlePortraitFilename','ParseClassNotetags','displayItemMessage','_enemySprites','gainTp','HpGauge','Game_Action_isForOpponent','JS\x20BATTLE\x20VICTORY','autoBattle','updateStateSpriteBattleCore','processExtendTroopMembers','checkSceneBattleTransitionable','preparePartyRefresh','addImmortal','_appeared','isForOne','NameAttachStateIcon','reduce','animationNextDelay','_selectionEffectCount','_shakeFlinchPower','ActionEnd','length','itemHeight','autoMeleeMultiTargetActionSet','WaitForSpin','AlphaFilter','_totalValue','setSkill','StyleOFF','PARTY','isSpinning','itemEffectRecoverMp','substitute','jsCritRateAsUser','isSelected','weaponTypes','changePaintOpacity','StartTurnWait','addShowHpGaugeCommand','setClickHandler','VisuMZ_3_FrontviewBattleUI','Scene_Battle_createAllWindows_ComboWindow','_performActionEnd','StatusWindow_BgType','allBattleMembers','_lastAction','hitsHealFmt','Game_Map_setupBattleback','_targetSkewX','VariableHeal','PortraitScaleBorderStyle','Scene_Battle_isTimeActiveIBS','_weather','updateStatusWindowPosition','increaseHits','createAutoBattleWindow','WaitForEntrance','_scene','CriticalDmgRate','onOpacityEnd','Scene_Battle_helpWindowRect','setupBattleback','isAlive','updateShadow','AspectIcon','random','makeStateName','jsAccuracyAsTarget','ShowEnemyGauge','CastCertain','BattleManager_processVictory','currentExt','tpbCommandFight','ActSeq_Mechanics_DeathBreak','makeTurnsText','HitFlat','getDamageStyle','Scene_Battle_onActorOk','FaceDirection','getSkillIdWithName','isTpb','freezeFrame','WaitForZoom','VisuMZ_3_BattleAI','_playTestFastMode','_autoBattleWindow','ARRAYEVAL','StateIconOffsetX','nextActiveWeaponSlot','HitRate','_animation','head','ActSeq_Mechanics_BtbGain','makeTargetsBattleCoreJS','onEncounter','globalAlpha','Linear','onActorOk','_partyWindow','disarmHpLifeSteal','SkillItemMiddleLayout','setBattleCameraTargets','frontview_ui','Game_Action_isForOne','motionSpeed','Settings','Game_Action_isForRandom','fnordAddedStates','adjustWeaponSpriteOffset','CmdTextAlign','Scene_Map_initializeAfter','MUSIC\x20NOTE','_damageCounterWindow','onBattleStart','_character','waitForJump','mainSprite','isWaiting','Window_BattleLog_performCounter','BattleCmdList','_lines','_actorSprites','startInput','VisuMZ_2_BattleSystemOTB','isPlaytest','actionBattleCoreJS','VoiceLineType','contentsBack','canEscape','addFightCommand','Index','AddHpGaugeOption','numRepeats','Parse_Notetags_TraitObjects','_lastRegenFrameCount','setBattlerMotionTrailData','???','battleLayoutStyle','Frame','Sprite_Battler_updatePosition','battleCoreResumeLaunchBattle','_growY','charged','faceRect','Sprite_Actor_initMembers','process_VisuMZ_BattleCore_PreBattleCommonEvent','endIcon','invokeMagicReflection','VisuMZ_2_BattleSystemPTB','isEffecting','MANUAL','EnemyOffsetY','isBattleTest','_commonEventQueue','Window_ItemList_maxCols','DigitGrouping','BattlebackScale','createBattleFieldBattleCore','_stateIconSprite','updateTargetValue','drawItemStatusListStyle','isForFriend','isBattleMember','DamageFlat','visible','attackStatesRate','textAlignment','removeStatesAuto','gainCurrentActionsFTB','performMoveToPoint','statesMaxWidth','37757xRFLKQ','adjustPosition_ScaleDown','NameFontSize','_padding','undecided','enemyTpGaugeRate','StatusWindowAttachmentFrontOffsetX','addDamageSprite','\x5cC[16]%1\x5cC[0]','match','softDamageCapRate','PopupDuration','updateSelectionEffect','prev\x20target','_statusType','addedStateObjects','closeBattleActorWindow','updateShadowPosition','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','toUpperCase','finishActorInput','process_VisuMZ_BattleCore_Failsafes','onBattleStartBattleCore','ColorManager_mpColor','smooth','performRecovery','setSubject','battleZoom','Scene_Battle_logWindowRect','isMoving','isNameTemporarilyVisible','Enable','jsOneForOne','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','Window_BattleEnemy_hide','TimeScale','Scene_Battle_updateCancelButton','emerge','addCombatLogCommand','displayBuffs','buffHelpFmt','createCommandVisibleJS','updateStart','evalDamageFormulaBattleCore','debuffNameFmt','setupRgbSplitImpactFilter','transform','BattleManager_makeActionOrders','alive\x20actors\x20not\x20user','clearMotion','ARRAYNUM','helpWindowRectBorderStyle','CriticalDuration','_damagePopupArray','_enemySprite','isBreakStunned','stepFlinch','%1Event','options','extraHeight','deadMembers','addLoadListener','DefeatEvent','ShowRemovedBuff','BattleManager_cancelActorInput','pop','_endBattle','Window_BattleLog_displayCurrentState','stateMotionIndex','Actions','loadSvActor','ActSeq_Target_PrevTarget','_back1Sprite','animationWait','reverse','targetActionSet','_weaponSprite','adjustPosition','_stateSprite','ActSeq_Mechanics_EmulateSkillEffect','removeCurrentAction','_updateTargetValue','ActSeq_Impact_ShockwavePoint','AnchorY','minimumHits','_angleEasing','ActSeq_Mechanics_PtbConvert','XPSpriteYLocation','updateHelp','Sprite_Actor_updateBitmap','Sprite_SvEnemy','deselect','updateSkew','ActSeq_BattleLog_PushBaseLine','battleSkew','_action','compatibilityVisible','canUseItemCommand','COBWEB','setBackgroundType','createHelpWindow','NUM','skill','ActSeq_Impact_Negative','isMagicSkill','sleep','alive\x20battlers','alterType','_flashDuration','isOTB','enemyShowParametersIfBattleTest','obj','NewPopupBottom','skew','dead\x20enemies','_forcing','cameraClamp','adjustFlippedBattlefield','CmdIconItem','totalDmgFmt','Buffs','ConfigManager_applyData','isActiveTpb','View\x20battle\x20member\x20status.','Width','_lastActor','ActSeq_Animation_SkillAnimation','ActSeq_Grid_ActionAnimationAtNode','\x5cI[%1]%2','guardLifeSteal','updateScale','BattleManager_endAction','hue','_forcedBattleLayout','setEnemyWindowMode','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','BattleEndEvent','%1-%2','AntiTintUiElements','AnchorX','gaugeRate','createCancelButton','Game_Party_addActor','Scene_Battle_selectPreviousCommand','updateAngleCalculations','TP_Flat','ActSeq_BattleVoice_PlaySpecialLine','BattleDefeatJS','PrioritySortActive','applyData','Actor','battleback1Name','VisuMZ_4_IconBalloons','checkExtendTroopCompatibility','removeState','PreDamageAsUserJS','_colorFilter','setupBattleCoreData','Window_BattleLog_performRecovery','float','isBattleSys','isActing','ActSeq_Animation_ItemAnimation','Window_PartyCommand_initialize','EnableDamageCap','isSkill','TextColor','_actionBattlers','switchToWeaponType','allowCollapse','BattleManager_onEscapeFailure','testApply','autoMeleeSingleTargetActionSet','addAttackCommand','drawBattlerData','description','PreRegenerateJS','100%','pushBaseLine','battleFloat','parse','setBattleSkew','_battleField','Window_BattleLog_performAction','ShakeFlinch','popBaseLine','LIGHT','Window_BattleLog_displayMpDamage','Game_Enemy_transform','JS\x20ESCAPE\x20SUCCESS','nextActor','checkBattleEnd','ActSeq_Movement_FaceJsPoint','setupFont','%1Damage%2JS','_buffTurns','_linkedSprite','Sprite_Battler_update','buff','process_VisuMZ_BattleCore_Action_Notetags','updateBitmap','ActSeq_Grid_ClearPassiveStatesFromNode','Game_Action_itemEffectAddNormalState','onSkewEnd','SceneManager_isSceneChanging','requestRefresh','visualHpGauge','isTpbMainPhase','updateJump','Game_Battler_makeSpeed','StepDistanceY','NextTurn','CreateActionSequenceTargets','ActSeq_Motion_MotionType','addBattleCoreAutoBattleStyleCommand','svActor','_createCursorArea','_enemies','numberFontFace','waitForAnimation','svBattlerAnchorY','ActSeq_Cutin_EndVisualCutinEffectAll','_totalDamage','WaitForScale','scrollTo','loadPicture','_text','actionSplicePoint','cancelActorInput','%1RegenerateJS','SyncBuffExpire','updateCancel','Window_ActorCommand_initialize','createPartyCommandWindow','autoSelect','PopupPosition','updateNameTempVisibility','_targetGrowX','updateLink','displayCritical','battleCamera','isPreviousSceneBattleTransitionable','setBattlePortrait','processVictory','_effectType','JS\x20%1START\x20BATTLE','ActSeq_Grid_PushFromTargetNode','startInBattleStatus','IconSet','lastCommandSymbol','isMeleeMultiTargetAction','PostApplyAsUserJS','weatherType','alive\x20enemies','pattern','BattleGridSystem','_spriteset','State-%1-%2','priority','FlashColor','format','clamp','addTextToCombatLog','Debuffs','getBattlerFromKey','GetActionSequenceSpecialTarget','displayCounter','Sprite_Enemy_updateStateSprite','Sprite_Actor_moveToStartPosition','ActSeq_BattleLog_DisplayAction','updateOpacity','performMiss','updateBattleProcess','center','FollowTurn','portrait','rowSpacing','PostEndBattleJS','isCancelled','_shakeFlinchDuration','_escapeRatio','onActorCancel','encounterList','ClearBattleLog','isDrain','disperseDamage','VisuMZ_3_VisualCutinEffect','BattleManager_processDefeat','Scene_Battle_createAllWindows','isAnyoneMoving','%1StartTurnJS','EXCLAMATION','cameraOffsetDuration','fontFace','setupWeaponAnimation','stateRate','ActSeq_Mechanics_FtbAction','alive\x20enemies\x20not\x20user','updateCommandNameWindow','HITTYPE_PHYSICAL','displayHpDamage','Scene_Battle_updateBattleProcess','chantStyle','damageText','ActSeq_Mechanics_HpMpTp','statesWindowRect','createAttachedSprites','_statusWindow','BattleManager_abort','updateFrame','_drawTextBody','hidden','callOptions','spriteId','Sprite_StateIcon_updateFrame','_battlerName','isSubjectValidForAnyoneSelect','unchanged','checkAutoCustomActionSequenceNotetagEffect','FaceAway','singleSkill','state','Scene_Boot_onDatabaseLoaded','attackTimesAdd','getReturnWindow','attachSpritesToDistortionSprite','parseLocalizedText','isTpbCharged','maxLines','mainSpriteScaleX','right','SkewX','startHomeMove','prepareBorderActor','AutoBattleMsg','Window_BattleLog_displayTpDamage','_skewWholeDuration','VariableID','filterArea','isInputting','enemyHiddenParameter','traits','_item','-----','waitCount','startSkew','optDisplayTp','_createCursorSprite','EscapeFail','ExtraSettings','damageCounterWindowRect','ActSeq_Motion_WaitMotionFrame','Game_Enemy_setup','drawSingleSkillCost','Game_Action_isForFriend','isActor','_buffs','requestAnimation','battleGrow','negativeHpLifeSteal','_shadowScaleX','onRegeneratePlayStateAnimation','TargetLocation','PreEndTurnJS','CheckVisibleSkillNotetags','front\x20base','-%1\x20MP','fnordRemovedStates','_canLose','MaxLines','changeBattlerOpacity','mhp','Game_Action_clear','itemHit','setHelpWindow','weaponImageId','ActSeq_Grid_AnimationJsAtNode','_enemyWindow','performReflection','isHidden','getConfigValue','SwitchCritical','onEnemyOk','PreDamage%1JS','type','isForRandomBattleCore','Game_Action_setGuard','LUK','ActSeq_Movement_Jump','pause','setupChild','stepBack','selectAllEnemies','drawLineText','target','anchorX','addActor','setBlendColor','MotionSpeed','setupDesaturateImpactFilter','autoBattleAtStart','spinBattler','needsInputWindowChange','ActSeq_Mechanics_Collapse','Name','CheckSkillCommandShowSwitches','_borderPortraitSprite','_nameTempVisibleDuration','findTargetSprite','gaugeLineHeight','CastPhysical','StepDistanceX','WaitCount2','paramBuffRate','Window_BattleActor_hide','_visibleDuration','ActSeq_Element_NullElements','Game_Interpreter_terminate','battleCommandName','Game_BattlerBase_addNewState','hpDamageFmt','isForAnyoneFocusFriends','applyForcedGameTroopSettingsBattleCore','map','canUse','ActionStart','log','startMotion','ActSeq_Mechanics_AddBuffDebuff','_onceParallelInterpreters','updateWaitMode','ActorOffsetY','VisuMZ_2_BattleSystemFTB','_updateFilterArea','wholeActionSet','_displayBattleCoreTransitionErrorMsg','_waitMode','Game_Action_makeTargets','setupBattleCore','AsTarget','setupBattleCoreAspects','isItemCommandEnabled','applyArmorModifiers','alive\x20friends\x20not\x20user','makeTargetSelectionMoreVisible','BattleSystemSTB','apply','clearBattleCoreData','Angle','freezeTime','ActSeq_Impact_ColorBreak','_stypeIDs','updateAction','isSceneChanging','arRedRate','DefaultHardCap','setVisibleUI','contents','getAttackMotion','gainFullActionsPTB','Mechanics','onTurnEnd','startTurn','ActSeq_Motion_PerformAction','WIDTH','battleBalloon','enemyMpGaugeRate','Sprite_Actor_updateShadow','displayMpDamage','_endingBattle','_cancelButton','isAnyoneJumping','_angleRevertOnFinish','SkillsStatesCore','_targetHits','fadeShiftY','canInput','pageOffsetX','drawItemStatusXPStyle','preemptive','tone','ActSeq_Mechanics_CtbSpeed','ActionSequence','isActionSelectionValid','_actor','commandStyleCheck','Scene_Battle_createEnemyWindow','battleEffect','Game_Battler_forceAction','icons','createContents','splice','_skewDuration','statusHelpDesc','repeatTargets','onFloatEnd','StateIconOffsetY','ActSeq_Grid_RemovePassiveStatesFromNode','setItem','isItem','redrawForGaugeRate','bitmapHeight','alignBattleCoreDamageSprite','flashColor','CTB','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','VisuMZ_2_WeaponSwapSystem','TpbGaugeOffsetX','Spriteset_Battle_updateActors','skewDuration','_targetIndex','abnormal','battleInjectPrep','BattleLayout','_homeY','isStateAffected','_updateClientArea','alterChange','setupActionSet','_speed','Game_Action_isForDeadFriend','GroupDigits','battlerShadowScaleX','States','addWeaponSwapCommand','prototype','ActSeq_Impact_TimeStop','ITEM','DisablePartyCmd','applyResultSwitches','ActSeq_Grid_TraverseToNode','startTpbTurn','_defeatedEnemies','isRepeated','Game_Action_needsSelection','addAutoBattleCommand','ForceRandom','makeTargetsBattleCore','traitObjects','process_VisuMZ_BattleCore_Notetags','isAutoBattleCommandEnabled','Game_BattlerBase_meetsUsableItemConditions','contentsOpacity','addCustomCommands','isAtbCastingState','Scene_Battle_startPartyCommandSelection','ActSeq_Impact_ZoomBlurPoint','cameraDuration','setMoveEasingType','ANTI_TINT_UI','setLastPluginCommandInterpreter','performEvasion','addGeneralOptions','USER-DEFINED\x205','ShuffleArray','_animationSprites','changeBattlebacks','processCancel','canAttackBattleCore','Game_Action_evalDamageFormula','_forceAction','VisuMZ_3_WeaknessDisplay','_actorWindow','WaitForSkew','_createDamageContainer','addBattlerBuffsDebuffs','motionType','mmp','processHandling','collapse','addChildToUiContainer','open','ShowMpDmg','deathStateId','isTickBased','ArPenRate','updateShadowBattleCore','addGuardCommand','setHue','hpHealingFmt','declareGlobalVariables','ActSeq_Movement_HomeReset','ApplyImmortal','tpbActorSwitchConditionsMet','PostRegenerateJS','ActSeq_Mechanics_EtbAction','cutinEnter','backColor','ShowCosts','GetActionSequenceSpecialTargetWithFlags','ShowHide','angle','Game_Action_itemHit','FlashDuration','autoSelectPriority','hasSvBattler','WaitForCamera','update','createAttachmentSprites','finishActionSet','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','performAttack','VisuMZ_2_HorrorEffects','ACTOR_OFFSET_Y','icon','opacity','regenerateAll','VisuMZ_3_StateTooltips','Game_Action_testApply','turnsFmt','jsScaleToFit','VisuMZ_2_DragonbonesUnion','WEAPON\x20SWAP','ActSeq_Element_AddElements','createKeyJS','loadFaceImages','XPActorCommandLines','_shadowScaleY','BindCommonEventKeysForGroup','StatusWindowAttachmentFront','NameOffsetX','_actionInputIndex','status','getBattlePortraitOffsetY','CastMagical','makeBuffName','ActSeq_Animation_WaitForAnimation','bgType','addStatusCommand','<CENTER>%1','opponentsUnit','hasStaticSvBattler','onAllActionsEnd','_baseY','passiveText','makeTargets','SvWeaponMass-%1-%2','resetFontSettings','itemLifeStealRate','Sprite_Actor_update','portraitFlipHorz','AutoAddState','ComboWindow_DrawJS','isAffectedByBreakShield','Turns','PostDamageJS','VarianceFormulaJS','inputting','initMembersBattleCore','AUTO\x20BATTLE','applyAngleChange','ALL_ACTORS','move','IconStypeMagic','createStateSprite','forceEscapeSprite','processDrawEnemyBattler','ActSeq_Camera_FocusPoint','walk','jump','ActSeqProjectiles','addBattlerAspect','isGuard','isFloating','_regionBattleback2','gainMp','SkillItemStandardCols','revealNewWeaknesses','clear','isPartyCommandWindowDisabled','aliveMembers','Param','_battleCoreAddedElements','setupZoomBlurImpactFilter','\x5cI[%1]\x5cC[%3]%2','inBattleStatusWindowRect','fight','removeAnimationFromContainer','ActSeq_Mechanics_StateTurnsChangeTo','createJS','ShowFacesListStyle','applyBattleCoreCriticalHitRateJS','_hue','Window_BattleLog_performEvasion','updateEffectContainers','pointY','regenerateAllBattleCore','emulateAction','AttackAnimation','isBattleFlipped','compareEnemySprite','NameLegacy','faceHeight','callNextMethod','enemyStatus','setupTextPopup','performWeaponAnimation','createTargetsJS','Game_Action_numRepeats','ComboWindow_RectJS','children','updateInterpreter','_battlerContainer','Game_Actor_makeActionList','removeImmortal','setup','portraitFilename','checkTpbInputOpen','Shadow','Sprite_Enemy_initVisibility','getWtypeIdWithName','_armorPenetration','parseForcedGameTroopSettingsBattleCore','clearAllVisualCutins','applyItem','addBattlerStates','_damageContainer','turns','_damages','customDamageFormula','PostStartActionJS','startDamagePopup','setBattler','displayFailure','getCommonEventIdWithName','ForceExploiter','ConvertActionSequenceTarget','changeAtbCastTime','StatusWindow_RectJS','_partyCommandWindow','drawItemImagePortraitStyle','isForAll','placeStateIcon','VisuMZ_3_ActSeqProjectiles','Scene_Battle_createActorCommandWindow','ZZZ','Scene_Map_updateCallMenu','Sprite_Battler_startMove','ShakeFlinchPower','addSingleSkillCommands','clearForcedGameTroopSettingsBattleCore','battlerName','_forcedBattlers','Wave','addExtendedTroopMembers','extendTroopMembers','boxWidth','itemEffectGainTp','removeBuff','isAlwaysVisible','inHomePosition','_skillWindow','%1EndBattleJS','floor','updateBorderSprite','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','ActSeq_Mechanics_AddState','Sprite_Battler_damageOffsetX','skillTypes','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','Sprite_Battler_damageOffsetY','BattleManager_endBattle','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','itemCri','effects','PerformAction','_inBattleStatusWindow','turn','canAttack','PostEndActionJS','Game_Action_itemEffectAddAttackState','command301','battleCorePreBattleCommonEvent','movement','battlerSprites','Window_BattleLog_displayMiss','_svBattlerSprite','updateBossCollapse','_targets','worldTransform','isFlipped','_enemyNameContainer','_buttonKey','randomTargets','_callSceneOptions','isDamagePopupRequested','CriticalHitMultiplier','positionOffsetY','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','createPageButtons','setBattlerFlip','_weaponImageId','removeDamageSprite','Game_Action_setAttack','Game_Action_isForAll','isPTB','updateActors','pageButtonPosition','isAppeared','Point','MAXMP','requestMotionRefresh','ShakeFlinchDuration','resetResultSwitches','PrioritySortActors','Sprite_Weapon_loadBitmap','showAnimation','WtypeId','turnOrderChangeOTB','_updateCursorFilterArea','isTeamBased','TextFmt','_battleCoreBattleStartEvent','getLastPluginCommandInterpreter','Window_BattleActor_show','Direction','origin','Scene_ItemBase_applyItem','onDisabledPartyCommandSelection','isEnemy','paintOpacity','selectNextCommand','lastFilename','onBattleEndBattleCore','placeTimeGauge','VariableDmg','Scene_Battle_update','allIcons','StatusWindowSelectableBackHide','drawActorSimpleStatus','_backAttachmentSprite','enemyShowLevel','_activeWeaponSlot','setActiveWeaponSet','animationShouldMirror','casting','paramName','_totalHits','Window_BattleLog_performReflection','troop','ActSeq_Movement_MoveToPoint','repeats','attackAnimationId1','ShowButton','_statesWindow','addOptionsCommand','CmdStyle','StatusWindow_DrawJS','processAbort','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','Scene_Battle_createPartyCommandWindowIBS','StateOverlayOffsetY','Game_Temp_initialize','process_VisuMZ_BattleCore_jsFunctions','ActSeq_Movement_WaitForSkew','Game_Battler_performEvasion','initElementStatusCore','_effectDuration','replace','SWEAT','CmdIconAutoBattle','VisuMZ_2_PartySystem','_methods','battleSpriteSkew','statusDescription','BravePoints','DistanceX','portraitIndex','Sprite_Battler_setHome','performAttackSlot','battleSpin','gainHp','iconWidth','updateStateSprite','_bypass_applyBattleCoreHitRateJS','_makeCursorAlpha','isForAliveFriend','ActSeq_Animation_BalloonIcon','magicReflection','StepDuration','EnableSoftCap','startBattle','Sprite_Actor_setBattler','contains','Scene_Battle_createAllWindowsIBS','Window_BattleStatus_drawItemImage','setTroopPage','isFastForward','setSvBattlerSprite','createAnimationSprite','checkTpbInputClose','35Diweon','isStatusAffected','isATB','PreEndActionJS','AutoBattleBgType','Scene_Battle_createHelpWindow','Scene_Battle_startActorSelection','applyTargetFilters','hitIndex','characterIndex','BattleManager_inputtingAction','Game_Battler_onTurnEnd','_baseX','_back2Sprite','jumpBattler','charging','ParseEnemyNotetags','Strength','debuffAdd','createActorCommandWindowBattleCore','min','isBorderStylePortraitShown','ScaleY','PopupShiftX','addStateTurns','clearElementChanges','_showWeapon','CheckVisibleBattleNotetags','Scene_Battle_onEnemyCancel','STB','iterateBattler','svBattlerShadowVisible','performAction','shouldDisperseDamage','ArRedRate','characterName','_lastEnemy','negativeLifeSteal','cutinExit','ShowCounter','drawActorIcons','ActionSkillMsg1','performJump','moveToStartPositionBattleCore','AS\x20USER','_enemyMultiTargetWindow','drawEnemyName','checkShowHideBattleNotetags','getBattlePortraitOffsetX','Scene_Battle_createActorCommandWindowIBS','updateTargetPosition','actorCommandWindowRect','wtypeId','glitch','ActSeq_Mechanics_VariablePopup','constructor','ActSeq_Projectile_Picture','NO\x20ACTOR\x20FOUND!','TurnsFmt','ActSeq_Movement_Scale','battleUIOffsetX','performActionEnd','Game_Battler_onBattleStart','_logWindow','BattleManager_processAbort','disarmMpLifeSteal','Window_SkillList_maxCols','ActSeq_Element_Clear','STYPES','textSizeEx','ScaleDown','checkSubstitute','pha','maxWidth','jsAccuracyAsUser','refresh','maxBattleMembers','ActSeq_Movement_WaitForFloat','Targets2','ActSeq_BattleLog_WaitForNewLine','drawTextEx','HpGaugeOffsetY','_isBattlerFlipped','hitText','_itemWindow','TpGaugeOffsetX','paySkillCost','ChangeOrderBy','isNextScene','windowAreaHeight','resizeWindowBorderStyle','drawItemImageListStyle','placeGauge','isAnyoneChangingOpacity','isForDeadFriend','gradientFillRect','updateKeyboardKeys','updateBattlebackBitmap2','battleStatusWindowAnimationContainer','updateStyleOpacity','parallaxScrollXinvertEnemy','ActSeq_ChangeAngle','addBattleCoreAutoBattleStartupCommand','BattleCore','ActSeq_Angle_Reset','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','endInBattleStatus','buffIconIndex','BattleSystemBTB','displayAddedStates','rec','escape','Scene_Battle_commandEscape','ActSeq_DB_DragonbonesMotionAni','_customDamageFormula','mainSpriteHeight','ShowMissEvasion','ActiveTpbOptionsMessage','Game_Action_executeMpDamage','command339','commandNameWindowDrawText','meetsSelectFrontviewActorConditions','increaseTotal','forceMotion','addChild','addNormalStatus','hasBeenDefeatedBefore','mpColor','isBattleCoreTargetScope','addSingleSkillCommand','EasingType','user','DefaultSoftScaler','Game_Action_executeDamage','isAlwaysHidden','ActSeq_Movement_FacePoint','portraitHue','actor','Game_Interpreter_PluginCommand','snapForBackground','isSkewing','_tempEquipCheck','svActorHorzCells','damagePopupPosition','displayRemovedStates','_tpbNeedsPartyCommand','startWeaponAnimation','SkewY','default','makeUniqueNames','scope','MAT','MotionIdle','BattleManager_onEncounter','ActSeq_Motion_RefreshMotion','hitRate','processOk','isUndecided','_borderPortraitTargetX','startAction','ActSeq_Set_FinishAction','_surprise','isAnyoneSpinning','ActSeq_Cutin_WaitForEntrance','ActSeq_Mechanics_AtbGauge','addOnceParallelInterpreter','openBattleActorWindow','MP_Flat','setupCriticalEffect','battleVoices','buffAdd','_subject','524194GGLCad','_borderPortraitDuration','clearGlobalVariables','isAnimationPlaying','removeHorrorEffect','_executedValue','normalColor','font','changeCtbChargeTime','dead','Game_Action_executeHpDamage','updateEvent','commandSymbol','ActSeq_Mechanics_StateTurnsChangeBy','setCursorRect','-%1','\x5cC[0]','findSymbolExt','previousActor','processDefeat','setActiveWeaponSlot','isDead','itemWindowRect','Game_Action_isForAliveFriend','_reflectionTarget','active','ActSeq_Zoom_WaitForZoom','skewBattler','_returnWindow','attack','drawText','itemRect','Scene_Battle_startActorCommandSelection','MUSIC','battlerKey','updateForceAction','criticalDmgFlat','WaitForAngle','missile','motionIdle','ForceExploited','isCurrentItemEnabled','Skills','_visualHpGauge_JustDied','getDragonbones','floatBattler','_regionBattleback1','CommandWidth','performFlinch','playOkSound','JS\x20%1END\x20BATTLE','dimColor1','process_VisuMZ_BattleCore_TraitObject_Notetags','AttachStateOffsetY','BattleManager_initMembers','isETB','lifeSteaItem','Sprite_Actor_setActorHome','requestPointAnimation','ActionEndUpdate','performSTBExploiter','EscapeSuccessJS','battleCommandIcon','counterAttack','loadBitmap','updateCallMenu','svActorVertCells','_tpbState','regionId','getBattlerKeyTargets','attackSkillId','skills','split','loadSvEnemy','ActSeq_Mechanics_Multipliers','svBattlerData','cancel','playOnceParallelTroopPage','applyEasing','▼%1','Game_BattlerBase_initMembers','createWeather','_updateCursorArea','VisuMZ_2_BattleSystemBTB','isSpriteVS8dir','mainFontSize','damagePopupOffsetY','ActSeq_Animation_BalloonIconRange','Parse_Notetags_Targets','_freezeMotionData','updateCounter','isSkipPartyCommandWindow','Game_BattlerBase_canAttack','invokeAction','CommandAddStatus','9LeMMzv','setupMotionBlurImpactFilter','_dimmerSprite','battlelog','makeDamageValue','Window_ActorCommand_setup','14ttXbnm','setActorHome','pageButtonX','Amp','drawStates','_createEffectsContainer','executeHpDamage','_forcedHomeY','drawActorLevel','IconIndex','pagedown','CommandAddAutoBattle','addAutoBattleCommands','isBusy','getColor','lukEffectRate','getLastHpDamage','clearHorrorEffects','setFullActionsPTB','Game_Battler_onBattleEnd','jsScaleUp','SHOW_BUTTON','_opacityEasing','ShowPortraitsBorderStyle','delay','ActionSkillMsg2','applySoftDamageCap','usePremadeActionSequence','Game_Battler_performActionStart','updateCancelButton','_createColorFilter','turnCount','_enemyWindowMode','lineHeight','currentClass','ActSeq_Animation_AttackAnimation2','anchor','commandEscape','command301_PreBattleEvent','_svBattlerData','setCustomDamageFormula','Reveal','ActSeq_Animation_AttackAnimation','HelpEscape','refreshStatusWindow','moveBattlerHomeDistance','retreat','focus','visualCutinPortraitIndex','displayEvasion','drawActorGraphic','randomInt','isValid','Game_BattlerBase_isStateResist','ANGLE','evaded','showPortraits','DamageDisplay','isAnyoneGrowing','validTargets','filters','smoothness','SceneManager_push','removeOnceParallelInterpreter','Window_BattleStatus_initialize','svbattler','Sprite_Actor_updateFrame','_helpWindow','shouldHideBattleEndPopups','ActSeq_Mechanics_CtbOrder','name','getStypeIdWithName','ALL_ENEMIES','Intensity','%1Apply%2JS','_flinched','FvAniEachTarget','offsetY','onJumpEnd','makeData','statusWindowRectDefaultStyle','isForAliveFriendBattleCore','makeEscapeRatio','updateShakeFlinch','startShakeFlinch','statusWindowRect','blt','BattleStartEvent','basicGaugesY','InBattleStatus','isBorderPortraitSpriteVisible','Status\x20is\x20currently\x20normal.','createEnemyWindow','loadWindowskin','getHardDamageCap','jsCritRateAsTarget','NameAsTarget','clone','push','commandAutoBattle','commandNameWindowCenter','swapEnemyIDs','Enemy-%1-%2','onHomeMoveEnd','registerCommand','setReturnWindow','ActSeq_Movement_MoveBy','getSpecificBattlerKeyTarget','isCustomBattleScope','call','isTimeActive','ActSeq_Impact_ZoomBlurTargetCenter','HelpOptions','_shadowSprite','drawEnemyBattler','ComboWindow','adjustPosition_1for1','▲%1','toString','list','action','drawItemStyleIcon','scale','partyCommandWindowRectDefaultStyle','addCommand','removeBattleBalloon','isSceneBattle','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','isAnyBattleBalloonPlaying','CheckVisibleSwitchNotetags','ChantStyle','actions','ActSeq_Set_WholeActionSet','SlotID','_jumpDuration','canSingleOrMultipleSelect','SkillID','ScaleX','animation','addSkillCommands','MaxHP','Game_Map_battleback1Name','onBattleStartOnceParallels','_commandNameWindow','_distortionSprite','getNextSubject','processRefresh','actorCommandAutoBattle','skillItemWindowRectBorderStyle','isAnimationShownOnBattlePortrait','BindCommonEventKeysForObj','performTpbActiveCheckSwitch','isIncludedInEnemyWindow','launchBattle','cancelButtonText','pageOffsetY','updateCustomActionSequence','ActSeq_Mechanics_CustomDmgFormula','toUseBoostPoints','updatePhase','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','setText','ParseActorNotetags','svAnchorY','_motion','sideview_ui','linkSprite','ItemID','updateCollapse','VisuMZ_3_SideviewBattleUI','ActSeq_Zoom_Scale','Game_BattlerBase_refresh','startSpin','_flashColor','setBattleCameraPoint','enemyId','effect','becomeSTBExploited','SKILLS','deactivate','ActSeq_Grid_MoveTargetsInDirection','WaitComplete','PointJS','isPartyTpbInputtable','Window_BattleLog_popupDamage','damageContainer','command283','maxCommands','damage','_phase','boxHeight','_targetOffsetY','RevertAngle','_baseTexture','MDF','commandOptions','MotionType','attackMotions','_target','smoothSelect','Balloon','Window_BattleEnemy_show','setStateTooltipBattler','command236','setBattleZoom','skillWindowRect','cancelTargetSelectionVisibility','silentHomeMove','Parse_Notetags_HelpDescription','gainBravePoints','applyHardDamageCap','isForRandom','createHpGaugeSprite','members','isNextSceneBattleTransitionable','_forActor','ESCAPE','Window_Options_addGeneralOptions','parameters','onStaticEnemyBitmapLoad','createChildSprite','totalHealFmt','clearBattleCoreAspects','ActSeq_Mechanics_StbExploit','ActSeq_Animation_BalloonAnimation','Sprite_Damage_createChildSprite','IconStypeNorm','performSubstitute','startOpacity','initMembers','flipVisualCutinVert','ActSeq_Mechanics_OtbOrder','_angleWholeDuration','uiMenuStyle','process_VisuMZ_BattleCore_BaseTroops','lineRect','ParseWeaponNotetags','Scene_Battle_skillWindowRect','createBattleUIOffsetX','getNextSubjectFromPool','updateAttachmentSprites','process_VisuMZ_BattleCore_DamageStyles','_updateColorFilter','Window_Options_statusText','processBorderActor','EndBattlePopups','displayCurrentState','GUARD','CopyCombatLog','maxCols','_targetFloatHeight','makeBattleCommand','textWidth','guard','ResetFocus','visualCutinPortraitFilename','AdjustRect','physical','playEnemyAttack','moveBattlerToPoint','isOptionsCommandAdded','dying','message2','commandStyle','drawItemActorFace','315618otaicu','getParamBuffAndStateRate','isHiddenSkill','frontviewSpriteY','callOkHandler','displayActionResults','132RfNWwt','Game_Troop_expTotal','Game_Action_itemTargetCandidates','Window_BattleLog_popBaseLine','addItemCommand','Scene_Battle_onEnemyOk','ActSeq_Grid_AnimationIDAtNode','createBattleBalloon','makeAutoBattleActions','gaugeX','CheckActSeqProjectileVersion','Window_BattleLog_refresh','Window_BattleActor_processTouch','drawGauge','Game_Temp_requestAnimation','ActSeq_Cutin_EndVisualCutinEffectType','_battleLayoutStyle','PostDamageAsUserJS','padding','PreApplyAsTargetJS','custom','DamageType%1','ActSeq_Motion_ClearFreezeFrame','expRate','_motionCount','Game_BattlerBase_eraseState','updateShadowScale','centerFrontViewSprite','resize','_waitCount','isDisarmLifeSteal','restore','ActionItemMsg','border','\x5cI[%1]\x5cHEXCOLOR<%3>%2','AS\x20TARGET','OffsetX','CurrentTurn','weatherPower','formula','ActSeq_BattleVoice_PlayCommonLine','_opacityWholeDuration','Scene_Options','isCTB','changeTextColor','recoverAll','makeSpeed','executeDamage','ActSeq_Movement_MoveToTarget','endVisualCutin','WaitForMovement','Game_Map_encounterList','battleAngle','_homeX','isPlaying','uiInputPosition','buffValueFmt','PreEndBattleJS','updateLastTarget','_hpGaugeSprite','updatePositionBattleCore','attackAnimationId2','ActSeq_Movement_WaitForMovement','_targetOpacity','ext','_indent','_frontAttachmentSprite','Style','ActSeq_Mechanics_EmulateGuardEffect','Item-%1-%2','Scene_QuickLoad','performActionStart','_offsetX','CmdIconStatus','ActSeq_Camera_Offset','createEffectActionSet','_growEasing','DisplayAction','iconText','isDuringNonLoopingMotion','Radius','processForcedAction','loop','changeTurnOrderByCTB','drawItem','Formula','isCustomActionSequence','dragonbonesData','SETTINGS','ActSeq_Set_SetupAction','updatePadding','requestMotion','innerHeight','AniDuration','missle','ShowCritical','updateAttachedSprites','_preBattleCommonEvent','PostStartBattleJS','battleAnimation','MAXHP','extraPositionY','setHalfActionsPTB','arRedFlat','4lahQzf','isAnyoneInjectAniPrepping','getDefeatedEnemies','redraw','inputtingAction','buffRemove','playEnemyDamage','removeChild','Game_Battler_performDamage','setHelpWindowItem','processActorCommandCancelTPB','updateHpGaugePosition','performMagicEvasion','checkCacheKey','debuffHelpFmt','makeCommandList','Sprite_Battler_initMembers','AggroControlSystem','hpAffected','ActSeq_BattleLog_PopBaseLine','updateBattlebackBitmap1','Scene_Battle_terminate','ActSeq_Grid_TeleportToNode','updateBorderStyle','HelpAutoBattle','PostApply%1JS','abs','createBorderStylePortraitSprite','_cache','addPartyCommand','WaitForExit','makeActions','Game_BattlerBase_die','destroyDamageSprite','createInBattleStatusWindow','_pageupButton','PreApplyAsUserJS','clearFreezeMotion','needsSelectionBattleCore','JumpToLabel','_ptbActionCost','isImmortal','_animationCount','_stateTurns','drawItemActorSprite','makeSuccess','updateBattlebackBitmap','performDamage','Game_Interpreter_command283','WaitForJump','missed','createActors','JS\x20%1DAMAGE\x20%2','critical','clearOnceParallelInterpreters','updateBattlerContainer','displayStartMessages','evade','...','softDamageCap','zoomDuration','Game_Map_battleback2Name','occasion','ResetOffset','notFocusValid','targetBattlerContainerOpacity','FilenameJS','Rate','partyCommandWindowRectXPStyle','addChildAt','displayChangedBuffs','isSTB','adjustPosition_ScaleToFit','bitmapWidth','AllowCollapse','onEncounterBattleCore','_commonEventIDs','updateDuration','sortEnemies','gainStoredBoostPoints','BattleLogRectJS','drawIcon','initVisibility','popupDamage','drawSkillCost','HomePosJS','ActSeq_Mechanics_RemoveBuffDebuff','commandFight','ConvertCount','hasAspectData','ActSeq_Weapon_SetActiveWeapon','_tpbChargeTime','powerDownColor','_floatWholeDuration','ReflectPlayback','StatusWindowSkinHide','_handlers','VisuMZ_3_ActSeqImpact','BaseTroopIDs','isActiveTpbReady','process_VisuMZ_BattleCore_CommonEventKeys','_aspectData','175016uQeLtu','Sprite_Battler_updateMain','_tempBattler','createAllWindows','textBaseline','isQueueOptionsMenu','lastBattleSkill','isNegativeLifeSteal','isGrowing','swing','ActSeq_Inject_AnimationPauseResume','Game_Battler_performMiss','ActionAnimation','originalName','ActSeq_Mechanics_EmulateAttackEffect','_tpbSceneChangeCacheActor','waitForMovement','%1▼','NameDamageVisibility','FullActions','targetObject','processAnimationRequests','AutoBattleCancel','battleProjectiles','isAutoBattle','WaitForProjectile','traitSet','applyImmortal','performCastAnimation','Game_Battler_regenerateAll','okButtonText','AutoNotetag','startInjectAnimation','pageButtonY','Sprite_Battler_setBattler','setBattleCameraOffset','makeActionOrders','battleUIOffsetY','process_VisuMZ_BattleCore_CreateRegExp','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','isForOpponent','HITTYPE_MAGICAL','selectSymbol','select','getBattlePortrait','_flipScaleX','pauseInjectAnimation','resetTextColor','iconHeight','SvMotionIdleMass-%1-%2','retrieveBattleBalloon','activate','ActSeqImpact','FvAniCenterAll','_buttonText','_currentActor','terminate','AnimationID','normalIcon','_floatDuration','_floatEasing','onGrowEnd','isForAnyoneFocusOpponents','selectAllActors','HpGaugeOffsetX','_battleBalloonQueue','jsAccuracy','addAnimationSpriteToContainer','BreakShields','PosOffsetX','ActSeq_Animation_CastAnimation','Defeat','createDistortionSprite','partyCommandWindowRectBorderStyle','timeScale','displayType','_motionType','ActSeq_Movement_BattleStep','_targetY','ActSeq_Mechanics_SwapWeapon','requestBattleBalloon','Game_Actor_equips','VisuMZ_3_ActSeqCamera','VisuMZ_2_BattleSystemSTB','UNTITLED','requestDragonbonesAnimation','normal','finalizeScale','setGuard','note','speed','DefaultSoftCap','forceWeaponAnimation','actorCommandCancelTPB','Window_BattleLog_displayEvasion','pageButtons','itemEffectAddNormalState','removeBuffsAuto','base','ActSeq_Horror_GlitchCreate','targetsForFriends','VisuMZ_4_BreakShields','Parse_Notetags_Action','moveBattlerDistance','okTargetSelectionVisibility','_homeDuration','LifeStealRegExp','ArRedFlat','Game_Temp_requestBalloon','mainSpriteWidth','AutoMeleeAoE','StateID','updateMotionCount','extraPositionX','displayReflectionPlayBack','clearBattlerMotionTrailData','save','drawDebuffs','AddOption','onAngleEnd','JS\x20%1START\x20TURN','clearRect','selectPreviousCommand','ActSeq_Animation_ChangeBattlePortrait','visibilityState','not\x20focus','isGuardLifeSteal','ActorOffsetX','OffsetAdjust','PosOffsetY','_baseLineStack','atbInterrupt','ActSeq_Camera_WaitForCamera','measureTextWidth','currentValue','Game_Troop_setup','initBattlePortrait','ActSeq_Camera_Clamp','dataId','animationBaseDelay','getInputButtonString','skillItemWindowRectMiddle','Sprite_Gauge_smoothness','endBattle','drawActorName','_frame','targetObjects','Scene_Battle_selectNextCommand','Opacity','ActSeq_Mechanics_StbRemoveExcessActions','displayTpDamage','debuffValueFmt','drain','isFightCommandEnabled','CustomFontFace','drawDarkRect','alive\x20enemies\x20not\x20target','setHandler','setValue','TextAlign','windowPadding','VisuMZ_1_MessageCore','createEnemyNameContainer','isPhysical','_skillIDs','ActSeq_Element_ForceElements','refreshBattlerMotions','setSTBExploited','angleDuration','WaitForNewLine','itemTargetCandidates','changeAtbChargeTime','performActionMotions','actionEffect','startVisualCutin','Scene_Battle_startEnemySelection','rate','canAddSkillCommand','TPB','addDebuff','destroy','fontSize','startPartyCommandSelection','FvAniCenterScreen','drawItemActorSvBattler','itemEffectAddAttackState','createBattleUIOffsetY','Targets1','targetDistortionSpritePosition','isAnyProjectilePresent','setBattlerBattleCore','processBattleCoreJS','message4','ATTACK','Game_Party_removeActor','placeActorName','Scene_Battle_commandFight','battleCommands','Scene_Map_initialize','slices','Duration','moveToStartPosition','Game_Battler_clearDamagePopup','MIN_SAFE_INTEGER','Scene_Battle_start','displaySubstitute','isForFriendBattleCore','opacityStart','PreApply%1JS','statusText','_motionSpeed','showHelpWindow','selectNextActor','ActSeq_Grid_AnimationTypeAtNode','message1','addBuff','clearBattleBalloons','all\x20enemies','createBattleFieldContainer','CombatLogIcon','ParseArmorNotetags','HP_Flat','LIGHTBULB','command119','_commonEventKey','Scene_Options_maxCommands','ActSeq_Mechanics_PtbAlterCost','playOnceParallelInterpreter','_immortal','ActSeq_Mechanics_WaitForEffect','getBattleMembers','STATUS','PostStartTurnJS','canAlterActionCostPTB','powerUpColor','clearActiveWeaponSlot','Post','FocusY','emulateActionEffect','dead\x20actors','removedStateObjects','none','_autoBattle','freezeMotion','_skewY','Spriteset_Battle_createLowerLayer','OffsetY','ARRAYFUNC','drawItemImage','AllEnemiesText','SvMotionIdleSolo-%1-%2','PreStartTurnJS','removeActor','isDisplayEmergedEnemies','battlerShadowScaleY','playBattleVoice','compareBattlerSprites','itemLineRect','waitForEffect','createStatesWindow','textColor','partyCommandWindowRect','setCommonEvent','waitForNewLine','BattleManager_startInput','animationId','hpDamage','updateShadowVisibility','Window_BattleLog_performActionEnd','height','PortraitScale','battleCoreTpbMainPhase','ActSeq_Movement_FaceDirection','helpWindowRect','requestFauxAnimation','_enemy','attackStates','canMove','JS\x20ESCAPE\x20FAILURE','Mute','CoreEngine','_cacheTextWidth','CastAnimation','NameOffsetY','ActSeq_Movement_WaitForScale','_colorType','isPreviousScene','BG_TYPE','position','ActSeq_BattleLog_WaitForBattleLog','ATK','Scene_Battle_updateStatusWindowPosition','_enemyIDs','createString','_actorCommandWindow','reserveCommonEvent','_targetGrowY','selectNextCommandTpb','Game_Interpreter_command301','clearTargetBattlerKey','horzCells','_growWholeDuration','JS\x20%1END\x20ACTION','updateVisibility','drawBackgroundRect','alphabetic','getNextDamagePopup','BattleManager_setup','ActSeq_Movement_WaitForSpin','isChanting','makeActionList','Exploited','canGuardBattleCore','isSpriteVisible','ParseSkillNotetags','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','updateFlip','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','displayAction','battleback2Name','createDamageSprite','battleMove','isAnyoneInjectAnimating','performCollapse','battler','frameVisible','DualWield','_iconIndex','performCounter','Users','_requestRefresh','drawComboText','FUNC','ConfigManager_makeData','_updateDuration','drawTextTopAligned','WaitForEffect','currentSymbol','addBattleGridMoveCommand','MpGaugeOffsetY','prepare','bind','isStateResist','addChildToBack','faceWidth','BULB','createDamageContainer','concat','isBattlerGrounded','createSeparateDamagePopups','updateMain','battleDisplayText','Sprite_Enemy_updateBossCollapse','BattleManager_checkBattleEnd','SideviewSelect','addNewState','SwitchMissEvade','BattleManager_updatePhase','startJump','sprite','onEnemyCancel','USER-DEFINED\x202','_namesCount','_emptyBitmap','isCharging','index','getMenuImage','equipSlots','_targetDamage','createMultiTargetWindows','setHome','NOTE','addText','createRateJS','COMBATLOG','resetCounter','BattleLog','moveBattlerHomeToPoint','_targetSkewY','Game_Action_executeHpDamage_ComboWindow','showEnemyAttackAnimation','Game_Action_updateLastTarget','createAnimationContainer','filter','indexOf','applyBattleCoreHitRateJS','PRE-','SkillItemBorderCols','parallaxScrollY','_allTargets','processTouch','battlerHue','registerDefeatedEnemy','getItemDamageAmountLabelOriginal','Scene_Battle_createPartyCommandWindow','item','executeMpDamage','value','attackAnimationIdSlot','Filename','Game_BattlerBase_canGuard','onMoveEnd','evalDamageFormula','ShowActorGauge','trueRandomTarget','BARE\x20HANDS','PopupOffsetX','_performDamageMotion','ActSeq_Mechanics_EmulateItemEffect','processBattleBalloonRequests','hardDamageCap','ActSeq_Mechanics_AnalyzeWeakness','TpGaugeOffsetY','start','dead\x20friends','extraPositionScaledY','isSideView','ActSeq_Mechanics_ActiveChainInputDisable','front\x20center','damagePopupOffsetX','_lastPluginCommandInterpreter','BattleManager_startBattle','VisualCutinEffect','_deathStateApplied','_multipliers','valueColor','DistanceAdjust','hpRate','slice','frameCount','_lineHeight','ActSeq_Movement_HomeMoveBy','ActSeq_Skew_WaitForSkew','ShowCurrentState','_interpreter','remove','setBattlerFacePoint','_uiContainer','mpDamage','createDamageCounterWindow','ActSeq_Mechanics_Immortal','updatePointAnimations','playCursor','Spriteset_Battle_update','PostDamageAsTargetJS','damageFlat','ActSeq_Camera_Reset','isBuffAffected','StartTurnMsg','BattleManager_startAction','forceAction','checkShowHideSwitchNotetags','Game_System_initialize','graphicType','ActSeq_Movement_Float','actorCommandSingleSkill','subject','_battlerKeyCache','BattleManager_checkSubstitute','DigitGroupingDamageSprites','Scene_Battle_stop','WaitCount','autoBattleUseSkills','ActSeq_Mechanics_PtbFullHalfAction','updateOnceParallelInterpreters','isAnyoneFloating','SkipPartyCmd','Window_BattleLog_performActionStart','command357','text','max','_animationContainer','setupShockwaveImpactFilter','ConvertParams','loadOtherActorImages','doesPageHaveOnceParallelStart','changeWeather','NameAlwaysVisible','Scale','repositionEnemiesByResolution','isOpenAndActive','_battlerHue','isConfused','exit','performLifeSteal','HelpStatus','_attackAnimationId','CriticalColor','getFullActionsPTB','createUIContainer','svShadow','battleJump','Game_Action_setSkill','alive\x20opponents','getItemDamageAmountTextOriginal','BoostPoints','drawActorBuffTurns','LOVE','Window_BattleLog_performSubstitute','sortDamageSprites','actorCommandEscape','battleStatusSprite','includes','drawItemStyleIconText','_targetBattlerKey','RegExp','lifeStealRate','setHorrorEffectSettings','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','ParseStateNotetags','enemyShowParametersAlways','ShowAddedDebuff','_wtypeIDs','gaugeBackColor','Sprite_Actor_createStateSprite','text\x20target','MpGaugeOffsetX','QoL','unshift','addedDebuffs','DamageStyles','updateBattleBalloons','width','onEscapeSuccess','isOpponent','SLEEP','_actorMultiTargetWindow','applyFreezeMotionFrames','ActSeq_Camera_FocusTarget','addEscapeCommand','Destination','getAspectData','BTestBypass','_list','Scene_Battle_createCancelButton','getTraitSetKeys','setupIconTextPopup','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','performShakeFlinch','isBattleRefreshRequested','innerWidth','forActor','statusWindowRectXPStyle','resizeWindowXPStyle','MultiTarget','updateEffectsContainer','_executeHpDamage','createActorCommandWindow','Game_Battler_clearMotion','CmdIconEscape','passive','selectedBattlers','useDigitGrouping','TpbGaugeOffsetY','STRUCT','SmoothImage','ActSeq_Grid_AddPassiveStatesToNode','BattleVictoryJS','_effectsContainer','stateColor','special','startFloat','ActSeq_Horror_TVRemove','AllActorsText','Elements','revertTpbCachedActor','StatusWindowAttachmentBack','isDeathStateAffected','NameAlwaysHidden','Scene_Battle_initialize','ActSeq_Movement_WaitForOpacity','ActSeq_Set_TargetActionSet','ARRAYSTR','isAutoBattleCommandAdded','_lastHpDamage','multiTargetWindowRect','_battleBalloonSprites','ActSeq_Inject_WaitForInjectAni','Targets','makeActionListAutoAttack','StatusGraphic','_cursorArea','skillId','vertCells','Window_BattleLog_update','helpAreaBottom','isForOneBattleCore','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','thrust','cancelMpLifeSteal','flashDuration','onDatabaseLoaded','pow','_forcedHomeX','createShadowSprite','processPostBattleCommonEvents','needsActorInputCancel','USER-DEFINED\x203','VisuMZ_1_SkillsStatesCore','_pattern','Scene_Battle_needsInputWindowChangeIBS','ShowWeapon','isForNotUser','resetNameTempVisibility','Game_Action_apply','VisuMZ_2_BattleSystemCTB','stbGainInstant','startIcon','ShowFailure','BTB','Sprite_Enemy_setHue','ACTOR_OFFSET_X','updatePosition','PostEndTurnJS','HelpSkillType','ActSeq_Mechanics_BoostPointsStoreData','addWindow','ANGER','itemPadding','drawItemStatus','EFFECT_COMMON_EVENT','VisuMZ_3_ActiveChainSkills','COMBAT\x20LOG','removeChildFromUiContainer','left','2363792ClNRLu','eraseState','requestBalloon','AutoBattle','_cursorSprite','Game_Action_setSubject','ARRAYSTRUCT','round','isCertainHit','Game_Interpreter_updateWaitMode','ArPenFlat','isShownOnBattlePortrait','autoBattleWindowRect','refreshCursor','startGrow','isTriggered','createInnerPortrait','ActSeq_Mechanics_StbExtraAction','balloonId','value2','temporaryVisibile','drawingAreaWidth','removedBuffs','isVisualHpGaugeDisplayed','setActionState','create','actor%1-gauge-%2','shift','_battleCoreBattleResumeAfter','friendsUnit','_colorTone','playCancel','applyDamageCaps','ChargeRate','offsetX','_actions','_opacityDuration','pointX','POST-','anchorY','battleEnd','fillRect','isForOpponentBattleCore','createDigits','ReflectAnimation','addMeleeReturnActionSet','_jumpWholeDuration','_dragonbonesSpriteContainer','meetsUsableItemConditions','normalText','_battleCoreForcedElements','TpbActiveChangeEnabled','refreshActorPortrait','_windowLayer','VisuMZ_0_CoreEngine','checkShowHideSkillNotetags','statusTextAutoBattleStyle','sort','loadBattleback2','createCommandNameWindow','aspect','callUpdateHelp','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','_battler','applyGlobal','jsScaleDown','DistanceY','StatusWindowAttachmentFrontOffsetY','svAnchorX','createLowerLayer','_battlePortrait','allowRandomSpeed','setupBattlebackBattleCore','calcWindowHeight','Window_BattleLog_performMagicEvasion','hitsDmgFmt','clearActiveWeaponSet','isArray','createTroopNote','Text','currentMaxValue','\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','ARRAYJSON','Window_BattleLog_displayCritical','getAttackMotionSlot','isNonSubmenuCancel','trim','AutoBattleOK','setStateTurns','_homeEasing','makeBuffHelpText','string','Window_BattleLog_performCollapse','Immortal','statusWindowRectBorderStyle','ActSeq_Impact_BlueRedInvert','isMagical','_growDuration','battleSys','ShowAddedState','CriticalDmgFlat','isTurnBased','ActSeq_Animation_BalloonIconSpecific','BgType','loadEnemy','MeleeDistance','BattleManager_endAction_ComboWindow','ActSeq_DB_DragonbonesTimeScale','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','Pre','battleInjectAni','version','nameY','iconIndex','minimumStayDuration','displayedParams','drawActorClass','chant','FocusX','isClicked','startActorSelection','startMove','updateWeather','isCancelTriggered','ActSeq_Movement_HomeMoveToTarget','Skill-%1-%2','isEscapeCommandEnabled','%1StartActionJS','JSON','VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20','drawParamData','isDTB','applyGuard','StatusWindowSkinFilename','damageOffsetX','DefaultDamageStyle','equips','processRandomizedData','updateStateIconSprite','excludeListing','ActSeq_Animation_ShowAnimation','ActSeq_Horror_GlitchRemove','createMainSprite','Window_BattleLog_displayActionResults','autoSelectLastSelected','Interrupt','commandName','showNormalAnimation','setBalloonPose','logWindowRect','debuffColor','Window_BattleEnemy_initialize','getSkillTypes','clearDamagePopup','updateHomeMove','_currentAngle','VisuMZ_1_ElementStatusCore','Window_BattleLog_performMiss','ActSeq_Mechanics_EmulateSkillCost','itemTextAlign','_floatHeight','DamageStyleList','HEART','stop','portraitFlipVert','isBattlerFlipped','_tempActor','_pagedownButton','resetBreakShield','enemyHpGaugeRate','damageRate','updatePageButtonVisibility','Mirror','_skewEasing','ActSeq_Zoom_Reset','DefaultStyle','positionOffsetX','Height','CmdIconFight','getDualWieldTimes','ENEMY_OFFSET_Y','comboWindowOffsetY','isRightInputMode','inBattle','Enemy','parent','ShowRemovedState','AGI','Spriteset_Battle_createBattleField','setupDamagePopup','ActSeq_Impact_ShockwaveEachTargets','_targetHomeY','battlerSmoothImage','setWaitMode','EscapeSuccess','stepForward','ElementStatusCore','CriticalHitFlat','isAtbChargingState','ActSeq_Grid_PullToTargetNode','comboWindowOffsetX','_doubleTouch','ActSeq_Horror_NoiseRemove','createMultiTargetWindow','AutoBattleRect','ActSeq_BattleLog_UI','_offsetY','ActorJS','ceil','getEnemyIdWithName','\x5cC[%1]','endAction','PreStartBattleJS','ExtDisplayedParams','Damage','VisuMZ_3_BattleVoices','drawTurnsRemaining','applyBattleCoreJS','changeInputWindow','setTargetBattlerKey','ActionCenteredName','CommonEventID','PartyCmd','alive\x20friends\x20not\x20target','autoRemovalTiming','CheckMapBattleEventValid','shadow','maxItems','1936180ugrsrJ','ActSeq_Mechanics_TextPopup','refreshMotion','_growX','enemyShowParametersIfDefeated','CmdTextAutoBattle','alive\x20actors\x20not\x20target','messageSpeed','autoBattleStyle','StartName','VisuMZ_3_BoostAction','guardSkillId','ScaleUp','DEF','wait','ActSeq_Cutin_WaitForExit','onBattleEnd','CriticalHitRate','_fauxAnimationSprites','createBattleField','canBattlerMove','drawActorFace','338817CKVhQE','applyVariance','addedBuffs','Sprite_Battler_isMoving','Scene_Party','initialize','_mainSprite','forceSelect','startEnemySelection','%1\x20%2','growBattler','hide','_createClientArea','updateRefresh','some','ActSeq_Movement_HomeMoveToPoint','isFrameVisible','MUSIC-NOTE','join','battleCameraData','createStateIconSprite','_targetAngle','selectAll','Game_Action_setItem','ParseItemNotetags','DTB','Window_BattleLog_pushBaseLine','parallaxScrollYinvertEnemy','setImmortal','waitForFloat','needsSelection','createEnemySprite','pageup','buffNameFmt','_angleDuration','isOnCurrentMap','_targetHomeX','all\x20actors','GetParamIcon','CreateCutinSettings','_index','Game_Action_applyGlobal','damageOffsetY','addSkillTypeCommand','Scene_Battle_windowAreaHeight','battleMembers','Sprite_Enemy_setBattler','_hideAllIcons','setLastBattleSkill','updateGrow','targetSpritePosition','getBattlerKeyTargetReplacement','ActSeq_Animation_ActionAnimation','StatusWindowAttachmentBackOffsetY','startActorCommandSelection','Game_BattlerBase_allIconsIBS','ALL\x20SKILLS','isBattlerTargeted','_jumpMaxHeight','param','EscapeFailureJS','drawItemBackground','TRAIT_PARAM','mainSpriteScaleY','states','displayAffectedStatus','isBypassDamageCap','ActSeq_Animation_GuardAnimation','getAttackWeaponAnimationId','show','_active','value1','processEnemyModeTouchBattleCore','playSystemSound','BattleManager_selectNextCommand','commandRemember','MOTIONS','displayMiss','isDebuffAffected','applyCritical','LIGHT\x20BULB'];_0xdf00=function(){return _0x3dce4d;};return _0xdf00();}function Window_EnemyName(){const _0x96db7f=_0x5e79d1;this[_0x96db7f(0xb75)](...arguments);}Window_EnemyName[_0x5e79d1(0x3a9)]=Object['create'](Window_StatusBase[_0x5e79d1(0x3a9)]),Window_EnemyName[_0x5e79d1(0x3a9)]['constructor']=Window_EnemyName,Window_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x282565){const _0x30f3e8=_0x5e79d1;this['_enemyID']=_0x282565,this[_0x30f3e8(0x27e)]='';const _0x3df14b=new Rectangle(0x0,0x0,Graphics[_0x30f3e8(0x486)],this[_0x30f3e8(0x649)]()*0x4);Window_StatusBase[_0x30f3e8(0x3a9)][_0x30f3e8(0xb75)][_0x30f3e8(0x695)](this,_0x3df14b),this[_0x30f3e8(0x1ff)](0x2),this[_0x30f3e8(0x3ba)]=0x0;},Window_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x791)]=function(){const _0x39bcac=_0x5e79d1;this[_0x39bcac(0x749)]=0x0;},Window_EnemyName['prototype']['enemy']=function(){const _0x2b2588=_0x5e79d1;return $gameTroop[_0x2b2588(0x6fd)]()[this['_enemyID']];},Window_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x23b6e9=_0x5e79d1;Window_StatusBase['prototype'][_0x23b6e9(0x3f1)][_0x23b6e9(0x695)](this),this[_0x23b6e9(0xbd5)]()&&this['enemy']()[_0x23b6e9(0x66e)]()!==this[_0x23b6e9(0x27e)]&&(this['_text']=this[_0x23b6e9(0xbd5)]()[_0x23b6e9(0x66e)](),this[_0x23b6e9(0x562)]()),this[_0x23b6e9(0x2aa)](),this[_0x23b6e9(0xa69)]();},Window_EnemyName['prototype'][_0x5e79d1(0x2aa)]=function(){const _0x21f2f8=_0x5e79d1;if(!this[_0x21f2f8(0xbd5)]()){if(this[_0x21f2f8(0x3ba)]>0x0)this['contentsOpacity']-=0x10;}else{if(this[_0x21f2f8(0xbd5)]()['isDead']()){if(this['contentsOpacity']>0x0)this[_0x21f2f8(0x3ba)]-=0x10;}else{if(SceneManager[_0x21f2f8(0xc59)][_0x21f2f8(0x315)]&&SceneManager[_0x21f2f8(0xc59)][_0x21f2f8(0x315)][_0x21f2f8(0x5dc)]&&SceneManager[_0x21f2f8(0xc59)][_0x21f2f8(0x315)][_0x21f2f8(0x275)][_0x21f2f8(0x9fb)](this[_0x21f2f8(0xbd5)]())){if(this[_0x21f2f8(0x3ba)]<0xff)this[_0x21f2f8(0x3ba)]+=0x10;}else this[_0x21f2f8(0x3ba)]>0x0&&(this[_0x21f2f8(0x3ba)]-=0x10);}}},Window_EnemyName[_0x5e79d1(0x3a9)][_0x5e79d1(0xa69)]=function(){const _0x189136=_0x5e79d1;if(!this[_0x189136(0xbd5)]())return;SceneManager[_0x189136(0x44d)]()?this['x']=Graphics['boxWidth']-this['enemy']()[_0x189136(0x949)]()[_0x189136(0x523)]:this['x']=this['enemy']()[_0x189136(0x949)]()['_baseX'];this['x']-=Math['round'](this[_0x189136(0xa0f)]/0x2),this['y']=this[_0x189136(0xbd5)]()[_0x189136(0x949)]()[_0x189136(0x415)]-Math['round'](this['lineHeight']()*1.5);const _0x492ec4=VisuMZ[_0x189136(0x57e)]['Settings'][_0x189136(0xb2e)];this['x']+=_0x492ec4[_0x189136(0x408)]||0x0,this['y']+=_0x492ec4['NameOffsetY']||0x0;},Window_EnemyName['prototype'][_0x5e79d1(0x419)]=function(){const _0x4f2468=_0x5e79d1;Window_Base[_0x4f2468(0x3a9)][_0x4f2468(0x419)][_0x4f2468(0x695)](this),this[_0x4f2468(0x365)][_0x4f2468(0x8ba)]=VisuMZ[_0x4f2468(0x57e)][_0x4f2468(0xc89)][_0x4f2468(0xb2e)][_0x4f2468(0xccd)];},Window_EnemyName['prototype'][_0x5e79d1(0x562)]=function(){const _0x34b6cd=_0x5e79d1;Window_StatusBase['prototype']['refresh'][_0x34b6cd(0x695)](this),this[_0x34b6cd(0x365)][_0x34b6cd(0x438)]();if(!this[_0x34b6cd(0xbd5)]())return;this[_0x34b6cd(0x545)]();},Window_EnemyName[_0x5e79d1(0x3a9)]['drawEnemyName']=function(){const _0x2094a6=_0x5e79d1;this['_text']=this[_0x2094a6(0xbd5)]()[_0x2094a6(0x66e)]();const _0x55256d=this[_0x2094a6(0x55c)](this['_text'])[_0x2094a6(0xa0f)],_0x29ef67=Math[_0x2094a6(0xa7d)]((this[_0x2094a6(0xa21)]-_0x55256d)/0x2);this[_0x2094a6(0x567)](this[_0x2094a6(0x27e)],_0x29ef67,0x0,_0x55256d+0x8);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x2e4)]=function(){const _0x1013e2=_0x5e79d1;return VisuMZ['BattleCore'][_0x1013e2(0xc89)][_0x1013e2(0x97d)][_0x1013e2(0x30d)];},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xb61)]=function(){const _0x47ac3f=_0x5e79d1;return VisuMZ[_0x47ac3f(0x57e)][_0x47ac3f(0xc89)][_0x47ac3f(0x97d)][_0x47ac3f(0xc01)];},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x3e7)]=function(){const _0x5235de=_0x5e79d1;return VisuMZ[_0x5235de(0x57e)][_0x5235de(0xc89)][_0x5235de(0x97d)][_0x5235de(0xbd6)];},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x513)]=function(){return![];},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x8b2)]=function(_0x540f25,_0x49273b){const _0x24ae65=_0x5e79d1;this['unshift'](_0x24ae65(0x27f)),BattleManager[_0x24ae65(0x620)](_0x540f25,_0x49273b),this['callNextMethod']();},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x8f3)]=function(_0x3e5ccf,_0x144087,_0x18948f){const _0x350855=_0x5e79d1;this[_0x350855(0xa0b)]('actionSplicePoint'),BattleManager[_0x350855(0x44b)](_0x3e5ccf,_0x144087,_0x18948f),this[_0x350855(0x451)]();},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x27f)]=function(){const _0x3d1002=_0x5e79d1;this[_0x3d1002(0x451)]();},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x68a)]=function(_0x438c62){const _0x516556=_0x5e79d1,_0x59fb3c=Array['prototype'][_0x516556(0x9b1)][_0x516556(0x695)](arguments,0x1),_0x2b286b={'name':_0x438c62,'params':_0x59fb3c},_0x192e0b=this['_methods'][_0x516556(0x343)](_0x4e1dd8=>_0x4e1dd8['name'])[_0x516556(0x985)](_0x516556(0x27f));_0x192e0b>=0x0?this['_methods'][_0x516556(0x387)](_0x192e0b,0x0,_0x2b286b):this[_0x516556(0x4fa)]['push'](_0x2b286b);},Window_BattleLog[_0x5e79d1(0x3a9)]['unshift']=function(_0x58978c){const _0x5801c4=_0x5e79d1,_0x3d573f=Array[_0x5801c4(0x3a9)][_0x5801c4(0x9b1)][_0x5801c4(0x695)](arguments,0x1);this['_methods'][_0x5801c4(0xa0b)]({'name':_0x58978c,'params':_0x3d573f});},Window_BattleLog['prototype']['logActionList']=function(){const _0x52c597=_0x5e79d1;if(!$gameTemp['isPlaytest']())return;console[_0x52c597(0x346)](this[_0x52c597(0x4fa)][_0x52c597(0x343)](_0x362981=>_0x362981[_0x52c597(0x66e)])[_0x52c597(0xb82)]('\x0a'));},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x742)]=Window_BattleLog['prototype']['refresh'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x562)]=function(){const _0x2926f1=_0x5e79d1;this[_0x2926f1(0x94f)]=!![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xa4d)]=Window_BattleLog['prototype']['update'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x5bcb16=_0x5e79d1;VisuMZ[_0x5bcb16(0x57e)]['Window_BattleLog_update'][_0x5bcb16(0x695)](this);if(this[_0x5bcb16(0x94f)])this[_0x5bcb16(0x6ba)]();},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x6ba)]=function(){const _0xdb011=_0x5e79d1;this[_0xdb011(0x94f)]=![],VisuMZ['BattleCore'][_0xdb011(0x742)][_0xdb011(0x695)](this);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x325)]=function(_0x52aa6a){const _0x258cb9=_0x5e79d1;let _0x5e0812=VisuMZ['BattleCore'][_0x258cb9(0xc89)][_0x258cb9(0x97d)][_0x258cb9(0x8a4)][_0x258cb9(0xbee)]()[_0x258cb9(0xacc)](),_0x1331cd=this[_0x258cb9(0xc98)][_0x52aa6a];if(_0x1331cd[_0x258cb9(0xcd4)](/<LEFT>/i))_0x5e0812=_0x258cb9(0xa75);else{if(_0x1331cd[_0x258cb9(0xcd4)](/<CENTER>/i))_0x5e0812=_0x258cb9(0x2ad);else _0x1331cd[_0x258cb9(0xcd4)](/<RIGHT>/i)&&(_0x5e0812=_0x258cb9(0x2e6));}_0x1331cd=_0x1331cd[_0x258cb9(0x4f6)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1331cd=_0x1331cd[_0x258cb9(0x4f6)](/\\I\[0\]/gi,'');const _0x10fd32=this[_0x258cb9(0x713)](_0x52aa6a);this[_0x258cb9(0x365)][_0x258cb9(0x87e)](_0x10fd32['x'],_0x10fd32['y'],_0x10fd32[_0x258cb9(0xa0f)],_0x10fd32[_0x258cb9(0x912)]);const _0x84cef7=this[_0x258cb9(0x55c)](_0x1331cd)['width'];let _0x380ecb=_0x10fd32['x'];if(_0x5e0812===_0x258cb9(0x2ad))_0x380ecb+=(_0x10fd32['width']-_0x84cef7)/0x2;else _0x5e0812==='right'&&(_0x380ecb+=_0x10fd32['width']-_0x84cef7);this[_0x258cb9(0x567)](_0x1331cd,_0x380ecb,_0x10fd32['y'],_0x84cef7+0x8);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x979)]=function(_0x48c204){const _0x450a9f=_0x5e79d1;this[_0x450a9f(0xc98)][_0x450a9f(0x68a)](_0x48c204),this[_0x450a9f(0x562)](),this[_0x450a9f(0x451)]();},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x34a)]=function(){const _0x1b9ded=_0x5e79d1;let _0x9afead=![];switch(this[_0x1b9ded(0x350)]){case _0x1b9ded(0x6d8):_0x9afead=this[_0x1b9ded(0x29c)][_0x1b9ded(0xcb5)]();break;case _0x1b9ded(0x4a1):_0x9afead=this['_spriteset'][_0x1b9ded(0x2bd)]();break;case _0x1b9ded(0x6b2):_0x9afead=this[_0x1b9ded(0x29c)][_0x1b9ded(0x5c6)]();break;case _0x1b9ded(0x23b):_0x9afead=this[_0x1b9ded(0x29c)][_0x1b9ded(0x9d6)]();break;case _0x1b9ded(0x42f):_0x9afead=this[_0x1b9ded(0x29c)][_0x1b9ded(0x373)]();break;case'opacity':_0x9afead=this[_0x1b9ded(0x29c)]['isAnyoneChangingOpacity']();break;}return!_0x9afead&&(this['_waitMode']=''),_0x9afead;},Window_BattleLog['prototype'][_0x5e79d1(0x277)]=function(){const _0x35b66e=_0x5e79d1;this[_0x35b66e(0xb37)](_0x35b66e(0x6b2));},Window_BattleLog['prototype'][_0x5e79d1(0xb8d)]=function(){this['setWaitMode']('float');},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xc93)]=function(){const _0x2f8efe=_0x5e79d1;this[_0x2f8efe(0xb37)](_0x2f8efe(0x42f));},Window_BattleLog['prototype']['waitForOpacity']=function(){this['setWaitMode']('opacity');},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x36a)]=function(){const _0x180c08=_0x5e79d1,_0x2dabb3=VisuMZ['BattleCore'][_0x180c08(0xc89)][_0x180c08(0x97d)];if(!_0x2dabb3['StartTurnShow'])return;this[_0x180c08(0x68a)](_0x180c08(0x979),_0x2dabb3[_0x180c08(0x9c5)][_0x180c08(0x2a0)]($gameTroop['turnCount']())),this['push'](_0x180c08(0x2f4),_0x2dabb3[_0x180c08(0xc45)]),this[_0x180c08(0x68a)](_0x180c08(0x438));};var $subject,$action,$targets;Window_BattleLog['prototype'][_0x5e79d1(0x5b6)]=function(_0x58d929,_0x169151,_0x373210){const _0x3c1a13=_0x5e79d1;$subject=_0x58d929,$action=_0x169151,$targets=_0x373210,this['isCustomActionSequence'](_0x169151)?BattleManager['prepareCustomActionSequence']():this[_0x3c1a13(0x643)](_0x58d929,_0x169151,_0x373210);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x78d)]=function(_0x75d9a8){const _0x181344=_0x5e79d1;if(!SceneManager['isSceneBattle']())return![];if(!_0x75d9a8)return![];if(!_0x75d9a8['item']())return![];if(_0x75d9a8[_0x181344(0x990)]()['note'][_0x181344(0xcd4)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x181344(0x2da)](_0x75d9a8['item']()))return!![];return![];},Window_BattleLog[_0x5e79d1(0x3a9)]['usePremadeActionSequence']=function(_0x4ebac3,_0x197fe2,_0x5c477f){const _0x35367b=_0x5e79d1;this[_0x35367b(0x3a2)](_0x4ebac3,_0x197fe2,_0x5c477f),this['createEffectActionSet'](_0x4ebac3,_0x197fe2,_0x5c477f),this[_0x35367b(0x3f3)](_0x4ebac3,_0x197fe2,_0x5c477f);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x943)]=function(_0x537760,_0x503ef7){const _0x54eb99=_0x5e79d1,_0x5978fd=VisuMZ[_0x54eb99(0x57e)]['Settings'][_0x54eb99(0x97d)];_0x5978fd[_0x54eb99(0xb52)]&&this[_0x54eb99(0x68a)]('addText',_0x54eb99(0x411)[_0x54eb99(0x2a0)](DataManager['battleDisplayText'](_0x503ef7)));if(DataManager[_0x54eb99(0x241)](_0x503ef7)){if(_0x5978fd[_0x54eb99(0x540)])this[_0x54eb99(0xc21)](_0x503ef7[_0x54eb99(0x8db)],_0x537760,_0x503ef7);if(_0x5978fd[_0x54eb99(0x641)])this['displayItemMessage'](_0x503ef7[_0x54eb99(0x72e)],_0x537760,_0x503ef7);}else{if(_0x5978fd[_0x54eb99(0x757)])this[_0x54eb99(0xc21)](TextManager['useItem'],_0x537760,_0x503ef7);}},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x3a2)]=function(_0x4cad47,_0x16d090,_0x2a2dd5){const _0x1ed021=_0x5e79d1,_0x590754=_0x16d090[_0x1ed021(0x990)]();this[_0x1ed021(0x943)](_0x4cad47,_0x590754),this[_0x1ed021(0x68a)](_0x1ed021(0x820),_0x4cad47,_0x2a2dd5,!![]),this[_0x1ed021(0x68a)](_0x1ed021(0x77e),_0x4cad47,_0x16d090),this['push']('waitForMovement'),this[_0x1ed021(0x68a)](_0x1ed021(0x821),_0x4cad47,_0x16d090),this[_0x1ed021(0x68a)](_0x1ed021(0x277));},Window_BattleLog['prototype'][_0x5e79d1(0x782)]=function(_0x5ed18b,_0x4656d7,_0x336ba5){const _0x1cd8a5=_0x5e79d1;if(this['isMeleeSingleTargetAction'](_0x4656d7))this[_0x1cd8a5(0x248)](_0x5ed18b,_0x4656d7,_0x336ba5);else{if(this[_0x1cd8a5(0x296)](_0x4656d7))this[_0x1cd8a5(0xc37)](_0x5ed18b,_0x4656d7,_0x336ba5);else _0x4656d7[_0x1cd8a5(0x6fb)]()?this['targetActionSet'](_0x5ed18b,_0x4656d7,_0x336ba5):this[_0x1cd8a5(0x34e)](_0x5ed18b,_0x4656d7,_0x336ba5);}},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xaa3)]=function(_0x362410,_0x434d0f,_0x3dbd50,_0x19c30e){const _0x3ff102=_0x5e79d1;if(_0x434d0f){const _0x4d88bd=_0x362410['battler']();this[_0x3ff102(0x68a)](_0x3ff102(0x541),[_0x362410],_0x3dbd50,_0x19c30e),this[_0x3ff102(0x68a)](_0x3ff102(0xcc9),_0x362410,_0x4d88bd['_homeX'],_0x4d88bd[_0x3ff102(0x39e)],_0x19c30e,![],_0x3ff102(0xc80)),this['push'](_0x3ff102(0x792),[_0x362410],_0x3ff102(0x7d8)),this[_0x3ff102(0x68a)](_0x3ff102(0x815)),this[_0x3ff102(0x68a)](_0x3ff102(0x792),[_0x362410],_0x3ff102(0x42e));}},Window_BattleLog['prototype']['isMeleeSingleTargetAction']=function(_0x481959){const _0x1e47d4=_0x5e79d1;if(!_0x481959[_0x1e47d4(0x8a8)]())return![];if(!_0x481959[_0x1e47d4(0xc2e)]())return![];if(!_0x481959[_0x1e47d4(0x82d)]())return![];return VisuMZ[_0x1e47d4(0x57e)][_0x1e47d4(0xc89)][_0x1e47d4(0x37e)]['AutoMeleeSolo'];},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x248)]=function(_0x5c5402,_0x2490b,_0x383235){const _0x2b7e4b=_0x5e79d1,_0x356b7c=_0x5c5402[_0x2b7e4b(0x366)]()['type']<0x2,_0x3f8120=0x14,_0x566972=0x30;let _0xd571e6=!![];_0x383235[_0x2b7e4b(0xc35)]>0x0&&_0x5c5402[_0x2b7e4b(0x2ff)]()===_0x383235[0x0][_0x2b7e4b(0x2ff)]()&&(_0xd571e6=![]);_0x356b7c&&_0xd571e6&&(this[_0x2b7e4b(0x68a)](_0x2b7e4b(0x541),[_0x5c5402],_0x566972,_0x3f8120),this[_0x2b7e4b(0x68a)]('performMoveToTargets',_0x5c5402,_0x383235,_0x2b7e4b(0x309),_0x3f8120,!![],_0x2b7e4b(0xc80),!![]),this[_0x2b7e4b(0x68a)](_0x2b7e4b(0x792),[_0x5c5402],_0x2b7e4b(0x42e)),this[_0x2b7e4b(0x68a)](_0x2b7e4b(0x815)));let _0x54bfdb=_0x2490b['isAttack']()?this[_0x2b7e4b(0xb29)](_0x5c5402):0x1;for(let _0x3b485a=0x0;_0x3b485a<_0x54bfdb;_0x3b485a++){_0x2490b[_0x2b7e4b(0xbeb)]()&&_0x5c5402['isActor']()&&this[_0x2b7e4b(0x68a)](_0x2b7e4b(0x4dd),_0x5c5402,_0x3b485a),_0x2490b[_0x2b7e4b(0x990)]()[_0x2b7e4b(0x90e)]<0x0?this[_0x2b7e4b(0x1e7)](_0x5c5402,_0x2490b,_0x383235):this['wholeActionSet'](_0x5c5402,_0x2490b,_0x383235);}_0x2490b[_0x2b7e4b(0xbeb)]()&&_0x5c5402[_0x2b7e4b(0x2ff)]()&&this[_0x2b7e4b(0x68a)](_0x2b7e4b(0xac2),_0x5c5402),this['push'](_0x2b7e4b(0x820),_0x5c5402,_0x383235,![]),this[_0x2b7e4b(0xaa3)](_0x5c5402,_0x356b7c,_0x566972,_0x3f8120);},Window_BattleLog[_0x5e79d1(0x3a9)]['isMeleeMultiTargetAction']=function(_0x43b0b9){const _0x750549=_0x5e79d1;if(!_0x43b0b9[_0x750549(0x8a8)]())return![];if(!_0x43b0b9[_0x750549(0x477)]())return![];if(!_0x43b0b9[_0x750549(0x82d)]())return![];return VisuMZ[_0x750549(0x57e)][_0x750549(0xc89)][_0x750549(0x37e)][_0x750549(0x873)];},Window_BattleLog['prototype']['autoMeleeMultiTargetActionSet']=function(_0x3d1648,_0x244c8b,_0x27453f){const _0x52aab6=_0x5e79d1,_0x4f6c40=_0x3d1648[_0x52aab6(0x366)]()[_0x52aab6(0x31c)]<0x2,_0x504e63=0x14,_0x30f4fa=0x30;if(_0x4f6c40){this[_0x52aab6(0x68a)](_0x52aab6(0x541),[_0x3d1648],_0x30f4fa,_0x504e63);const _0x353994=_0x27453f[_0x52aab6(0xc35)]>0x1?_0x52aab6(0x9a7):_0x52aab6(0x309);this['push']('performMoveToTargets',_0x3d1648,_0x27453f,_0x353994,_0x504e63,!![],_0x52aab6(0xc80),!![]),this[_0x52aab6(0x68a)]('requestMotion',[_0x3d1648],_0x52aab6(0x42e)),this[_0x52aab6(0x68a)]('waitForMovement');}let _0x216d1f=_0x244c8b['isAttack']()?this['getDualWieldTimes'](_0x3d1648):0x1;for(let _0x4c49a4=0x0;_0x4c49a4<_0x216d1f;_0x4c49a4++){_0x244c8b[_0x52aab6(0xbeb)]()&&_0x3d1648[_0x52aab6(0x2ff)]()&&this['push'](_0x52aab6(0x4dd),_0x3d1648,_0x4c49a4),this['wholeActionSet'](_0x3d1648,_0x244c8b,_0x27453f);}_0x244c8b[_0x52aab6(0xbeb)]()&&_0x3d1648['isActor']()&&this[_0x52aab6(0x68a)](_0x52aab6(0xac2),_0x3d1648),this[_0x52aab6(0x68a)]('applyImmortal',_0x3d1648,_0x27453f,![]),this[_0x52aab6(0xaa3)](_0x3d1648,_0x4f6c40,_0x30f4fa,_0x504e63);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x1e7)]=function(_0x4079a2,_0x9e1740,_0x55d8cb){const _0x3a9f86=_0x5e79d1,_0x5a6075=_0x9e1740['item']();for(const _0x1768e7 of _0x55d8cb){if(!_0x1768e7)continue;this[_0x3a9f86(0x68a)](_0x3a9f86(0x537),_0x4079a2,_0x9e1740),this[_0x3a9f86(0x68a)](_0x3a9f86(0x2f4),Sprite_Battler[_0x3a9f86(0x8d7)]),this[_0x3a9f86(0x68a)](_0x3a9f86(0x4c2),_0x4079a2,[_0x1768e7],_0x5a6075[_0x3a9f86(0x90e)]),this['push'](_0x3a9f86(0x2f4),0x18),this[_0x3a9f86(0x68a)](_0x3a9f86(0x8b2),_0x4079a2,_0x1768e7);}},Window_BattleLog[_0x5e79d1(0x3a9)]['wholeActionSet']=function(_0xbd2cb0,_0x3af682,_0x51ebb8){const _0x2e17c5=_0x5e79d1,_0x3f3eca=_0x3af682[_0x2e17c5(0x990)]();let _0x22dd02=_0x3af682['isAttack']()?0x1+_0xbd2cb0[_0x2e17c5(0x2df)]():0x1;while(_0x22dd02--){this[_0x2e17c5(0x68a)](_0x2e17c5(0x537),_0xbd2cb0,_0x3af682),this[_0x2e17c5(0x68a)](_0x2e17c5(0x2f4),Sprite_Battler[_0x2e17c5(0x8d7)]),this[_0x2e17c5(0x68a)](_0x2e17c5(0x4c2),_0xbd2cb0,_0x51ebb8[_0x2e17c5(0x689)](),_0x3f3eca['animationId']),this[_0x2e17c5(0x68a)]('waitForAnimation');}for(const _0x44ef53 of _0x51ebb8){if(!_0x44ef53)continue;this[_0x2e17c5(0x68a)]('actionEffect',_0xbd2cb0,_0x44ef53);}},Window_BattleLog[_0x5e79d1(0x3a9)]['finishActionSet']=function(_0x471ab0,_0xde78c0,_0x2d9033){const _0x34a253=_0x5e79d1,_0x3130d2=_0xde78c0[_0x34a253(0x990)]();this['push'](_0x34a253(0x820),_0x471ab0,_0x2d9033,![]),this[_0x34a253(0x68a)](_0x34a253(0x90c)),this[_0x34a253(0x68a)](_0x34a253(0x907)),this[_0x34a253(0x68a)]('clear'),this[_0x34a253(0x68a)](_0x34a253(0x554),_0x471ab0),this[_0x34a253(0x68a)](_0x34a253(0x815));},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xb49)]=function(_0x37903a){$subject=null,$action=null,$targets=[];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x1df)]=Window_BattleLog[_0x5e79d1(0x3a9)]['displayCurrentState'],Window_BattleLog['prototype'][_0x5e79d1(0x71e)]=function(_0x32e380){const _0x111e7b=_0x5e79d1;if(!VisuMZ[_0x111e7b(0x57e)][_0x111e7b(0xc89)][_0x111e7b(0x97d)][_0x111e7b(0x9b6)])return;VisuMZ[_0x111e7b(0x57e)][_0x111e7b(0x1df)][_0x111e7b(0x695)](this,_0x32e380);},Window_BattleLog['prototype'][_0x5e79d1(0x2a6)]=function(_0x30e3f6){const _0x2f5a30=_0x5e79d1;this[_0x2f5a30(0x68a)](_0x2f5a30(0x94d),_0x30e3f6);VisuMZ[_0x2f5a30(0x57e)][_0x2f5a30(0xc89)][_0x2f5a30(0x37e)]['CounterPlayback']&&this[_0x2f5a30(0x68a)]('showAnimation',_0x30e3f6,[BattleManager[_0x2f5a30(0x5c2)]],-0x1);if(!VisuMZ['BattleCore'][_0x2f5a30(0xc89)][_0x2f5a30(0x97d)][_0x2f5a30(0x53e)])return;this[_0x2f5a30(0x68a)]('addText',TextManager[_0x2f5a30(0x602)][_0x2f5a30(0x2a0)](_0x30e3f6[_0x2f5a30(0x66e)]()));},Window_BattleLog[_0x5e79d1(0x3a9)]['displayReflection']=function(_0x59752a){const _0x4017d3=_0x5e79d1;this[_0x4017d3(0x68a)](_0x4017d3(0x316),_0x59752a);if(!VisuMZ[_0x4017d3(0x57e)][_0x4017d3(0xc89)][_0x4017d3(0x97d)]['ShowReflect'])return;this[_0x4017d3(0x68a)](_0x4017d3(0x979),TextManager[_0x4017d3(0x50a)]['format'](_0x59752a[_0x4017d3(0x66e)]()));},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x877)]=function(_0x35484c,_0x3197e8){const _0x1ef550=_0x5e79d1;if(VisuMZ[_0x1ef550(0x57e)][_0x1ef550(0xc89)][_0x1ef550(0x37e)][_0x1ef550(0x7fd)]){const _0x32641a=_0x3197e8[_0x1ef550(0x990)]();this[_0x1ef550(0x68a)]('showAnimation',_0x35484c,[_0x35484c],_0x32641a['animationId']);}},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x8d2)]=function(_0x47fcad,_0x285680){const _0x12b173=_0x5e79d1;this[_0x12b173(0x68a)](_0x12b173(0x70b),_0x47fcad,_0x285680);if(!VisuMZ['BattleCore']['Settings'][_0x12b173(0x97d)]['ShowSubstitute'])return;const _0x3ddb95=_0x47fcad['name'](),_0x30894c=TextManager[_0x12b173(0xc40)]['format'](_0x3ddb95,_0x285680[_0x12b173(0x66e)]());this[_0x12b173(0x68a)](_0x12b173(0x979),_0x30894c);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xb05)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x736)],Window_BattleLog[_0x5e79d1(0x3a9)]['displayActionResults']=function(_0x26f62e,_0x515dfd){const _0xd981a2=_0x5e79d1;VisuMZ[_0xd981a2(0x57e)]['Window_BattleLog_displayActionResults']['call'](this,_0x26f62e,_0x515dfd);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xbcd)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x46f)],Window_BattleLog['prototype'][_0x5e79d1(0x46f)]=function(_0x4d5b6a){const _0x360e09=_0x5e79d1;if(!VisuMZ[_0x360e09(0x57e)]['Settings'][_0x360e09(0x97d)][_0x360e09(0xa65)])return;VisuMZ['BattleCore'][_0x360e09(0xbcd)]['call'](this,_0x4d5b6a);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xac9)]=Window_BattleLog[_0x5e79d1(0x3a9)]['displayCritical'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x28b)]=function(_0x4bb7ab){const _0x4fd817=_0x5e79d1;if(!VisuMZ[_0x4fd817(0x57e)]['Settings'][_0x4fd817(0x97d)][_0x4fd817(0x796)])return;VisuMZ[_0x4fd817(0x57e)][_0x4fd817(0xac9)][_0x4fd817(0x695)](this,_0x4bb7ab);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x4a3)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xbbd)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xbbd)]=function(_0x19418b){const _0x3ffff6=_0x5e79d1;!VisuMZ[_0x3ffff6(0x57e)][_0x3ffff6(0xc89)][_0x3ffff6(0x97d)][_0x3ffff6(0x58b)]?this[_0x3ffff6(0x68a)](_0x3ffff6(0x2ab),_0x19418b):VisuMZ[_0x3ffff6(0x57e)]['Window_BattleLog_displayMiss'][_0x3ffff6(0x695)](this,_0x19418b);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x863)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x659)],Window_BattleLog['prototype'][_0x5e79d1(0x659)]=function(_0x82a90d){const _0x22b98f=_0x5e79d1;!VisuMZ[_0x22b98f(0x57e)][_0x22b98f(0xc89)][_0x22b98f(0x97d)][_0x22b98f(0x58b)]?_0x82a90d['result']()[_0x22b98f(0x729)]?this[_0x22b98f(0x68a)](_0x22b98f(0x3c3),_0x82a90d):this[_0x22b98f(0x68a)](_0x22b98f(0x7ab),_0x82a90d):VisuMZ['BattleCore'][_0x22b98f(0x863)][_0x22b98f(0x695)](this,_0x82a90d);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x2c8)]=function(_0x11df2d){const _0x5a8057=_0x5e79d1;_0x11df2d[_0x5a8057(0xbe0)]()[_0x5a8057(0x7b1)]&&(_0x11df2d['_lastHpDamage']=0x0,_0x11df2d['result']()[_0x5a8057(0x90f)]>0x0&&!_0x11df2d[_0x5a8057(0xbe0)]()[_0x5a8057(0x89d)]&&(_0x11df2d['_lastHpDamage']=_0x11df2d[_0x5a8057(0xbe0)]()[_0x5a8057(0x90f)],this[_0x5a8057(0x68a)](_0x5a8057(0x7ce),_0x11df2d)),_0x11df2d[_0x5a8057(0xbe0)]()[_0x5a8057(0x90f)]<0x0&&this[_0x5a8057(0x68a)]('performRecovery',_0x11df2d),VisuMZ[_0x5a8057(0x57e)]['Settings'][_0x5a8057(0x97d)]['ShowHpDmg']&&this[_0x5a8057(0x68a)](_0x5a8057(0x979),this['makeHpDamageText'](_0x11df2d)));},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x257)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x370)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x370)]=function(_0x411e57){const _0xd4811=_0x5e79d1;if(!VisuMZ['BattleCore'][_0xd4811(0xc89)][_0xd4811(0x97d)][_0xd4811(0x3d8)])return;VisuMZ[_0xd4811(0x57e)][_0xd4811(0x257)]['call'](this,_0x411e57);},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x2eb)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x89b)],Window_BattleLog[_0x5e79d1(0x3a9)]['displayTpDamage']=function(_0x2c84e7){const _0x3bab88=_0x5e79d1;if(!VisuMZ[_0x3bab88(0x57e)]['Settings'][_0x3bab88(0x97d)]['ShowTpDmg'])return;VisuMZ[_0x3bab88(0x57e)][_0x3bab88(0x2eb)][_0x3bab88(0x695)](this,_0x2c84e7);},Window_BattleLog['prototype'][_0x5e79d1(0xbb1)]=function(_0x2ad220){const _0x4b9650=_0x5e79d1;_0x2ad220[_0x4b9650(0xbe0)]()[_0x4b9650(0x518)]()&&(this[_0x4b9650(0x68a)](_0x4b9650(0x24e)),this['displayChangedStates'](_0x2ad220),this[_0x4b9650(0x7e5)](_0x2ad220),this[_0x4b9650(0x68a)](_0x4b9650(0x90c)));},Window_BattleLog['prototype'][_0x5e79d1(0x584)]=function(_0x2e224f){const _0x18cd53=_0x5e79d1,_0x24a77b=_0x2e224f[_0x18cd53(0xbe0)](),_0x4f6212=_0x24a77b[_0x18cd53(0xcda)]();for(const _0x511458 of _0x4f6212){const _0x4ec473=_0x2e224f['isActor']()?_0x511458[_0x18cd53(0x8db)]:_0x511458[_0x18cd53(0x72e)];_0x4ec473&&VisuMZ[_0x18cd53(0x57e)][_0x18cd53(0xc89)]['BattleLog'][_0x18cd53(0xad9)]&&(this[_0x18cd53(0x68a)](_0x18cd53(0xc8b)),this[_0x18cd53(0x68a)](_0x18cd53(0x255)),this['push'](_0x18cd53(0x24e)),this[_0x18cd53(0x68a)](_0x18cd53(0x979),_0x4ec473[_0x18cd53(0x2a0)](_0x2e224f['name']())),this[_0x18cd53(0x68a)]('wait')),_0x511458['id']===_0x2e224f[_0x18cd53(0x3d9)]()&&this['push'](_0x18cd53(0x948),_0x2e224f);}},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xc8b)]=function(){},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x5a7)]=function(_0x148b22){const _0x1faae4=_0x5e79d1;if(!VisuMZ[_0x1faae4(0x57e)][_0x1faae4(0xc89)][_0x1faae4(0x97d)][_0x1faae4(0xb30)])return;const _0x5bdc28=_0x148b22[_0x1faae4(0xbe0)](),_0x515a7b=_0x5bdc28[_0x1faae4(0x8f5)]();for(const _0x38d07d of _0x515a7b){_0x38d07d[_0x1faae4(0x8c5)]&&(this[_0x1faae4(0x68a)](_0x1faae4(0x30b)),this[_0x1faae4(0x68a)](_0x1faae4(0x255)),this[_0x1faae4(0x68a)](_0x1faae4(0x24e)),this[_0x1faae4(0x68a)](_0x1faae4(0x979),_0x38d07d[_0x1faae4(0x8c5)]['format'](_0x148b22[_0x1faae4(0x66e)]())),this[_0x1faae4(0x68a)]('wait'));}},Window_BattleLog['prototype'][_0x5e79d1(0x30b)]=function(){},Window_BattleLog['prototype'][_0x5e79d1(0x7e5)]=function(_0xcb296){const _0x1f873c=_0x5e79d1,_0x55e2d3=VisuMZ['BattleCore'][_0x1f873c(0xc89)][_0x1f873c(0x97d)],_0x26cf67=_0xcb296['result']();if(_0x55e2d3['ShowAddedBuff'])this['displayBuffs'](_0xcb296,_0x26cf67[_0x1f873c(0xb72)],TextManager[_0x1f873c(0x5c1)]);if(_0x55e2d3[_0x1f873c(0xa04)])this[_0x1f873c(0xcf2)](_0xcb296,_0x26cf67[_0x1f873c(0xa0c)],TextManager[_0x1f873c(0x529)]);if(_0x55e2d3[_0x1f873c(0x1db)])this[_0x1f873c(0xcf2)](_0xcb296,_0x26cf67[_0x1f873c(0xa8c)],TextManager[_0x1f873c(0x7a4)]);},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xcf2)]=function(_0xccb7cd,_0x4b2941,_0x4c1127){const _0x352f56=_0x5e79d1;for(const _0x57ca48 of _0x4b2941){const _0x551008=_0x4c1127[_0x352f56(0x2a0)](_0xccb7cd['name'](),TextManager[_0x352f56(0xbab)](_0x57ca48));this[_0x352f56(0x68a)](_0x352f56(0x255)),this[_0x352f56(0x68a)]('pushBaseLine'),this['push'](_0x352f56(0x979),_0x551008),this[_0x352f56(0x68a)](_0x352f56(0xb68));}},VisuMZ['BattleCore']['Window_BattleLog_clear']=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x438)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x438)]=function(){const _0x888614=_0x5e79d1;VisuMZ[_0x888614(0x57e)]['Window_BattleLog_clear'][_0x888614(0x695)](this),this[_0x888614(0x451)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xb8a)]=Window_BattleLog[_0x5e79d1(0x3a9)]['pushBaseLine'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x24e)]=function(){const _0x529c29=_0x5e79d1;VisuMZ[_0x529c29(0x57e)][_0x529c29(0xb8a)]['call'](this),this[_0x529c29(0x451)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x73a)]=Window_BattleLog['prototype'][_0x5e79d1(0x255)],Window_BattleLog['prototype']['popBaseLine']=function(){const _0x5dd125=_0x5e79d1;VisuMZ[_0x5dd125(0x57e)][_0x5dd125(0x73a)][_0x5dd125(0x695)](this),this[_0x5dd125(0x6ba)](),this['callNextMethod']();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x6e0)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x7f2)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x7f2)]=function(_0x486f45){const _0x4db941=_0x5e79d1;VisuMZ[_0x4db941(0x57e)][_0x4db941(0x6e0)][_0x4db941(0x695)](this,_0x486f45),this[_0x4db941(0x451)]();},Window_BattleLog['prototype'][_0x5e79d1(0x90c)]=function(){const _0x3eef41=_0x5e79d1;let _0x2fc2e3=0x0;this[_0x3eef41(0x887)][_0x3eef41(0xc35)]>0x0&&(_0x2fc2e3=this[_0x3eef41(0x887)][this['_baseLineStack'][_0x3eef41(0xc35)]-0x1]),this[_0x3eef41(0xc98)][_0x3eef41(0xc35)]>_0x2fc2e3?this['wait']():this[_0x3eef41(0x451)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x9d8)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x77e)],Window_BattleLog[_0x5e79d1(0x3a9)]['performActionStart']=function(_0x5453b5,_0x58a412){const _0x1a39cc=_0x5e79d1;VisuMZ[_0x1a39cc(0x57e)][_0x1a39cc(0x9d8)]['call'](this,_0x5453b5,_0x58a412),this[_0x1a39cc(0x451)]();},VisuMZ[_0x5e79d1(0x57e)]['Window_BattleLog_performAction']=Window_BattleLog[_0x5e79d1(0x3a9)]['performAction'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x537)]=function(_0x3c9407,_0xdfe0af){const _0x47fb1a=_0x5e79d1;VisuMZ[_0x47fb1a(0x57e)][_0x47fb1a(0x253)][_0x47fb1a(0x695)](this,_0x3c9407,_0xdfe0af),this[_0x47fb1a(0x451)]();},VisuMZ[_0x5e79d1(0x57e)]['Window_BattleLog_performActionEnd']=Window_BattleLog[_0x5e79d1(0x3a9)]['performActionEnd'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x554)]=function(_0x4b4676){const _0x185bb1=_0x5e79d1;VisuMZ[_0x185bb1(0x57e)][_0x185bb1(0x911)][_0x185bb1(0x695)](this,_0x4b4676);for(const _0x4a39e0 of BattleManager[_0x185bb1(0xc4c)]()){if(!_0x4a39e0)continue;if(_0x4a39e0[_0x185bb1(0x5d8)]())continue;_0x4a39e0[_0x185bb1(0xbe9)]();}this[_0x185bb1(0x451)]();},VisuMZ[_0x5e79d1(0x57e)]['Window_BattleLog_performDamage']=Window_BattleLog[_0x5e79d1(0x3a9)]['performDamage'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ce)]=function(_0x35587f){const _0x39b511=_0x5e79d1;VisuMZ[_0x39b511(0x57e)]['Window_BattleLog_performDamage']['call'](this,_0x35587f),this[_0x39b511(0x451)]();},VisuMZ[_0x5e79d1(0x57e)]['Window_BattleLog_performMiss']=Window_BattleLog['prototype'][_0x5e79d1(0x2ab)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x2ab)]=function(_0x29c265){const _0x51da66=_0x5e79d1;VisuMZ['BattleCore'][_0x51da66(0xb13)][_0x51da66(0x695)](this,_0x29c265),this[_0x51da66(0x451)]();},VisuMZ['BattleCore'][_0x5e79d1(0x23a)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xce4)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0xce4)]=function(_0x30d905){const _0xd068eb=_0x5e79d1;VisuMZ[_0xd068eb(0x57e)]['Window_BattleLog_performRecovery'][_0xd068eb(0x695)](this,_0x30d905),this[_0xd068eb(0x451)]();},VisuMZ['BattleCore'][_0x5e79d1(0x447)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x3c3)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x3c3)]=function(_0x4fa8f4){const _0x414783=_0x5e79d1;VisuMZ[_0x414783(0x57e)][_0x414783(0x447)][_0x414783(0x695)](this,_0x4fa8f4),this['callNextMethod']();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xac0)]=Window_BattleLog[_0x5e79d1(0x3a9)]['performMagicEvasion'],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ab)]=function(_0x3ab0f8){const _0x3d5be7=_0x5e79d1;VisuMZ[_0x3d5be7(0x57e)][_0x3d5be7(0xac0)][_0x3d5be7(0x695)](this,_0x3ab0f8),this[_0x3d5be7(0x451)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc96)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x94d)],Window_BattleLog[_0x5e79d1(0x3a9)]['performCounter']=function(_0x5dc4fb){const _0x20b337=_0x5e79d1;VisuMZ[_0x20b337(0x57e)][_0x20b337(0xc96)][_0x20b337(0x695)](this,_0x5dc4fb),this['callNextMethod']();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x4e2)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x316)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x316)]=function(_0x4b94a7){const _0x4e6871=_0x5e79d1;VisuMZ[_0x4e6871(0x57e)][_0x4e6871(0x4e2)]['call'](this,_0x4b94a7),this[_0x4e6871(0x451)]();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x9f7)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x70b)],Window_BattleLog[_0x5e79d1(0x3a9)]['performSubstitute']=function(_0x4d7304,_0x56a2a3){const _0x4997b4=_0x5e79d1;VisuMZ[_0x4997b4(0x57e)][_0x4997b4(0x9f7)][_0x4997b4(0x695)](this,_0x4d7304,_0x56a2a3),this['callNextMethod']();},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xad2)]=Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x948)],Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x948)]=function(_0x5ab50f){const _0x3a4e98=_0x5e79d1;VisuMZ[_0x3a4e98(0x57e)][_0x3a4e98(0xad2)]['call'](this,_0x5ab50f),this[_0x3a4e98(0x451)]();},Window_BattleLog['prototype'][_0x5e79d1(0x821)]=function(_0x2be346,_0x2750aa){const _0x48d05f=_0x5e79d1;_0x2be346[_0x48d05f(0x821)](_0x2750aa),this['callNextMethod']();},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x981)]=function(_0x3eb54a,_0x466783){const _0xd0acf3=_0x5e79d1,_0x42197=_0x3eb54a['attackAnimationId1']();_0x42197<=0x0?SoundManager[_0xd0acf3(0x72a)]():this[_0xd0acf3(0xb09)](_0x466783,_0x42197);},Window_BattleLog['prototype'][_0x5e79d1(0x820)]=function(_0x967b10,_0x264d50,_0x330b95){const _0x1685da=_0x5e79d1,_0x4eadbf=[_0x967b10][_0x1685da(0x960)](_0x264d50);for(const _0x56f54b of _0x4eadbf){if(!_0x56f54b)continue;_0x56f54b['setImmortal'](_0x330b95);}this[_0x1685da(0x451)]();},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x2f4)]=function(_0x5df65f){const _0x3ddfc4=_0x5e79d1;this[_0x3ddfc4(0x754)]=_0x5df65f;},Window_BattleLog[_0x5e79d1(0x3a9)][_0x5e79d1(0x792)]=function(_0x59a463,_0x137c53){const _0x10aa34=_0x5e79d1;for(const _0x556397 of _0x59a463){if(!_0x556397)continue;_0x556397[_0x10aa34(0x792)](_0x137c53);}this[_0x10aa34(0x451)]();},Window_BattleLog['prototype'][_0x5e79d1(0xcc9)]=function(_0xd15b82,_0x465b4c,_0x210336,_0x53cfe6,_0x579fe8,_0x45fb19){const _0x551a1c=_0x5e79d1;_0xd15b82[_0x551a1c(0x72b)](_0x465b4c,_0x210336,_0x53cfe6,_0x579fe8,_0x45fb19,-0x1),this[_0x551a1c(0x451)]();},Window_BattleLog[_0x5e79d1(0x3a9)]['performMoveToTargets']=function(_0x5b6718,_0x5abb31,_0x62ca6,_0x8ec669,_0x3c97d3,_0x568e98,_0x5e7070){const _0x44f524=_0x5e79d1,_0x5a8db8=Math['min'](..._0x5abb31[_0x44f524(0x343)](_0x242f96=>_0x242f96[_0x44f524(0x949)]()[_0x44f524(0x523)]-_0x242f96[_0x44f524(0x949)]()[_0x44f524(0x872)]()/0x2)),_0x417e57=Math[_0x44f524(0x9db)](..._0x5abb31['map'](_0x4ab6f4=>_0x4ab6f4[_0x44f524(0x949)]()['_baseX']+_0x4ab6f4['battler']()[_0x44f524(0x872)]()/0x2)),_0x3186ee=Math[_0x44f524(0x52b)](..._0x5abb31[_0x44f524(0x343)](_0x15e857=>_0x15e857['battler']()['_baseY']-_0x15e857[_0x44f524(0x949)]()[_0x44f524(0x58a)]())),_0x5b8bcd=Math[_0x44f524(0x9db)](..._0x5abb31['map'](_0x26eda4=>_0x26eda4[_0x44f524(0x949)]()[_0x44f524(0x415)])),_0x465468=_0x5abb31[_0x44f524(0x984)](_0x4bbbc2=>_0x4bbbc2[_0x44f524(0x2ff)]())['length'],_0x2fab9e=_0x5abb31[_0x44f524(0x984)](_0x34bb4a=>_0x34bb4a[_0x44f524(0x4cf)]())[_0x44f524(0xc35)];let _0x48317a=0x0,_0x48c449=0x0;if(_0x62ca6[_0x44f524(0xcd4)](/front/i))_0x48317a=_0x465468>=_0x2fab9e?_0x5a8db8:_0x417e57;else{if(_0x62ca6['match'](/middle/i))_0x48317a=(_0x5a8db8+_0x417e57)/0x2,_0x5e7070=-0x1;else _0x62ca6['match'](/back/i)&&(_0x48317a=_0x465468>=_0x2fab9e?_0x417e57:_0x5a8db8);}if(_0x62ca6['match'](/head/i))_0x48c449=_0x3186ee;else{if(_0x62ca6[_0x44f524(0xcd4)](/center/i)){_0x48c449=(_0x3186ee+_0x5b8bcd)/0x2;if(_0x5b6718[_0x44f524(0x949)]())_0x48c449+=_0x5b6718[_0x44f524(0x949)]()[_0x44f524(0x912)]/0x2;}else _0x62ca6[_0x44f524(0xcd4)](/base/i)&&(_0x48c449=_0x5b8bcd);}_0x5b6718[_0x44f524(0x72b)](_0x48317a,_0x48c449,_0x8ec669,_0x3c97d3,_0x568e98,_0x5e7070),this[_0x44f524(0x451)]();},Window_BattleLog[_0x5e79d1(0x3a9)]['performJump']=function(_0x2884fd,_0x38c266,_0x4d3de0){const _0x147d29=_0x5e79d1;for(const _0x56366f of _0x2884fd){if(!_0x56366f)continue;_0x56366f[_0x147d29(0x525)](_0x38c266,_0x4d3de0);}this[_0x147d29(0x451)]();};function Window_BattleMultiTarget(){const _0x5ebcb5=_0x5e79d1;this[_0x5ebcb5(0xb75)](...arguments);}Window_BattleMultiTarget[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Window_Command[_0x5e79d1(0x3a9)]),Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x54e)]=Window_BattleMultiTarget,VisuMZ['BattleCore'][_0x5e79d1(0xc89)]['MultiTarget']=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0xa25)]||{},Window_BattleMultiTarget['WIDTH']=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0xa25)][_0x5e79d1(0xbdb)]??0x118,Window_BattleMultiTarget[_0x5e79d1(0x924)]=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0xa25)][_0x5e79d1(0xadd)]??0x2,Window_BattleMultiTarget[_0x5e79d1(0x63d)]=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['MultiTarget'][_0x5e79d1(0x4e7)]??!![],Window_BattleMultiTarget[_0x5e79d1(0x427)]=VisuMZ['BattleCore'][_0x5e79d1(0xc89)]['MultiTarget'][_0x5e79d1(0xa38)]??'All\x20Allies',Window_BattleMultiTarget[_0x5e79d1(0x670)]=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0xa25)][_0x5e79d1(0x8fe)]??'All\x20Enemies',Window_BattleMultiTarget[_0x5e79d1(0xa68)]=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['MultiTarget'][_0x5e79d1(0x884)]??0x0,Window_BattleMultiTarget[_0x5e79d1(0x3f7)]=VisuMZ['BattleCore'][_0x5e79d1(0xc89)][_0x5e79d1(0xa25)][_0x5e79d1(0x34b)]??0x0,Window_BattleMultiTarget[_0x5e79d1(0xbdc)]=VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0xa25)][_0x5e79d1(0xbde)]??0x0,Window_BattleMultiTarget['ENEMY_OFFSET_Y']=VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0xa25)][_0x5e79d1(0xcb7)]??0x0,Window_BattleMultiTarget[_0x5e79d1(0x3a9)]['initialize']=function(_0x2fee4f,_0xb23a63){const _0x884d9c=_0x5e79d1;this[_0x884d9c(0x6ff)]=_0xb23a63,Window_Command['prototype'][_0x884d9c(0xb75)][_0x884d9c(0x695)](this,_0x2fee4f),this['setBackgroundType'](Window_BattleMultiTarget[_0x884d9c(0x924)]),this[_0x884d9c(0x6db)](),this[_0x884d9c(0xb7b)](),this[_0x884d9c(0x1f7)]();},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0xa22)]=function(){return this['_forActor'];},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ae)]=function(){const _0x3970ce=_0x5e79d1;let _0x1411ee=this[_0x3970ce(0xa22)]()?Window_BattleMultiTarget[_0x3970ce(0x427)]:Window_BattleMultiTarget['ALL_ENEMIES'];if(Imported['VisuMZ_0_CoreEngine']&&Window_BattleMultiTarget[_0x3970ce(0x63d)]){this[_0x3970ce(0x4aa)]=this[_0x3970ce(0xa22)]()?_0x3970ce(0x632):_0x3970ce(0xb90),this[_0x3970ce(0x83b)]=TextManager[_0x3970ce(0x891)](this[_0x3970ce(0x4aa)]);const _0xa6b070=VisuMZ[_0x3970ce(0x91d)][_0x3970ce(0xc89)]['ButtonAssist'][_0x3970ce(0x4c7)];_0x1411ee=_0xa6b070['format'](this[_0x3970ce(0x83b)],_0x1411ee);}this[_0x3970ce(0x6a4)](_0x1411ee,_0x3970ce(0xb86));},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x78b)]=function(_0x4028aa){const _0x4a2e3f=_0x5e79d1,_0x1b3f04=this[_0x4a2e3f(0x906)](_0x4028aa);this[_0x4a2e3f(0x834)](),this[_0x4a2e3f(0xc44)](this['isCommandEnabled'](_0x4028aa));const _0x67c7ca=this[_0x4a2e3f(0xb08)](_0x4028aa),_0x205c8d=this[_0x4a2e3f(0x55c)](_0x67c7ca)[_0x4a2e3f(0xa0f)],_0x4e9208=_0x1b3f04['x']+Math['floor']((_0x1b3f04['width']-_0x205c8d)/0x2);this[_0x4a2e3f(0x567)](_0x67c7ca,_0x4e9208,_0x1b3f04['y'],_0x1b3f04[_0x4a2e3f(0xa0f)]);},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x3f1)]=function(){const _0x1ebfbc=_0x5e79d1;Window_Command[_0x1ebfbc(0x3a9)][_0x1ebfbc(0x3f1)][_0x1ebfbc(0x695)](this),this[_0x1ebfbc(0x934)](),this[_0x1ebfbc(0x577)]();},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x934)]=function(){const _0x25a3a2=_0x5e79d1;this['visible']=this[_0x25a3a2(0x881)]();},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x881)]=function(){const _0x2d4cbe=_0x5e79d1,_0x430634=BattleManager[_0x2d4cbe(0x7a3)](),_0x1e4b85=_0x430634&&_0x430634[_0x2d4cbe(0x6af)]();if(!_0x1e4b85)return![];const _0x260db5=SceneManager[_0x2d4cbe(0xc59)];if(this[_0x2d4cbe(0xa22)]()){if(_0x260db5[_0x2d4cbe(0x3ce)][_0x2d4cbe(0x5dc)]&&_0x260db5[_0x2d4cbe(0x3ce)]['_handlers'][_0x2d4cbe(0x632)])return!![];if(_0x260db5[_0x2d4cbe(0x315)][_0x2d4cbe(0x5dc)]&&_0x260db5[_0x2d4cbe(0x315)]['_handlers'][_0x2d4cbe(0x632)])return!![];}else{if(_0x260db5[_0x2d4cbe(0x315)][_0x2d4cbe(0x5dc)]&&_0x260db5[_0x2d4cbe(0x315)][_0x2d4cbe(0x7ff)]['pageup'])return!![];}return![];},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x577)]=function(){const _0xa01b99=_0x5e79d1;if(!Imported[_0xa01b99(0xaac)])return;this[_0xa01b99(0x83b)]!==TextManager[_0xa01b99(0x891)](this[_0xa01b99(0x4aa)])&&this[_0xa01b99(0x562)]();},Window_BattleMultiTarget[_0x5e79d1(0x3a9)][_0x5e79d1(0x98b)]=function(){const _0x3b27ce=_0x5e79d1;if(this[_0x3b27ce(0xcc4)]&&TouchInput[_0x3b27ce(0xaed)]()){const _0x41a943=this['hitIndex']();if(_0x41a943>=0x0){const _0x27c3ad=this[_0x3b27ce(0xa22)]()?_0x3b27ce(0x632):_0x3b27ce(0xb90);Input['virtualClick'](_0x27c3ad);}}};function Window_DamageCounter(){const _0x209c53=_0x5e79d1;this[_0x209c53(0xb75)](...arguments);}Window_DamageCounter[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Window_Base[_0x5e79d1(0x3a9)]),Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0x54e)]=Window_DamageCounter,Window_DamageCounter[_0x5e79d1(0x78f)]={'enabled':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x69b)]['Enable']??!![],'customFontFace':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x69b)][_0x5e79d1(0x89f)]??'','textAlign':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x69b)][_0x5e79d1(0x8a4)]??_0x5e79d1(0xa75),'hitsDmgFmt':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x69b)][_0x5e79d1(0xac1)]??_0x5e79d1(0x580),'hitsHealFmt':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x69b)]['hitsHealFmt']??_0x5e79d1(0xac7),'totalDmgFmt':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x69b)][_0x5e79d1(0x213)]??_0x5e79d1(0xa50),'totalHealFmt':VisuMZ['BattleCore'][_0x5e79d1(0xc89)][_0x5e79d1(0x69b)][_0x5e79d1(0x705)]??'\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','fadeShiftX':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['ComboWindow']['fadeShiftX']??-0x2,'fadeShiftY':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['ComboWindow'][_0x5e79d1(0x377)]??0x0,'positionOffsetX':VisuMZ[_0x5e79d1(0x57e)]['Settings']['ComboWindow'][_0x5e79d1(0x84a)]??0x0,'positionOffsetY':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x69b)][_0x5e79d1(0x886)]??0x0,'updateDuration':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['ComboWindow'][_0x5e79d1(0x7ec)]??0x14,'minimumStayDuration':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x69b)][_0x5e79d1(0xae8)]??0x28,'minimumHits':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x69b)][_0x5e79d1(0x1f0)]??0x1,'opacitySpeed':VisuMZ['BattleCore']['Settings'][_0x5e79d1(0x69b)]['opacitySpeed']??0x10},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x40bf82){const _0x467adc=_0x5e79d1;this[_0x467adc(0x33b)]=0x0,Window_Base[_0x467adc(0x3a9)][_0x467adc(0xb75)][_0x467adc(0x695)](this,_0x40bf82),this['_targetX']=_0x40bf82['x'],this[_0x467adc(0x853)]=_0x40bf82['y'],this[_0x467adc(0x97c)](),this[_0x467adc(0x1ff)](0x2);},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0x97c)]=function(){const _0x3f744c=_0x5e79d1;this[_0x3f744c(0x953)]=0x0,this['_totalHits']=0x0,this[_0x3f744c(0x27a)]=0x0,this['_targetHits']=0x0,this['_targetDamage']=0x0;},Window_DamageCounter['prototype'][_0x5e79d1(0x419)]=function(){const _0x39910e=_0x5e79d1;Window_Base[_0x39910e(0x3a9)]['resetFontSettings'][_0x39910e(0x695)](this);const _0x1bd5ea=Window_DamageCounter[_0x39910e(0x78f)];_0x1bd5ea['customFontFace']?this['contents'][_0x39910e(0x2c1)]=_0x1bd5ea['customFontFace']:this['contents']['fontFace']=$gameSystem[_0x39910e(0x276)]();};var $comboWindowReset=function(){const _0x312635=_0x5e79d1;if(!SceneManager['isSceneBattle']())return;const _0x3c9762=SceneManager[_0x312635(0xc59)][_0x312635(0xc90)];if(_0x3c9762)_0x3c9762[_0x312635(0x97c)]();};Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0xc56)]=function(_0x375e90){const _0x4ccffb=_0x5e79d1;this['_targetHits']+=Math['round'](_0x375e90);const _0x4e6790=Window_DamageCounter[_0x4ccffb(0x78f)];this['_updateDuration']=_0x4e6790['updateDuration'],this['_targetHits']>=_0x4e6790[_0x4ccffb(0x1f0)]&&(this[_0x4ccffb(0x33b)]=_0x4e6790[_0x4ccffb(0xae8)]);};var $comboWindowIncreaseHits=function(_0xc486a8){const _0x1b28e3=_0x5e79d1;if(!SceneManager[_0x1b28e3(0x6a6)]())return;const _0x5056f8=SceneManager[_0x1b28e3(0xc59)]['_damageCounterWindow'];if(_0x5056f8)_0x5056f8[_0x1b28e3(0xc56)](_0xc486a8);};Window_DamageCounter[_0x5e79d1(0x3a9)]['increaseTotal']=function(_0x2c89b7){const _0x2a70d2=_0x5e79d1;this['_targetDamage']+=Math['round'](_0x2c89b7);const _0x51f04e=Window_DamageCounter['SETTINGS'];this[_0x2a70d2(0x953)]=_0x51f04e['updateDuration'],this[_0x2a70d2(0x376)]>=_0x51f04e[_0x2a70d2(0x1f0)]&&(this[_0x2a70d2(0x33b)]=_0x51f04e[_0x2a70d2(0xae8)]);};var $comboWindowIncreaseDamage=function(_0x26327a){const _0x3c2b86=_0x5e79d1;if(!SceneManager[_0x3c2b86(0x6a6)]())return;const _0x2bf369=SceneManager[_0x3c2b86(0xc59)][_0x3c2b86(0xc90)];if(_0x2bf369)_0x2bf369[_0x3c2b86(0x591)](_0x26327a);},$comboWindowIncreaseHealing=function(_0x294aca){const _0x44b04d=_0x5e79d1;if(!SceneManager[_0x44b04d(0x6a6)]())return;const _0x13240b=SceneManager[_0x44b04d(0xc59)]['_damageCounterWindow'];if(_0x13240b)_0x13240b['increaseTotal'](-_0x294aca);};VisuMZ[_0x5e79d1(0x57e)]['Scene_Battle_createAllWindows_ComboWindow']=Scene_Battle[_0x5e79d1(0x3a9)]['createAllWindows'],Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x808)]=function(){const _0x59b187=_0x5e79d1;this[_0x59b187(0x9bc)](),VisuMZ[_0x59b187(0x57e)][_0x59b187(0xc49)]['call'](this);},Scene_Battle['prototype']['createDamageCounterWindow']=function(){const _0x27931f=_0x5e79d1;if(!Window_DamageCounter[_0x27931f(0x78f)]['enabled'])return;const _0x4397ca=this[_0x27931f(0x2fa)](),_0x4e64ff=new Window_DamageCounter(_0x4397ca);this['addWindow'](_0x4e64ff),this[_0x27931f(0xc90)]=_0x4e64ff;},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0x2fa)]=function(){const _0xfce436=_0x5e79d1;if(VisuMZ['BattleCore'][_0xfce436(0xc89)][_0xfce436(0x69b)][_0xfce436(0x457)])return VisuMZ[_0xfce436(0x57e)][_0xfce436(0xc89)]['ComboWindow'][_0xfce436(0x457)][_0xfce436(0x695)](this);const _0x198e48=Math[_0xfce436(0xb46)](Graphics[_0xfce436(0xa0f)]/0x4),_0x4eaee9=this[_0xfce436(0xabf)](0x2,!![]),_0x211f36=0x0+this['comboWindowOffsetX'](),_0x4569c8=Math[_0xfce436(0xa7d)](Graphics[_0xfce436(0x6e6)]*0x1/0x3)+this[_0xfce436(0xb2b)]();return new Rectangle(_0x211f36,_0x4569c8,_0x198e48,_0x4eaee9);},Scene_Battle[_0x5e79d1(0x3a9)][_0x5e79d1(0xb3e)]=function(){const _0xf1c6c=_0x5e79d1;return Window_DamageCounter[_0xf1c6c(0x78f)][_0xf1c6c(0xb26)];},Scene_Battle[_0x5e79d1(0x3a9)]['comboWindowOffsetY']=function(){const _0x334408=_0x5e79d1;return Window_DamageCounter[_0x334408(0x78f)][_0x334408(0x4af)];},Window_DamageCounter[_0x5e79d1(0x3a9)]['update']=function(){const _0x4f986a=_0x5e79d1;Window_Base[_0x4f986a(0x3a9)][_0x4f986a(0x3f1)]['call'](this),this[_0x4f986a(0x61d)](),this[_0x4f986a(0x2aa)]();},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0x61d)]=function(){const _0x156d6a=_0x5e79d1;if(this[_0x156d6a(0x953)]<=0x0)return;const _0x161b3c=this[_0x156d6a(0x953)];this['_totalHits']=this[_0x156d6a(0x376)],this[_0x156d6a(0x27a)]=(this[_0x156d6a(0x27a)]*(_0x161b3c-0x1)+this[_0x156d6a(0x975)])/_0x161b3c,this[_0x156d6a(0x953)]--,this[_0x156d6a(0x953)]<=0x0&&(this[_0x156d6a(0x4e1)]=this['_targetHits'],this[_0x156d6a(0x27a)]=this[_0x156d6a(0x975)]),this['refresh']();},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0x2aa)]=function(){const _0x10a9a3=_0x5e79d1,_0x158726=Window_DamageCounter[_0x10a9a3(0x78f)],_0xa34a3a=this[_0x10a9a3(0x881)](),_0x272ffe=_0x158726['opacitySpeed']||0x1;if(_0xa34a3a&&this[_0x10a9a3(0x3ba)]<0xff)this['contentsOpacity']+=_0x272ffe;else!_0xa34a3a&&this[_0x10a9a3(0x3ba)]>0x0&&(this['contentsOpacity']-=_0x272ffe,this['x']+=_0x158726['fadeShiftX']||0x0,this['y']+=_0x158726[_0x10a9a3(0x377)]||0x0);},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0x881)]=function(){const _0x389d17=_0x5e79d1,_0x42bd77=Window_DamageCounter[_0x389d17(0x78f)];if(this['_targetHits']>=_0x42bd77[_0x389d17(0x1f0)])return!![];if(this[_0x389d17(0x33b)]-->0x0)return!![];return![];},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0x980)]=Game_Action[_0x5e79d1(0x3a9)][_0x5e79d1(0x62e)],Game_Action[_0x5e79d1(0x3a9)]['executeHpDamage']=function(_0x36aff5,_0x82dd8b){const _0x268bde=_0x5e79d1;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x82dd8b),VisuMZ['BattleCore'][_0x268bde(0x980)]['call'](this,_0x36aff5,_0x82dd8b);},VisuMZ[_0x5e79d1(0x57e)]['BattleManager_endAction_ComboWindow']=BattleManager[_0x5e79d1(0xb49)],BattleManager[_0x5e79d1(0xb49)]=function(){const _0x14aa49=_0x5e79d1;$comboWindowReset(),VisuMZ[_0x14aa49(0x57e)][_0x14aa49(0xae0)]['call'](this);},Window_DamageCounter['prototype'][_0x5e79d1(0x562)]=function(){const _0x55a444=_0x5e79d1;this[_0x55a444(0x365)][_0x55a444(0x438)](),this[_0x55a444(0x950)](),this['x']=this['_targetX'],this['y']=this[_0x55a444(0x853)];},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0xcc6)]=function(){const _0x1157bd=_0x5e79d1,_0x5bb7b2=Window_DamageCounter[_0x1157bd(0x78f)];return _0x5bb7b2['textAlign']||'left';},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0x56a)]=function(){const _0x580440=_0x5e79d1,_0xa74225=Window_DamageCounter[_0x580440(0x78f)];let _0x3a9a23=this[_0x580440(0x27a)]>=0x0?_0xa74225[_0x580440(0xac1)]:_0xa74225[_0x580440(0xc4e)];return _0x3a9a23[_0x580440(0x2a0)](Math[_0x580440(0x7b9)](Math['ceil'](this[_0x580440(0x4e1)])));},Window_DamageCounter[_0x5e79d1(0x3a9)][_0x5e79d1(0x2cb)]=function(){const _0x309b44=_0x5e79d1,_0xdfd7e7=Window_DamageCounter['SETTINGS'];let _0x116765=this[_0x309b44(0x27a)]>=0x0?_0xdfd7e7[_0x309b44(0x213)]:_0xdfd7e7[_0x309b44(0x705)];return _0x116765[_0x309b44(0x2a0)](Math['abs'](Math['round'](this['_totalDamage'])));},Window_DamageCounter[_0x5e79d1(0x3a9)]['drawComboText']=function(){const _0x244819=_0x5e79d1;if(VisuMZ[_0x244819(0x57e)][_0x244819(0xc89)]['ComboWindow'][_0x244819(0x41e)])return VisuMZ[_0x244819(0x57e)]['Settings'][_0x244819(0x69b)]['ComboWindow_DrawJS'][_0x244819(0x695)](this);let _0x1fff57=0x0,_0x2f310b=0x0;const _0x15a983=this[_0x244819(0x56a)](),_0x2691bb=this[_0x244819(0x55c)](_0x15a983);if(this[_0x244819(0xcc6)]()===_0x244819(0x2e6))_0x1fff57=this['innerWidth']-this['itemPadding']()-_0x2691bb[_0x244819(0xa0f)];else this['textAlignment']()===_0x244819(0x2ad)?_0x1fff57=Math[_0x244819(0x48d)]((this[_0x244819(0xa21)]-_0x2691bb[_0x244819(0xa0f)])/0x2):_0x1fff57=this[_0x244819(0xa6f)]();this[_0x244819(0x567)](_0x15a983,_0x1fff57,_0x2f310b),_0x2f310b+=Math['ceil'](this['lineHeight']()*0x2/0x3);const _0x2e0872=this['damageText'](),_0x55c585=this[_0x244819(0x55c)](_0x2e0872);if(this[_0x244819(0xcc6)]()==='right')_0x1fff57=this['innerWidth']-this[_0x244819(0xa6f)]()-_0x55c585[_0x244819(0xa0f)];else this[_0x244819(0xcc6)]()===_0x244819(0x2ad)?_0x1fff57=Math[_0x244819(0x48d)]((this[_0x244819(0xa21)]-_0x55c585[_0x244819(0xa0f)])/0x2):_0x1fff57=this[_0x244819(0xa6f)]();this['drawTextEx'](_0x2e0872,_0x1fff57,_0x2f310b);};function Window_InBattleStatus(){const _0x20dae4=_0x5e79d1;this[_0x20dae4(0xb75)](...arguments);}Window_InBattleStatus[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Window_StatusBase[_0x5e79d1(0x3a9)]),Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x54e)]=Window_InBattleStatus,Window_InBattleStatus[_0x5e79d1(0x78f)]={'bgType':VisuMZ[_0x5e79d1(0x57e)]['Settings']['InBattleStatus'][_0x5e79d1(0xc4b)]??0x0,'statusGraphic':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['InBattleStatus'][_0x5e79d1(0xa49)]??'face','statusHelpDesc':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x5e79d1(0x9ea)]??_0x5e79d1(0x217),'pageButtons':VisuMZ['BattleCore'][_0x5e79d1(0xc89)]['InBattleStatus']['pageButtons']??!![],'pageButtonPosition':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x4b9)]??_0x5e79d1(0xa75),'pageOffsetX':VisuMZ[_0x5e79d1(0x57e)]['Settings']['InBattleStatus'][_0x5e79d1(0x379)]??0x0,'pageOffsetY':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x681)][_0x5e79d1(0x6c3)]??0x0,'buffValueFmt':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x76f)]??_0x5e79d1(0x69d),'debuffValueFmt':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)]['debuffValueFmt']??_0x5e79d1(0x612),'enemyStatus':VisuMZ[_0x5e79d1(0x57e)]['Settings']['InBattleStatus']['enemyStatus']??!![],'enemyShowLevel':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x4db)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x681)][_0x5e79d1(0x2f0)]??_0x5e79d1(0xca8),'enemyShowParametersAlways':VisuMZ['BattleCore']['Settings'][_0x5e79d1(0x681)][_0x5e79d1(0xa03)]??![],'enemyShowParametersIfBattleTest':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x20a)]??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x681)][_0x5e79d1(0xb5e)]??!![]},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x5adcaf){const _0x4b4555=_0x5e79d1;Window_StatusBase[_0x4b4555(0x3a9)][_0x4b4555(0xb75)]['call'](this,_0x5adcaf),this[_0x4b4555(0x1ff)](Window_InBattleStatus[_0x4b4555(0x78f)][_0x4b4555(0x40f)]),this['createEnemySprite'](),this[_0x4b4555(0x908)](),this[_0x4b4555(0x4b1)]();},Window_InBattleStatus['prototype']['setBattler']=function(_0x38c876){const _0x5bbfac=_0x5e79d1;this[_0x5bbfac(0xab5)]=_0x38c876,this['refresh'](),this['_statesWindow']&&this[_0x5bbfac(0x4e8)]['setBattler'](_0x38c876);},Window_InBattleStatus['prototype'][_0x5e79d1(0x3d7)]=function(){const _0x2c871c=_0x5e79d1;Window_StatusBase[_0x2c871c(0x3a9)][_0x2c871c(0x3d7)][_0x2c871c(0x695)](this);if(this[_0x2c871c(0x4e8)])this[_0x2c871c(0x4e8)][_0x2c871c(0x3d7)]();this[_0x2c871c(0xb21)](),Imported[_0x2c871c(0x3fb)]&&SceneManager[_0x2c871c(0x6f2)](null);},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xc12)]=function(){const _0x179c9f=_0x5e79d1;Window_StatusBase[_0x179c9f(0x3a9)][_0x179c9f(0xc12)][_0x179c9f(0x695)](this);if(this[_0x179c9f(0x4e8)])this['_statesWindow'][_0x179c9f(0xc12)]();},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x691)]=function(_0xcbd9d7){const _0x5cb0cb=_0x5e79d1;this[_0x5cb0cb(0x5df)]=_0xcbd9d7;},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x2e0)]=function(){const _0x5921b9=_0x5e79d1;return this['_returnWindow']||SceneManager[_0x5921b9(0xc59)][_0x5921b9(0xc82)];},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x403)]=function(){const _0x2d138c=_0x5e79d1;Window_StatusBase['prototype'][_0x2d138c(0x403)][_0x2d138c(0x695)](this),this[_0x2d138c(0x9df)]();},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x9df)]=function(){const _0x5d7bf9=_0x5e79d1;for(const _0x47880a of $gameParty[_0x5d7bf9(0x6fd)]()){if(!_0x47880a)continue;_0x47880a[_0x5d7bf9(0x53a)]()&&ImageManager['loadCharacter'](_0x47880a[_0x5d7bf9(0x53a)]()),_0x47880a['battlerName']()&&ImageManager[_0x5d7bf9(0x1e2)](_0x47880a['battlerName']()),_0x47880a[_0x5d7bf9(0x973)]&&ImageManager[_0x5d7bf9(0x27d)](_0x47880a[_0x5d7bf9(0x973)]());}},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xb8f)]=function(){const _0x4b4cce=_0x5e79d1;this['_enemySprite']=new Sprite(),this['_enemySprite']['anchor']['x']=0.5,this['_enemySprite'][_0x4b4cce(0x64c)]['y']=0x1,this['addChild'](this[_0x4b4cce(0x1d2)]);},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x908)]=function(){const _0x5554b8=_0x5e79d1,_0x31cfd8=this['statesWindowRect'](),_0xd9129a=new Window_InBattleStatusStates(_0x31cfd8);this[_0x5554b8(0x593)](_0xd9129a),_0xd9129a[_0x5554b8(0x312)](SceneManager[_0x5554b8(0xc59)][_0x5554b8(0x66b)]),this['_statesWindow']=_0xd9129a;},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x2cd)]=function(){const _0x229c2a=_0x5e79d1,_0x393d7f=Window_InBattleStatusStates[_0x229c2a(0x78f)][_0x229c2a(0x560)],_0x4945f2=Math['min'](_0x393d7f,Math[_0x229c2a(0x48d)](this['width']/0x2)),_0x5f197b=Graphics['boxWidth']>0x44c?this[_0x229c2a(0x912)]:this[_0x229c2a(0x649)]()*0x4+this[_0x229c2a(0x749)]*0x2,_0x40c5d7=this[_0x229c2a(0xa0f)]-_0x4945f2,_0x91062f=this[_0x229c2a(0x912)]-_0x5f197b;return new Rectangle(_0x40c5d7,_0x91062f,_0x4945f2,_0x5f197b);},Window_InBattleStatus[_0x5e79d1(0x3a9)]['createPageButtons']=function(){const _0x4215fa=_0x5e79d1;if(!ConfigManager['touchUI'])return;if(!Window_InBattleStatus[_0x4215fa(0x78f)][_0x4215fa(0x864)])return;this[_0x4215fa(0x7c2)]=new Sprite_Button(_0x4215fa(0xb90)),this['_pageupButton']['x']=this[_0x4215fa(0x62a)]()+Window_InBattleStatus['SETTINGS'][_0x4215fa(0x379)],this[_0x4215fa(0x7c2)]['y']=this[_0x4215fa(0x826)]()+Window_InBattleStatus[_0x4215fa(0x78f)][_0x4215fa(0x6c3)];const _0x55e21f=this[_0x4215fa(0x7c2)]['x']+this['_pageupButton']['width'];this[_0x4215fa(0xb1d)]=new Sprite_Button(_0x4215fa(0x632)),this[_0x4215fa(0xb1d)]['x']=_0x55e21f+0x4,this['_pagedownButton']['y']=this[_0x4215fa(0x7c2)]['y'],this[_0x4215fa(0x593)](this['_pageupButton']),this[_0x4215fa(0x593)](this[_0x4215fa(0xb1d)]),this[_0x4215fa(0x7c2)][_0x4215fa(0xc47)](this[_0x4215fa(0x5d5)]['bind'](this)),this['_pagedownButton']['setClickHandler'](this[_0x4215fa(0x25a)][_0x4215fa(0x95a)](this));},Window_InBattleStatus[_0x5e79d1(0x3a9)]['pageButtonX']=function(){const _0x124323=_0x5e79d1;if(Graphics[_0x124323(0x486)]>0x44c&&Graphics['boxHeight']>0x2bc){if(Window_InBattleStatus[_0x124323(0x78f)][_0x124323(0x4b9)]==='left'){let _0x3cd5bd=Math[_0x124323(0xb46)]((-this['x']-0x64)/0x2);if(_0x3cd5bd>=-0x64)_0x3cd5bd=this[_0x124323(0x749)];return _0x3cd5bd;}else{const _0x397501=Graphics['boxWidth']-this['x']-this[_0x124323(0xa0f)];let _0x1a271a=Math[_0x124323(0x48d)]((_0x397501-0x64)/0x2)+this[_0x124323(0xa0f)];return _0x1a271a;}}else return this[_0x124323(0xa0f)]-0x64-this['padding']/0x2;},Window_InBattleStatus[_0x5e79d1(0x3a9)]['pageButtonY']=function(){const _0x19153a=_0x5e79d1;return Graphics['boxWidth']>0x44c&&Graphics['boxHeight']>0x2bc?this[_0x19153a(0x912)]-0x30-this[_0x19153a(0x749)]:0x30+this[_0x19153a(0x749)];},Window_InBattleStatus['prototype'][_0x5e79d1(0x5d5)]=function(){const _0x390043=_0x5e79d1;let _0x3a19e9=this['getBattleMembers']();if(_0x3a19e9[_0x390043(0xc35)]<=0x1&&!Window_InBattleStatus[_0x390043(0x78f)][_0x390043(0x452)])return;let _0x2a516b=_0x3a19e9[_0x390043(0x985)](this[_0x390043(0xab5)]);_0x2a516b--;_0x2a516b<0x0&&(Window_InBattleStatus[_0x390043(0x78f)][_0x390043(0x452)]&&(_0x3a19e9=this[_0x390043(0x8eb)](!![])),_0x2a516b=_0x3a19e9[_0x390043(0xc35)]-0x1);const _0x2480bd=_0x3a19e9[_0x2a516b];this[_0x390043(0x46e)](_0x2480bd),SoundManager['playCursor']();},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x25a)]=function(){const _0x45b020=_0x5e79d1;let _0x5e33b2=this[_0x45b020(0x8eb)]();if(_0x5e33b2[_0x45b020(0xc35)]<=0x1&&!Window_InBattleStatus[_0x45b020(0x78f)][_0x45b020(0x452)])return;let _0x3f467a=_0x5e33b2[_0x45b020(0x985)](this[_0x45b020(0xab5)]);_0x3f467a++;_0x3f467a>=_0x5e33b2[_0x45b020(0xc35)]&&(Window_InBattleStatus[_0x45b020(0x78f)][_0x45b020(0x452)]&&(_0x5e33b2=this[_0x45b020(0x8eb)](!![])),_0x3f467a=0x0);const _0x302a9b=_0x5e33b2[_0x3f467a];this[_0x45b020(0x46e)](_0x302a9b),SoundManager[_0x45b020(0x9bf)]();},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x8eb)]=function(_0x30f081){const _0x42a6c9=_0x5e79d1;let _0x2acfb3=[];const _0x473e27=_0x30f081?this[_0x42a6c9(0xab5)][_0x42a6c9(0x412)]():this[_0x42a6c9(0xab5)][_0x42a6c9(0xa93)]();return _0x473e27===$gameParty?_0x2acfb3=$gameParty['battleMembers']():_0x2acfb3=$gameTroop[_0x42a6c9(0x43a)](),_0x2acfb3['remove'](null);},Window_InBattleStatus['prototype'][_0x5e79d1(0x3f1)]=function(){const _0x1fc295=_0x5e79d1;Window_Base[_0x1fc295(0x3a9)]['update']['call'](this),this[_0x1fc295(0x3d4)]();},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x3d4)]=function(){const _0x472418=_0x5e79d1;if(this[_0x472418(0x9e5)]()){if(this['isCancelTriggered']())return this[_0x472418(0x3c9)]();if(Input[_0x472418(0x3b1)](_0x472418(0x2e6)))return this[_0x472418(0x25a)]();if(Input[_0x472418(0x3b1)](_0x472418(0xa75)))return this[_0x472418(0x5d5)]();}},SoundManager[_0x5e79d1(0x9bf)]=function(){const _0x2fad7c=_0x5e79d1;this[_0x2fad7c(0xbb9)](0x0);},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x9e5)]=function(){const _0x45327b=_0x5e79d1;return this['isOpen']()&&this[_0x45327b(0xcc4)];},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xaf1)]=function(){const _0x391223=_0x5e79d1;if(Input['isTriggered']('cancel'))return!![];if(TouchInput[_0x391223(0x2b2)]())return!![];return![];},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x3c9)]=function(){const _0x3f2891=_0x5e79d1;SoundManager[_0x3f2891(0xa95)](),this['deactivate'](),this[_0x3f2891(0x4e8)]&&(this[_0x3f2891(0x4e8)][_0x3f2891(0x1f7)](),this['_statesWindow']['deactivate']()),SceneManager[_0x3f2891(0xc59)][_0x3f2891(0x581)]();},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xb21)]=function(){const _0x5bb1bc=_0x5e79d1;if(!this['_pageupButton'])return;if(!this[_0x5bb1bc(0xb1d)])return;const _0x566d69=$gameParty[_0x5bb1bc(0xb9d)]()['length']>0x0||Window_InBattleStatus[_0x5bb1bc(0x78f)][_0x5bb1bc(0x452)];this[_0x5bb1bc(0x7c2)][_0x5bb1bc(0xcc4)]=_0x566d69,this[_0x5bb1bc(0xb1d)][_0x5bb1bc(0xcc4)]=_0x566d69;},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x562)]=function(){const _0x369687=_0x5e79d1;Window_StatusBase[_0x369687(0x3a9)][_0x369687(0x562)]['call'](this);if(this[_0x369687(0x1d2)])this['_enemySprite'][_0x369687(0xb7b)]();this[_0x369687(0x365)]['clear'](),this[_0x369687(0xc9f)][_0x369687(0x438)]();if(!this[_0x369687(0xab5)])return;this[_0x369687(0x24a)]();},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x24a)]=function(){const _0x11ea6a=_0x5e79d1;if(VisuMZ[_0x11ea6a(0x57e)][_0x11ea6a(0xc89)]['InBattleStatus']['StatusWindow_DrawJS'])return VisuMZ[_0x11ea6a(0x57e)]['Settings'][_0x11ea6a(0x681)][_0x11ea6a(0x4eb)][_0x11ea6a(0x695)](this);{const _0x437a33=this['colSpacing']()/0x2,_0x47d266=ImageManager['faceHeight'],_0x22061d=_0x47d266/0x2-this[_0x11ea6a(0x649)]()*1.5;this[_0x11ea6a(0x65a)](this[_0x11ea6a(0xab5)],_0x437a33+0x1,0x0,ImageManager[_0x11ea6a(0x95d)],_0x47d266),this[_0x11ea6a(0x4d9)](this['_battler'],_0x437a33+0xb4,_0x22061d);}{let _0xc61605=this[_0x11ea6a(0xa8b)](),_0x125eaa=0x0,_0x1c7d92=Math[_0x11ea6a(0xb46)](this['drawingAreaWidth']()/0x2),_0x1c52d8=0x0;const _0x475289=this[_0x11ea6a(0xae9)]();let _0xc658a9=_0x125eaa;const _0x1d0c15=this[_0x11ea6a(0x793)]-ImageManager[_0x11ea6a(0x450)],_0x2694c6=Math['ceil'](_0x475289['length']/0x2)*this['lineHeight']();let _0xf89a95=Math[_0x11ea6a(0xb46)]((_0x1d0c15-_0x2694c6)/0x2)+ImageManager[_0x11ea6a(0x450)],_0x552073=Math[_0x11ea6a(0x48d)](_0xc61605/0x2);this[_0x11ea6a(0x4e8)]['y']!==0x0&&(this[_0x11ea6a(0x4e8)]['y']=_0xf89a95);for(const _0x487a09 of _0x475289){this[_0x11ea6a(0x8a0)](_0xc658a9,_0xf89a95,_0x552073,this[_0x11ea6a(0x649)]()),this[_0x11ea6a(0xaf8)](_0x487a09,_0xc658a9,_0xf89a95,_0x552073),_0x1c52d8++,_0x1c52d8%0x2===0x0?(_0xc658a9=_0x125eaa,_0xf89a95+=this[_0x11ea6a(0x649)]()):_0xc658a9=_0x1c7d92;}}},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x9ca)]=function(){const _0x314cbb=_0x5e79d1;return VisuMZ[_0x314cbb(0x57e)][_0x314cbb(0xc89)][_0x314cbb(0x681)][_0x314cbb(0xa49)];},Window_InBattleStatus['prototype'][_0x5e79d1(0x65a)]=function(_0x2bf13a,_0x4aa9f4,_0x43c878,_0xeab2d8,_0x3fa369){const _0x42a35c=_0x5e79d1;if(_0x2bf13a[_0x42a35c(0x2ff)]())switch(this[_0x42a35c(0x9ca)]()){case _0x42a35c(0x8f6):break;case _0x42a35c(0x96c):this[_0x42a35c(0x7cb)](_0x2bf13a,_0x4aa9f4,_0x43c878+0x1,_0xeab2d8,_0x3fa369-0x2);break;case _0x42a35c(0x669):this[_0x42a35c(0x8bd)](_0x2bf13a,_0x4aa9f4,_0x43c878+0x1,_0xeab2d8,_0x3fa369-0x2);break;default:this[_0x42a35c(0x730)](_0x2bf13a,_0x4aa9f4,_0x43c878,_0xeab2d8,_0x3fa369);break;}else this[_0x42a35c(0x69a)](_0x2bf13a,_0x4aa9f4,_0x43c878,_0xeab2d8,_0x3fa369);},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x730)]=function(_0x2a8c1d,_0x1e25cd,_0x27ee0a,_0x124680,_0x180dc2){const _0x3db0f2=_0x5e79d1;_0x124680=_0x124680||ImageManager[_0x3db0f2(0x95d)],_0x180dc2=_0x180dc2||ImageManager[_0x3db0f2(0x450)];const _0x5e3398=ImageManager['faceWidth'],_0x1e726f=_0x180dc2-0x2,_0x1b33c1=_0x1e25cd+Math[_0x3db0f2(0x48d)]((_0x124680-_0x5e3398)/0x2);this[_0x3db0f2(0x54e)]===Window_MenuStatus&&this[_0x3db0f2(0xc44)](_0x2a8c1d[_0x3db0f2(0xcc2)]()),this['drawActorFace'](_0x2a8c1d,_0x1b33c1,_0x27ee0a,_0x5e3398,_0x1e726f),this[_0x3db0f2(0xc44)](!![]);},Window_InBattleStatus['prototype'][_0x5e79d1(0x7cb)]=function(_0x5128ab,_0x4b5cdb,_0x4dc243,_0x196c3a,_0x22da7a){const _0x3f9962=_0x5e79d1;_0x196c3a=_0x196c3a||ImageManager[_0x3f9962(0x95d)],_0x22da7a=_0x22da7a||ImageManager[_0x3f9962(0x450)];const _0x4c9969=_0x5128ab['characterName'](),_0x53de4b=_0x5128ab[_0x3f9962(0x520)](),_0x595807=ImageManager['loadCharacter'](_0x4c9969),_0x297354=ImageManager['isBigCharacter'](_0x4c9969),_0x48310c=_0x595807[_0x3f9962(0xa0f)]/(_0x297354?0x3:0xc),_0x4ffa97=_0x595807[_0x3f9962(0x912)]/(_0x297354?0x4:0x8),_0x16cca0=_0x196c3a,_0x137c78=_0x22da7a-0x2,_0x3cd85a=_0x4b5cdb+Math[_0x3f9962(0x48d)](_0x16cca0/0x2),_0x196327=_0x4dc243+Math['ceil']((_0x22da7a+_0x4ffa97)/0x2);this[_0x3f9962(0x54e)]===Window_MenuStatus&&this[_0x3f9962(0xc44)](_0x5128ab[_0x3f9962(0xcc2)]());const _0x42df5b=Math[_0x3f9962(0x52b)](_0x196c3a,_0x48310c),_0x4e0f62=Math['min'](_0x22da7a,_0x4ffa97),_0x5aabab=Math[_0x3f9962(0x48d)](_0x4b5cdb+Math['max'](_0x196c3a-_0x48310c,0x0)/0x2),_0x3af83b=Math[_0x3f9962(0x48d)](_0x4dc243+Math[_0x3f9962(0x9db)](_0x22da7a-_0x4ffa97,0x0)/0x2),_0x120d13=_0x297354?0x0:_0x53de4b,_0x3464e3=(_0x120d13%0x4*0x3+0x1)*_0x48310c,_0x2e2d23=Math[_0x3f9962(0x48d)](_0x120d13/0x4)*0x4*_0x4ffa97;this[_0x3f9962(0x365)][_0x3f9962(0x67e)](_0x595807,_0x3464e3,_0x2e2d23,_0x42df5b,_0x4e0f62,_0x5aabab,_0x3af83b),this['changePaintOpacity'](!![]);},Window_InBattleStatus['prototype'][_0x5e79d1(0x8bd)]=function(_0x5e92bd,_0x53e4a9,_0x3d160f,_0x3f39ed,_0x4c507f,_0x2044c9){const _0xe31669=_0x5e79d1;_0x3f39ed=_0x3f39ed||ImageManager[_0xe31669(0x95d)],_0x4c507f=_0x4c507f||ImageManager[_0xe31669(0x450)];const _0x523d73=ImageManager[_0xe31669(0x1e2)](_0x2044c9?_0x5e92bd[_0xe31669(0xbea)]():_0x5e92bd[_0xe31669(0x481)]()),_0x8f6dd0=_0x523d73['width']/ImageManager['svActorHorzCells'],_0x5cb5f3=_0x523d73[_0xe31669(0x912)]/ImageManager[_0xe31669(0x605)],_0x31c5fe=_0x3f39ed,_0x34b433=_0x4c507f-0x2,_0x62be8=_0x53e4a9+Math[_0xe31669(0x48d)](_0x31c5fe/0x2),_0x3e851f=_0x3d160f+Math[_0xe31669(0xb46)]((_0x4c507f+_0x5cb5f3)/0x2);this[_0xe31669(0x54e)]===Window_MenuStatus&&this[_0xe31669(0xc44)](_0x5e92bd[_0xe31669(0xcc2)]());const _0x333dd6=_0x5e92bd[_0xe31669(0x413)]&&_0x5e92bd['hasStaticSvBattler'](),_0x59d84d=0x0,_0x4d2c6d=0x0,_0x491623=_0x333dd6?_0x523d73[_0xe31669(0xa0f)]:_0x8f6dd0,_0x391603=_0x333dd6?_0x523d73[_0xe31669(0x912)]:_0x5cb5f3,_0x538043=Math[_0xe31669(0x52b)](0x1,_0x3f39ed/_0x491623,_0x4c507f/_0x391603),_0x2de20f=_0x538043*_0x491623,_0x4c8c15=_0x538043*_0x391603,_0x2e8871=Math['floor'](_0x53e4a9+Math[_0xe31669(0x9db)](_0x3f39ed-_0x2de20f,0x0)/0x2),_0x3032a0=Math[_0xe31669(0x48d)](_0x3d160f+Math[_0xe31669(0x9db)](_0x4c507f-_0x4c8c15,0x0)/0x2);this[_0xe31669(0x365)][_0xe31669(0x67e)](_0x523d73,_0x59d84d,_0x4d2c6d,_0x491623,_0x391603,_0x2e8871,_0x3032a0,_0x2de20f,_0x4c8c15),this[_0xe31669(0xc44)](!![]);},Window_InBattleStatus['prototype'][_0x5e79d1(0x69a)]=function(_0x13781e,_0x50bce1,_0x36d034,_0x18ac18,_0x4e03d5){const _0x5e2e1c=_0x5e79d1;if(_0x13781e[_0x5e2e1c(0x3ef)]()){this[_0x5e2e1c(0x8bd)](_0x13781e,_0x50bce1,_0x36d034+0x1,_0x18ac18,_0x4e03d5-0x2,!![]);return;}const _0x59b683=_0x13781e[_0x5e2e1c(0x481)](),_0x5dbd41=$gameSystem[_0x5e2e1c(0x9a5)]()?ImageManager[_0x5e2e1c(0x60c)](_0x59b683):ImageManager[_0x5e2e1c(0xade)](_0x59b683);_0x5dbd41['addLoadListener'](this[_0x5e2e1c(0x42c)]['bind'](this,_0x13781e,_0x5dbd41,_0x50bce1,_0x36d034,_0x18ac18,_0x4e03d5));},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x42c)]=function(_0x4494f1,_0x4c82e1,_0x29daad,_0x7cb2fa,_0x4f4f91,_0x277216){const _0x5783e9=_0x5e79d1;if(this[_0x5783e9(0xab5)]!==_0x4494f1)return;this['_enemySprite'][_0x5783e9(0xbb5)](),this[_0x5783e9(0x1d2)][_0x5783e9(0xc11)]=new Bitmap(_0x4f4f91,_0x277216);const _0x4f9fb0=_0x4f4f91,_0x30801a=_0x277216,_0x35a9b8=Math[_0x5783e9(0x52b)](_0x4f9fb0,_0x30801a),_0x2e8dfb=this[_0x5783e9(0x1d2)][_0x5783e9(0xc11)],_0x57b115=Math['min'](0x1,_0x35a9b8/_0x4c82e1[_0x5783e9(0xa0f)],_0x35a9b8/_0x4c82e1[_0x5783e9(0x912)]),_0x548541=_0x4c82e1[_0x5783e9(0xa0f)]*_0x57b115,_0x36867f=_0x4c82e1[_0x5783e9(0x912)]*_0x57b115,_0x34e3e0=Math[_0x5783e9(0xa7d)]((_0x4f9fb0-_0x548541)/0x2),_0x1599e4=Math[_0x5783e9(0xa7d)]((_0x30801a-_0x36867f)/0x2);_0x2e8dfb[_0x5783e9(0x67e)](_0x4c82e1,0x0,0x0,_0x4c82e1[_0x5783e9(0xa0f)],_0x4c82e1[_0x5783e9(0x912)],_0x34e3e0,_0x1599e4,_0x548541,_0x36867f),this['_enemySprite'][_0x5783e9(0x64c)]['x']=0.5,this[_0x5783e9(0x1d2)]['anchor']['y']=0x1,this[_0x5783e9(0x1d2)]['x']=_0x29daad+_0x4f4f91/0x2+this[_0x5783e9(0x749)],this['_enemySprite']['y']=_0x7cb2fa+_0x277216+this[_0x5783e9(0x749)],this[_0x5783e9(0x1d2)][_0x5783e9(0x3de)](this[_0x5783e9(0xab5)][_0x5783e9(0x98c)]());},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x895)]=function(_0x10b6c3,_0x505f25,_0x5c69d1,_0x4e795d){const _0x5905a9=_0x5e79d1;if(_0x10b6c3[_0x5905a9(0x4cf)]())_0x4e795d=this[_0x5905a9(0xa21)]-_0x505f25;Window_StatusBase[_0x5905a9(0x3a9)][_0x5905a9(0x895)][_0x5905a9(0x695)](this,_0x10b6c3,_0x505f25,_0x5c69d1,_0x4e795d);},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xaea)]=function(_0xc12a45,_0x3a2d74,_0x484050,_0x2443c8){const _0x4c0ab1=_0x5e79d1;if(!_0xc12a45[_0x4c0ab1(0x2ff)]())return;Window_StatusBase[_0x4c0ab1(0x3a9)]['drawActorClass'][_0x4c0ab1(0x695)](this,_0xc12a45,_0x3a2d74,_0x484050,_0x2443c8);},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x630)]=function(_0x40b59f,_0x4b1e61,_0x512336){const _0xc47427=_0x5e79d1;if(_0x40b59f['isEnemy']()&&!Window_InBattleStatus['SETTINGS'][_0xc47427(0x4db)])return;Window_StatusBase[_0xc47427(0x3a9)]['drawActorLevel'][_0xc47427(0x695)](this,_0x40b59f,_0x4b1e61,_0x512336);},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x53f)]=function(_0x354058,_0x4bb2aa,_0x2e2a2e,_0x398b3d){const _0x4fb47a=_0x5e79d1;_0x354058[_0x4fb47a(0xb9f)]=!![],Window_StatusBase['prototype'][_0x4fb47a(0x53f)][_0x4fb47a(0x695)](this,_0x354058,_0x4bb2aa,_0x2e2a2e,_0x398b3d),_0x354058[_0x4fb47a(0xb9f)]=undefined;},VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xba7)]=Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x4d7)],Game_BattlerBase[_0x5e79d1(0x3a9)]['allIcons']=function(){const _0x31922e=_0x5e79d1;if(this['_hideAllIcons'])return[];return VisuMZ[_0x31922e(0x57e)]['Game_BattlerBase_allIconsIBS'][_0x31922e(0x695)](this);},Window_InBattleStatus[_0x5e79d1(0x3a9)]['placeGauge']=function(_0x371662,_0x3f5634,_0x13d794,_0x1737bb){const _0x1df038=_0x5e79d1,_0x4b2879=_0x1df038(0xa90)['format'](_0x371662[_0x1df038(0x5e5)](),_0x3f5634);let _0x4e2f6f=![];if(_0x371662[_0x1df038(0x4cf)]()){const _0x1f22ac=Window_InBattleStatus[_0x1df038(0x78f)];if(_0x3f5634==='hp'&&_0x1f22ac[_0x1df038(0xb1f)])_0x4e2f6f=!![];if(_0x3f5634==='mp'&&_0x1f22ac[_0x1df038(0x36e)])_0x4e2f6f=!![];if(_0x3f5634==='tp'&&_0x1f22ac[_0x1df038(0xcd0)])_0x4e2f6f=!![];}const _0x450e5b=this['createInnerSprite'](_0x4b2879,_0x4e2f6f?Sprite_GaugeRate:Sprite_Gauge);_0x450e5b['setup'](_0x371662,_0x3f5634),_0x450e5b['move'](_0x13d794,_0x1737bb),_0x450e5b[_0x1df038(0xbb5)]();},Window_InBattleStatus['prototype'][_0x5e79d1(0xa8b)]=function(){const _0x5297c4=_0x5e79d1,_0x1f0884=this[_0x5297c4(0x4e8)]?this[_0x5297c4(0x4e8)][_0x5297c4(0xa0f)]:0x0;return this[_0x5297c4(0xa21)]-_0x1f0884+this[_0x5297c4(0x749)]*0x2;},Window_InBattleStatus[_0x5e79d1(0x3a9)]['displayedParams']=function(){const _0x461f6f=_0x5e79d1;return Imported[_0x461f6f(0xaac)]?VisuMZ[_0x461f6f(0x91d)][_0x461f6f(0xc89)][_0x461f6f(0x43b)][_0x461f6f(0xb4b)]:[_0x461f6f(0x6b4),'MaxMP',_0x461f6f(0x927),_0x461f6f(0xb67),_0x461f6f(0x5ae),'MDF',_0x461f6f(0xb31),_0x461f6f(0x31f)];},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0xaf8)]=function(_0x4dd408,_0x1ec16f,_0x399b24,_0x28e4af){const _0xa40079=_0x5e79d1,_0x1ed6fb=Window_InBattleStatus[_0xa40079(0x78f)],_0x58c74f=Imported[_0xa40079(0xaac)];this[_0xa40079(0x419)]();let _0x8bf2e4='',_0xb3bbd=0x0,_0x43c75d=[_0xa40079(0x79b),'MAXMP',_0xa40079(0x927),_0xa40079(0xb67),_0xa40079(0x5ae),_0xa40079(0x6ea),'AGI','LUK'][_0xa40079(0x985)](String(_0x4dd408)[_0xa40079(0xcde)]()['trim']());if(_0x58c74f)_0x8bf2e4=TextManager[_0xa40079(0x4e0)](_0x4dd408),_0xb3bbd=VisuMZ[_0xa40079(0xb96)](_0x4dd408);else{if(_0x43c75d>=0x0&&_0x43c75d<0x8)_0x8bf2e4=TextManager['param'](_0x43c75d);}if(_0x43c75d>=0x0&&_0x43c75d<0x8){const _0x294dc6=this[_0xa40079(0xab5)][_0xa40079(0x300)][_0x43c75d];this[_0xa40079(0xab5)][_0xa40079(0x582)](_0x294dc6,_0x43c75d)!==0x0&&(_0xb3bbd=this[_0xa40079(0xab5)][_0xa40079(0x582)](_0x294dc6,_0x43c75d));}if(_0x8bf2e4){let _0x343113='\x5cI[%2]\x5cC[16]%1\x5cC[0]'['format'](_0x8bf2e4,_0xb3bbd);_0x28e4af<=0xd4&&(_0x343113=_0xa40079(0xcd3)[_0xa40079(0x2a0)](_0x8bf2e4));const _0x10d13c=_0x28e4af<=0xd4?'\x20':'\x20\x20';this[_0xa40079(0x567)](_0x10d13c+_0x343113,_0x1ec16f,_0x399b24);}this['resetTextColor']();let _0x22a547='';_0x58c74f?_0x22a547=this[_0xa40079(0xab5)]['paramValueByName'](_0x4dd408,!![]):_0x22a547=String(this['_battler'][_0xa40079(0xbab)](_0x43c75d));if(this['_battler']['isEnemy']()){let _0x513997=!![];if(_0x1ed6fb[_0xa40079(0xa03)])_0x513997=![];if(_0x1ed6fb['enemyShowParametersIfBattleTest']&&BattleManager[_0xa40079(0xcb8)]())_0x513997=![];if(_0x1ed6fb[_0xa40079(0xb5e)]&&$gameSystem[_0xa40079(0x7a1)]()[_0xa40079(0x9fb)](this['_battler'][_0xa40079(0x6d7)]()))_0x513997=![];_0x513997&&(_0x22a547=_0x1ed6fb['enemyHiddenParameter']);}if(_0x43c75d>=0x0&&_0x43c75d<0x8){if(this[_0xa40079(0xab5)][_0xa40079(0x732)](_0x43c75d)>0x1)_0x22a547=_0x1ed6fb[_0xa40079(0x76f)][_0xa40079(0x2a0)](_0x22a547),Imported[_0xa40079(0xa5b)]?this[_0xa40079(0x763)](ColorManager[_0xa40079(0xc0f)]()):this[_0xa40079(0x763)](ColorManager[_0xa40079(0x8ef)]());else this[_0xa40079(0xab5)][_0xa40079(0x732)](_0x43c75d)<0x1&&(_0x22a547=_0x1ed6fb[_0xa40079(0x89c)][_0xa40079(0x2a0)](_0x22a547),Imported[_0xa40079(0xa5b)]?this['changeTextColor'](ColorManager[_0xa40079(0xb0c)]()):this['changeTextColor'](ColorManager[_0xa40079(0x7fb)]()));}if(String(_0x22a547)){const _0x555c72=_0x28e4af<=0xd4?'\x20':'\x20\x20';this[_0xa40079(0x5e1)](_0x22a547+_0x555c72,_0x1ec16f,_0x399b24,_0x28e4af,'right');}},Window_InBattleStatus[_0x5e79d1(0x3a9)][_0x5e79d1(0x8a0)]=function(_0x5747ee,_0x357d16,_0x319cf1,_0x1b599b){const _0x463a05=_0x5e79d1;_0x1b599b=_0x1b599b||this[_0x463a05(0x649)](),this[_0x463a05(0xc9f)][_0x463a05(0x4d0)]=0xa0;const _0x5afa01=ColorManager[_0x463a05(0xa06)]();this[_0x463a05(0xc9f)][_0x463a05(0xa9f)](_0x5747ee+0x1,_0x357d16+0x1,_0x319cf1-0x2,_0x1b599b-0x2,_0x5afa01),this[_0x463a05(0xc9f)][_0x463a05(0x4d0)]=0xff;},Game_BattlerBase[_0x5e79d1(0x3a9)][_0x5e79d1(0x732)]=function(_0x481d22){const _0x469592=_0x5e79d1;let _0x5433bd=0x1;_0x5433bd*=this[_0x469592(0x339)](_0x481d22);for(const _0x3ad8d1 of this[_0x469592(0xbb0)]()){if(!_0x3ad8d1)continue;for(const _0x516105 of _0x3ad8d1[_0x469592(0x2f1)]){if(!_0x516105)continue;if(_0x516105[_0x469592(0xbe2)]!==Game_BattlerBase[_0x469592(0xbae)])continue;if(_0x516105['dataId']!==_0x481d22)continue;_0x5433bd*=_0x516105[_0x469592(0x992)];}}return _0x5433bd;};function Window_InBattleStatusStates(){const _0x5ec1bc=_0x5e79d1;this[_0x5ec1bc(0xb75)](...arguments);}Window_InBattleStatusStates[_0x5e79d1(0x3a9)]=Object[_0x5e79d1(0xa8f)](Window_Command[_0x5e79d1(0x3a9)]),Window_InBattleStatusStates['prototype']['constructor']=Window_InBattleStatusStates,Window_InBattleStatusStates['SETTINGS']={'maxWidth':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['InBattleStatus'][_0x5e79d1(0xcca)]??0x180,'drawStates':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['InBattleStatus'][_0x5e79d1(0x62c)]??!![],'drawBuffs':VisuMZ['BattleCore'][_0x5e79d1(0xc89)][_0x5e79d1(0x681)]['drawBuffs']??!![],'drawDebuffs':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x87a)]??!![],'normalIcon':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)]['normalIcon']??0x54,'normalText':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)]['InBattleStatus']['normalText']??'Normal','normalHelp':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x681)][_0x5e79d1(0xbda)]??_0x5e79d1(0x683),'stateHelpFmt':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x681)]['stateHelpFmt']??_0x5e79d1(0xb79),'buffNameFmt':VisuMZ[_0x5e79d1(0x57e)]['Settings']['InBattleStatus'][_0x5e79d1(0xb91)]??'%1▲','buffHelpFmt':VisuMZ[_0x5e79d1(0x57e)]['Settings'][_0x5e79d1(0x681)][_0x5e79d1(0x1c4)]??_0x5e79d1(0x493),'debuffNameFmt':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x1c8)]??_0x5e79d1(0x816),'debuffHelpFmt':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x7ad)]??_0x5e79d1(0x4b0),'actionsFmt':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0xc15)]??_0x5e79d1(0x82c),'turnsFmt':VisuMZ[_0x5e79d1(0x57e)][_0x5e79d1(0xc89)][_0x5e79d1(0x681)][_0x5e79d1(0x551)]??_0x5e79d1(0x3f4),'passiveText':VisuMZ['BattleCore'][_0x5e79d1(0xc89)][_0x5e79d1(0x681)]['passiveText']??'\x5cC[4](Passive)'},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0xb75)]=function(_0x35901e){const _0x15b540=_0x5e79d1;this[_0x15b540(0xab5)]=null,Window_Command[_0x15b540(0x3a9)][_0x15b540(0xb75)][_0x15b540(0x695)](this,_0x35901e),this[_0x15b540(0x6db)](),this[_0x15b540(0x1f7)](),this[_0x15b540(0x1ff)](0x2);},Window_InBattleStatusStates['prototype'][_0x5e79d1(0x46e)]=function(_0x1aa577){const _0x56b9f6=_0x5e79d1;this['_battler']=_0x1aa577||null,this[_0x56b9f6(0x562)](),this[_0x56b9f6(0x6ef)](0x0),this[_0x56b9f6(0x27c)](0x0,0x0),this[_0x56b9f6(0x838)]();},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x5f4)]=function(){},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x7ae)]=function(){const _0x4c331c=_0x5e79d1;if(!this[_0x4c331c(0xab5)])return;this[_0x4c331c(0x431)](),this[_0x4c331c(0x467)](),this[_0x4c331c(0x3d1)](),this[_0x4c331c(0x594)]();},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x431)]=function(){const _0x59c868=_0x5e79d1;if(!this[_0x59c868(0xab5)][_0x59c868(0x4cf)]())return;if(!this[_0x59c868(0xab5)][_0x59c868(0x7f8)]())return;const _0x21a620=this['_battler'][_0x59c868(0xa18)]()[_0x59c868(0x66e)],_0x7ea9e1=this[_0x59c868(0xab5)][_0x59c868(0xa18)]()[_0x59c868(0xae7)],_0x1d6c57=this[_0x59c868(0xab5)][_0x59c868(0xa18)]()['nameColor'];let _0x25597e='';_0x1d6c57[_0x59c868(0xcd4)](/#(.*?)/gi)&&Imported[_0x59c868(0x8a6)]?_0x25597e=_0x59c868(0x759)[_0x59c868(0x2a0)](_0x7ea9e1,_0x21a620,_0x1d6c57):_0x25597e=_0x59c868(0x43e)[_0x59c868(0x2a0)](_0x7ea9e1,_0x21a620,_0x1d6c57),this[_0x59c868(0x6a4)](_0x25597e,'aspect',!![]);},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x467)]=function(){const _0xb6d087=_0x5e79d1;if(!Window_InBattleStatusStates[_0xb6d087(0x78f)][_0xb6d087(0x62c)])return;for(const _0x7c8489 of this['_battler']['states']()){if(!this['includeState'](_0x7c8489))continue;const _0x38a0af=this[_0xb6d087(0xc62)](_0x7c8489);this[_0xb6d087(0x6a4)](_0x38a0af,'state',!![],_0x7c8489['id']);}},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0xc1d)]=function(_0x256a98){const _0x186a08=_0x5e79d1;if(!_0x256a98)return![];if(_0x256a98['name'][_0x186a08(0xacc)]()==='')return![];if(_0x256a98['name']['includes'](_0x186a08(0x2f3)))return![];if(_0x256a98[_0x186a08(0xae7)]<=0x0)return![];if(_0x256a98[_0x186a08(0xb01)])return![];return!![];},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0xc62)]=function(_0x6bb91f){const _0x51086e=_0x5e79d1;let _0x2672af=_0x6bb91f[_0x51086e(0xae7)],_0x48fe58=_0x6bb91f[_0x51086e(0x66e)],_0x181411='0';return Imported[_0x51086e(0xa5b)]&&Imported[_0x51086e(0x8a6)]&&(_0x181411=String(ColorManager[_0x51086e(0xa34)](_0x6bb91f))),_0x181411['match'](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'[_0x51086e(0x2a0)](_0x2672af,_0x48fe58,_0x181411):_0x51086e(0x43e)[_0x51086e(0x2a0)](_0x2672af,_0x48fe58,_0x181411);},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x3d1)]=function(){const _0x279da0=_0x5e79d1;for(let _0x3bedaa=0x0;_0x3bedaa<0x8;_0x3bedaa++){const _0x23ea4c=this[_0x279da0(0x40d)](_0x3bedaa);if(!_0x23ea4c)continue;this['addCommand'](_0x23ea4c,_0x279da0(0x262),!![],_0x3bedaa);}},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x40d)]=function(_0x342ce7){const _0x980a0a=_0x5e79d1;if(!this['_battler'][_0x980a0a(0x9c4)](_0x342ce7)&&!this[_0x980a0a(0xab5)]['isDebuffAffected'](_0x342ce7))return'';const _0x341b59=Window_InBattleStatusStates[_0x980a0a(0x78f)];if(this[_0x980a0a(0xab5)][_0x980a0a(0x9c4)](_0x342ce7)&&!_0x341b59['drawBuffs'])return'';if(this[_0x980a0a(0xab5)][_0x980a0a(0xbbe)](_0x342ce7)&&!_0x341b59['drawDebuffs'])return'';const _0x219518=this['_battler'][_0x980a0a(0x300)][_0x342ce7];let _0x34daf8=this[_0x980a0a(0xab5)][_0x980a0a(0x582)](_0x219518,_0x342ce7),_0xe42442=TextManager[_0x980a0a(0xbab)](_0x342ce7);_0x219518>0x0?_0xe42442=_0x341b59[_0x980a0a(0xb91)]['format'](_0xe42442):_0xe42442=_0x341b59[_0x980a0a(0x1c8)][_0x980a0a(0x2a0)](_0xe42442);let _0x5aaf63=0x0;return Imported[_0x980a0a(0xa5b)]&&(_0x5aaf63=_0x219518>0x0?ColorManager[_0x980a0a(0xc0f)]():ColorManager[_0x980a0a(0xb0c)]()),_0x5aaf63['match'](/#(.*?)/gi)?_0x980a0a(0x759)[_0x980a0a(0x2a0)](_0x34daf8,_0xe42442,_0x5aaf63):_0x980a0a(0x43e)[_0x980a0a(0x2a0)](_0x34daf8,_0xe42442,_0x5aaf63);},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x594)]=function(){const _0x1fa31a=_0x5e79d1;if(this[_0x1fa31a(0xa1a)][_0x1fa31a(0xc35)]>0x0)return;const _0x2953a7=Window_InBattleStatusStates[_0x1fa31a(0x78f)],_0x4f067e=_0x2953a7[_0x1fa31a(0x83f)],_0x3ba443=_0x2953a7[_0x1fa31a(0xaa7)],_0x1c37ca=_0x1fa31a(0x21c)[_0x1fa31a(0x2a0)](_0x4f067e,_0x3ba443);this[_0x1fa31a(0x6a4)](_0x1c37ca,_0x1fa31a(0x85b));},Window_InBattleStatusStates[_0x5e79d1(0x3a9)]['drawItem']=function(_0xd0feb){const _0x2dccbd=_0x5e79d1,_0x374b42=this[_0x2dccbd(0x906)](_0xd0feb);this[_0x2dccbd(0xc44)](0xff),this[_0x2dccbd(0x567)](this[_0x2dccbd(0xb08)](_0xd0feb),_0x374b42['x'],_0x374b42['y']),this[_0x2dccbd(0xb4e)](_0xd0feb,_0x374b42);},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0xb4e)]=function(_0x4b939d,_0x4c8ba1){const _0x9d3957=_0x5e79d1;if(!Imported[_0x9d3957(0xa5b)])return;const _0x2830a7=this['commandSymbol'](_0x4b939d),_0x1ac204=_0x4c8ba1['x']+0x2;if(_0x2830a7==='state'){const _0x512a42=$dataStates[this['_list'][_0x4b939d]['ext']||0x0];this['drawActorStateTurns'](this['_battler'],_0x512a42,_0x1ac204,_0x4c8ba1['y']),this['drawActorStateData'](this[_0x9d3957(0xab5)],_0x512a42,_0x1ac204,_0x4c8ba1['y']);}else{if(_0x2830a7===_0x9d3957(0x262)){const _0x45aae7=this[_0x9d3957(0xa1a)][_0x4b939d][_0x9d3957(0x777)];this[_0x9d3957(0x9f5)](this[_0x9d3957(0xab5)],_0x45aae7,_0x1ac204,_0x4c8ba1['y']),this['drawActorBuffRates'](this[_0x9d3957(0xab5)],_0x45aae7,_0x1ac204,_0x4c8ba1['y']);}}},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0x1f4)]=function(){const _0x5dc63d=_0x5e79d1,_0x4409ac=this[_0x5dc63d(0x956)]();let _0x5d14cf='';if(_0x4409ac===_0x5dc63d(0xab2))_0x5d14cf=this['_battler'][_0x5dc63d(0xa18)]()[_0x5dc63d(0x24b)];else{if(_0x4409ac===_0x5dc63d(0x2dd))_0x5d14cf=this[_0x5dc63d(0xbcf)]();else{if(_0x4409ac==='buff')_0x5d14cf=this[_0x5dc63d(0xad0)]();else _0x4409ac===_0x5dc63d(0x85b)&&(_0x5d14cf=Window_InBattleStatusStates[_0x5dc63d(0x78f)][_0x5dc63d(0xbda)]);}}_0x5d14cf?this[_0x5dc63d(0x66b)][_0x5dc63d(0x6c9)](_0x5d14cf):this[_0x5dc63d(0x66b)][_0x5dc63d(0x438)]();},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0xbcf)]=function(){const _0x289e9b=_0x5e79d1,_0x2388ce=Window_InBattleStatusStates['SETTINGS'],_0xcba826=this[_0x289e9b(0xc67)]();let _0x251271='';const _0x4dbda2=$dataStates[_0xcba826]||null;if(_0x4dbda2){const _0x551898=_0x2388ce['stateHelpFmt'];let _0x482e5f=_0x4dbda2[_0x289e9b(0x4fc)]||_0x4dbda2[_0x289e9b(0x24b)]||'';Imported[_0x289e9b(0xa5b)]&&(_0x482e5f=_0x482e5f[_0x289e9b(0x2a0)](this[_0x289e9b(0xab5)]['getStateDisplay'](_0xcba826)));let _0x66cbf5=_0x289e9b(0xa2b);if(this['_battler'][_0x289e9b(0x39f)](_0xcba826)){if(_0x4dbda2[_0x289e9b(0xb56)]===0x0)_0x66cbf5='none';if(_0x4dbda2['autoRemovalTiming']===0x1)_0x66cbf5=_0x289e9b(0x6ab);if(_0x4dbda2[_0x289e9b(0xb56)]===0x2)_0x66cbf5=_0x289e9b(0x469);}const _0x46b8eb=this[_0x289e9b(0xab5)][_0x289e9b(0x7ca)][_0xcba826]||0x0;let _0x9ed190=_0x289e9b(0x5d3);Imported[_0x289e9b(0xa5b)]&&Imported[_0x289e9b(0x8a6)]&&(_0x9ed190=ColorManager[_0x289e9b(0xa34)](_0x4dbda2),_0x9ed190[_0x289e9b(0xcd4)](/#(.*?)/gi)?_0x9ed190='\x5cHEXCOLOR<%1>'[_0x289e9b(0x2a0)](_0x9ed190):_0x9ed190=_0x289e9b(0xb48)[_0x289e9b(0x2a0)](_0x9ed190)),_0x251271=_0x551898['format'](_0x482e5f,this[_0x289e9b(0xc6a)](_0x66cbf5,_0x46b8eb,_0x9ed190));}return _0x251271;},Window_InBattleStatusStates[_0x5e79d1(0x3a9)][_0x5e79d1(0xad0)]=function(){const _0x271a50=_0x5e79d1,_0x4cab2f=Window_InBattleStatusStates[_0x271a50(0x78f)],_0x3f1db0=this[_0x271a50(0xc67)]();let _0xfc6dda='';const _0x57625a=this[_0x271a50(0xab5)][_0x271a50(0x9c4)](_0x3f1db0),_0x17b326=_0x57625a?_0x271a50(0x1c4):'debuffHelpFmt',_0x55eb27=_0x4cab2f[_0x17b326];let _0x4a90bf=_0x271a50(0x5d3);Imported[_0x271a50(0xa5b)]&&Imported['VisuMZ_1_MessageCore']&&(_0x4a90bf=_0x57625a?ColorManager[_0x271a50(0xc0f)]():ColorManager['debuffColor'](),_0x4a90bf[_0x271a50(0xcd4)](/#(.*?)/gi)?_0x4a90bf='\x5cHEXCOLOR<%1>'[_0x271a50(0x2a0)](_0x4a90bf):_0x4a90bf='\x5cC[%1]'[_0x271a50(0x2a0)](_0x4a90bf));const _0x4566c5=this[_0x271a50(0xab5)][_0x271a50(0x25f)][_0x3f1db0]||0x0;return _0xfc6dda=_0x55eb27[_0x271a50(0x2a0)](TextManager[_0x271a50(0xbab)](_0x3f1db0),Math[_0x271a50(0x48d)](this[_0x271a50(0xab5)]['paramBuffRate'](_0x3f1db0)*0x64)+'%',_0x4a90bf,this[_0x271a50(0xc6a)](_0x271a50(0x469),_0x4566c5,_0x4a90bf)),_0xfc6dda;},Window_InBattleStatusStates[_0x5e79d1(0x3a9)]['makeTurnsText']=function(_0x222e25,_0x332862,_0x1b1a96){const _0xad869e=_0x5e79d1,_0xe1c7c6=Window_InBattleStatusStates[_0xad869e(0x78f)];let _0x559d92=_0xe1c7c6[_0xad869e(0x416)];if(_0x222e25===_0xad869e(0x6ab))_0x559d92=_0xe1c7c6['actionsFmt'];if(_0x222e25===_0xad869e(0x469))_0x559d92=_0xe1c7c6[_0xad869e(0x3fd)];if(_0x222e25==='none')return'';return _0x559d92[_0xad869e(0x2a0)](_0x332862,_0x1b1a96);};